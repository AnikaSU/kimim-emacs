* Simple Mode Line
#+BEGIN_SRC emacs-lisp
  (defvar mode-line-cleaner-alist
    '((auto-complete-mode . "α")
      ;; Major modes
      (org-mode . "Ω")
      (org-indent-mode . "ï")
      (flyspell-mode . "f")
      (ivy-mode . "i")
      (irony-mode . "I")
      (which-key-mode . "W")
      (autopair-mode . "p")
      (auto-fill-mode . "F")
      (visual-line-mode . "w")
      (lisp-interaction-mode . "λ")))

  (defun clean-mode-line ()
    (interactive)
    (loop for cleaner in mode-line-cleaner-alist
          do (let* ((mode (car cleaner))
                    (mode-str (cdr cleaner))
                    (old-mode-str (cdr (assq mode minor-mode-alist))))
               (when old-mode-str (setcar old-mode-str mode-str))
               ;; major mode
               (when (eq mode major-mode)
                 (setq mode-name mode-str)))))

  (add-hook 'after-change-major-mode-hook 'clean-mode-line)
#+END_SRC
* COMMENT C Old
** ECB

#+BEGIN_SRC emacs-lisp
  (defun coding-mode ()
    ;; start coding mode
    (interactive)
    (ecb-activate)
    (semantic-mode)
    ;; http://stackoverflow.com/questions/2081577/setting-emacs-split-to-horizontal
    ;; but with ecb-compile-window-height = 10, this is no longer needed
    (setq split-height-threshold 0)
    (setq split-width-threshold 60)
    ;; minibuffer completion not work in ecb, use helm instead
    (add-to-list 'ecb-compilation-buffer-names
                 '("*helm-mode-execute-extended-command*" . nil)
                 '("*helm-mode-bookmark-jump*" . nill)))

  (defun working-mode ()
    (interactive)
    (setq split-height-threshold 80)
    (setq split-width-threshold 160)
    (ecb-deactivate))

  (setq ecb-layout-name "left-kimi0")
  (setq ecb-tip-of-the-day nil)
  ;; use left click as the primary mouse button
  (setq ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1))
  ;; With 'ecb-tree-incremental-search' you can specify if the current
  ;; search-pattern must be a real prefix of the node (default) or if any
  ;; substring is matched.
  (setq ecb-tree-incremental-search 'substring)
  (setq ecb-compile-window-height 15)
  (setq ecb-compile-window-width 'edit-window)
#+END_SRC

** Other Settings

#+BEGIN_SRC emacs-lisp
  ;; define new c variable symbol for thing-at-point, used in
  ;; ggtags-find-tag-dwim

  ;; TODO: how to my own ggtags-bounds-of-tag-function in c-mode only?
  (put 'c-variable 'end-op
       (lambda ()
         (re-search-forward "[A-Za-z0-9_]*" nil t)))

  (put 'c-variable 'beginning-op
       (lambda ()
         (if (re-search-backward "[^A-Za-z0-9_]" nil t)
             (forward-char)
           (goto-char (point-min)))))

  (defun my-c-mode-font-lock-if0 (limit)
     (save-restriction
       (widen)
       (save-excursion
         (goto-char (point-min))
         (let ((depth 0) str start start-depth)
           (while (re-search-forward "^\\s-*#\\s-*\\(if\\|else\\|endif\\)" limit 'move)
             (setq str (match-string 1))
             (if (string= str "if")
                 (progn
                   (setq depth (1+ depth))
                   (when (and (null start) (looking-at "\\s-+0"))
                     (setq start (match-end 0)
                           start-depth depth)))
               (when (and start (= depth start-depth))
                 (c-put-font-lock-face start (match-beginning 0) 'font-lock-if0-face)
                 (setq start nil))
               (when (string= str "endif")
                 (setq depth (1- depth)))))
           (when (and start (> depth 0))
             (c-put-font-lock-face start (point) 'font-lock-if0-face)))))
     nil)

  (defun my-c-mode-common-hook-if0 ()
     (font-lock-add-keywords
      nil
      '((my-c-mode-font-lock-if0 (0 font-lock-comment-face prepend))) 'add-to-end))

  ;; (defun my-c-mode-ggtags-hook()
  ;;   (setq ggtags-bounds-of-tag-function
  ;;         (lambda ()
  ;;           (bounds-of-thing-at-point 'c-variable))))

  (defun kimim/c-mode-ac-complete()
    (global-auto-complete-mode t)
    ;;(setq ac-clang-complete-executable "clang-complete")
    ;;(add-to-list 'ac-sources 'ac-source-clang-async)
    ;; settings inside .dir-locals.el will override this setting!
    ;; then how can I set the default ac-clang-cflags?
    ;; (if ac-clang-cflags
    ;;     (setq ac-clang-cflags (cons ac-clang-cflags '("-I../inc" "-I../include")))
    ;;   (setq ac-clang-cflags '("-I../inc" "-I../include")))
    ;;(ac-clang-launch-completion-process)
    ;;(ac-clang-update-cmdlineargs)
    )

  (add-hook 'c-mode-common-hook
            (lambda ()
              ;;(ggtags-mode 1)
  ;;            (fci-mode 1) ;; conflict with autocomplete, menu will disordered.
  ;;            (syntax-subword-mode 1)
              (hs-minor-mode t)
              (c-set-style "S800")
              (c-toggle-auto-newline 0)
              (c-toggle-auto-hungry-state 0)
              (c-toggle-syntactic-indentation 1)
              (highlight-indentation-mode 1)
              (which-function-mode 1)
              (local-set-key "\C-co" 'ff-find-other-file)
              ;;(local-set-key "\C-c\C-f" 'ggtags-find-file)
              (my-c-mode-common-hook-if0)
              (setq c-basic-offset 4)
              (kimim/c-mode-ac-complete)))

  ;; give clang-complete enough time to parse the code
  ;;(setq ac-timer 1)

  (defun ac-cc-mode-setup ()
  ;;  (setq ac-sources (append '(ac-source-clang-async ac-source-yasnippet ac-source-gtags) ac-sources)))
    (setq ac-sources (append '(ac-source-yasnippet ac-source-gtags) ac-sources)))

  (defun kimim/kill-grep-and-ggtags-done()
    (interactive)
  ;;  (org-agenda-quit)
    (ggtags-navigation-mode-done)
    (if (bufferp (get-buffer "*grep*"))
        (progn
          (switch-to-buffer "*grep*")
          (kill-buffer-and-window)))
    (if (bufferp (get-buffer "*Ibuffer*"))
        (progn
          (switch-to-buffer "*Ibuffer*")
          (kill-buffer-and-window))))

#+END_SRC
