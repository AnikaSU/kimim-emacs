* Simple Mode Line
#+BEGIN_SRC emacs-lisp
  (defvar mode-line-cleaner-alist
    '((auto-complete-mode . "α")
      ;; Major modes
      (org-mode . "Ω")
      (org-indent-mode . "ï")
      (flyspell-mode . "f")
      (ivy-mode . "i")
      (irony-mode . "I")
      (which-key-mode . "W")
      (autopair-mode . "p")
      (auto-fill-mode . "F")
      (visual-line-mode . "w")
      (lisp-interaction-mode . "λ")))

  (defun clean-mode-line ()
    (interactive)
    (loop for cleaner in mode-line-cleaner-alist
          do (let* ((mode (car cleaner))
                    (mode-str (cdr cleaner))
                    (old-mode-str (cdr (assq mode minor-mode-alist))))
               (when old-mode-str (setcar old-mode-str mode-str))
               ;; major mode
               (when (eq mode major-mode)
                 (setq mode-name mode-str)))))

  (add-hook 'after-change-major-mode-hook 'clean-mode-line)
#+END_SRC
* C
** ECB

#+BEGIN_SRC emacs-lisp
  (defun coding-mode ()
    ;; start coding mode
    (interactive)
    (ecb-activate)
    (semantic-mode)
    ;; http://stackoverflow.com/questions/2081577/setting-emacs-split-to-horizontal
    ;; but with ecb-compile-window-height = 10, this is no longer needed
    (setq split-height-threshold 0)
    (setq split-width-threshold 60)
    ;; minibuffer completion not work in ecb, use helm instead
    (add-to-list 'ecb-compilation-buffer-names
                 '("*helm-mode-execute-extended-command*" . nil)
                 '("*helm-mode-bookmark-jump*" . nill)))

  (defun working-mode ()
    (interactive)
    (setq split-height-threshold 80)
    (setq split-width-threshold 160)
    (ecb-deactivate))

  (setq ecb-layout-name "left-kimi0")
  (setq ecb-tip-of-the-day nil)
  ;; use left click as the primary mouse button
  (setq ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1))
  ;; With 'ecb-tree-incremental-search' you can specify if the current
  ;; search-pattern must be a real prefix of the node (default) or if any
  ;; substring is matched.
  (setq ecb-tree-incremental-search 'substring)
  (setq ecb-compile-window-height 15)
  (setq ecb-compile-window-width 'edit-window)
#+END_SRC

** Other Settings

#+BEGIN_SRC emacs-lisp
  ;; define new c variable symbol for thing-at-point, used in
  ;; ggtags-find-tag-dwim

  ;; TODO: how to my own ggtags-bounds-of-tag-function in c-mode only?
  (put 'c-variable 'end-op
       (lambda ()
         (re-search-forward "[A-Za-z0-9_]*" nil t)))

  (put 'c-variable 'beginning-op
       (lambda ()
         (if (re-search-backward "[^A-Za-z0-9_]" nil t)
             (forward-char)
           (goto-char (point-min)))))

  (defun my-c-mode-font-lock-if0 (limit)
     (save-restriction
       (widen)
       (save-excursion
         (goto-char (point-min))
         (let ((depth 0) str start start-depth)
           (while (re-search-forward "^\\s-*#\\s-*\\(if\\|else\\|endif\\)" limit 'move)
             (setq str (match-string 1))
             (if (string= str "if")
                 (progn
                   (setq depth (1+ depth))
                   (when (and (null start) (looking-at "\\s-+0"))
                     (setq start (match-end 0)
                           start-depth depth)))
               (when (and start (= depth start-depth))
                 (c-put-font-lock-face start (match-beginning 0) 'font-lock-if0-face)
                 (setq start nil))
               (when (string= str "endif")
                 (setq depth (1- depth)))))
           (when (and start (> depth 0))
             (c-put-font-lock-face start (point) 'font-lock-if0-face)))))
     nil)

  (defun my-c-mode-common-hook-if0 ()
     (font-lock-add-keywords
      nil
      '((my-c-mode-font-lock-if0 (0 font-lock-comment-face prepend))) 'add-to-end))

  ;; (defun my-c-mode-ggtags-hook()
  ;;   (setq ggtags-bounds-of-tag-function
  ;;         (lambda ()
  ;;           (bounds-of-thing-at-point 'c-variable))))

  (defun kimim/c-mode-ac-complete()
    (global-auto-complete-mode t)
    ;;(setq ac-clang-complete-executable "clang-complete")
    ;;(add-to-list 'ac-sources 'ac-source-clang-async)
    ;; settings inside .dir-locals.el will override this setting!
    ;; then how can I set the default ac-clang-cflags?
    ;; (if ac-clang-cflags
    ;;     (setq ac-clang-cflags (cons ac-clang-cflags '("-I../inc" "-I../include")))
    ;;   (setq ac-clang-cflags '("-I../inc" "-I../include")))
    ;;(ac-clang-launch-completion-process)
    ;;(ac-clang-update-cmdlineargs)
    )

  (add-hook 'c-mode-common-hook
            (lambda ()
              ;;(ggtags-mode 1)
  ;;            (fci-mode 1) ;; conflict with autocomplete, menu will disordered.
  ;;            (syntax-subword-mode 1)
              (hs-minor-mode t)
              (c-set-style "S800")
              (c-toggle-auto-newline 0)
              (c-toggle-auto-hungry-state 0)
              (c-toggle-syntactic-indentation 1)
              (highlight-indentation-mode 1)
              (which-function-mode 1)
              (local-set-key "\C-co" 'ff-find-other-file)
              ;;(local-set-key "\C-c\C-f" 'ggtags-find-file)
              (my-c-mode-common-hook-if0)
              (setq c-basic-offset 4)
              (kimim/c-mode-ac-complete)))

  ;; give clang-complete enough time to parse the code
  ;;(setq ac-timer 1)

  (defun ac-cc-mode-setup ()
  ;;  (setq ac-sources (append '(ac-source-clang-async ac-source-yasnippet ac-source-gtags) ac-sources)))
    (setq ac-sources (append '(ac-source-yasnippet ac-source-gtags) ac-sources)))

  (defun kimim/kill-grep-and-ggtags-done()
    (interactive)
  ;;  (org-agenda-quit)
    (ggtags-navigation-mode-done)
    (if (bufferp (get-buffer "*grep*"))
        (progn
          (switch-to-buffer "*grep*")
          (kill-buffer-and-window)))
    (if (bufferp (get-buffer "*Ibuffer*"))
        (progn
          (switch-to-buffer "*Ibuffer*")
          (kill-buffer-and-window))))

#+END_SRC

* org with reftex

#+BEGIN_SRC emacs-lisp
  ;;============================================================================
  ;; org-mode-reftex-search
  ;;============================================================================
  (defun org-mode-reftex-search ()
   ;; jump to the notes for the paper pointed to at from reftex search
   (interactive)
   (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))

  (setq org-link-abbrev-alist
   '(("bib" . "~/reference/ref.bib::%s")
     ("notes" . "~/reference/notes.org::#%s")
     ("papers" . "~/reference/papers/%s.pdf")))

  (defun org-mode-reftex-setup ()
    (load-library "reftex")
    (and (buffer-file-name) (file-exists-p (buffer-file-name))
         (progn
      ;; enable auto-revert-mode to update reftex when bibtex file changes on disk
      (global-auto-revert-mode t)
      (reftex-parse-all)
      ;; add a custom reftex cite format to insert links
      (reftex-set-cite-format
        '((?b . "[[bib:%l][%l-bib]]")
          (?c . "\\cite{%l}")
          (?n . "[[notes:%l][%l-notes]]")
          (?p . "[[papers:%l][%l-paper]]")
          (?t . "%t")
          (?h . "** %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
    (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
    (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))



#+END_SRC
** Other search utils
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun kimim/look-from-mydict()
    (interactive)
    (browse-url (concat "http://www.mydict.com/index.php?controller=Dict_German&action=Search&keyword="
                        (buffer-substring-no-properties (region-beginning) (region-end)))))

  (defun kimim/lookinsight ()
    (interactive)
    (kill-ring-save (region-beginning) (region-end))
    (w32-shell-execute
     "open" "C:\\Program Files\\AutoHotkey\\AutoHotkey.exe" "c:\\kimikit\\Autohotkey\\lookinsight.ahk"))
#+END_SRC

* helper functions

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; generate timestamp such as 2016_1031KJ__ for file name
  (defun kimim/genfile-timestamp()
    (concat (format-time-string "%Y_%m%d")
            (char-to-string (+ 65 (random 26)))
            (char-to-string (+ 65 (random 26)))
            "__"))

  ;; self define functions
  (defun kimim/imenu-default-goto-function-advice (orig-fun &rest args)
    (apply orig-fun args)
    (recenter))

  (defun now () (interactive)
         (insert (shell-command-to-string "date")))

  (defun day ()
    "Insert string for today's date nicely formatted in American style,
    e.g. Sunday, September 17, 2000."
    (interactive)                 ; permit invocation in minibuffer
    (insert (format-time-string "%A, %B %e, %Y")))

  (defun today ()
    "Insert string for today's date nicely formatted in American style,
    e.g. 2000-10-12."
    (interactive)                 ; permit invocation in minibuffer
    (insert (format-time-string "%Y-%m-%d")))

  (defun toyear ()
    "Insert string for today's date nicely formatted in American style,
    e.g. 2000."
    (interactive)                 ; permit invocation in minibuffer
    (insert (format-time-string "%Y")))


  (defun get-file-line ()
    "Show (and set kill-ring) current file and line"
    (interactive)
    (unless (buffer-file-name)
      (error "No file for buffer %s" (buffer-name)))
    (let ((msg (format "%s::%d"
                       (file-truename (buffer-file-name))
                       (line-number-at-pos))))
      (kill-new msg)
      (message msg)))


  (defun open-folder-in-explorer ()
    "Call when editing a file in a buffer.
    Open windows explorer in the current directory and select the current file"
    (interactive)
    (w32-shell-execute
     "open" "explorer"
     (concat "/e,/select," (convert-standard-filename buffer-file-name))
     ))


  (defun mac-open-terminal ()
    (interactive)
    (let ((dir ""))
      (cond
       ((and (local-variable-p 'dired-directory) dired-directory)
        (setq dir dired-directory))
       ((stringp (buffer-file-name))
        (setq dir (file-name-directory (buffer-file-name))))
       ((stringp default-directory)
        (setq dir default-directory))
       )
      (do-applescript
       (format "
     tell application \"Terminal\"
       activate
       try
         do script with command \"cd %s\"
       on error
         beep
       end try
     end tell" dir))
      ))

  (defun kimim/cmd ()
    "Open cmd.exe from emacs just as you type: Win-R, cmd, return."
    (interactive)
    (w32-shell-execute
     "open" "c:\\kimikit\\PyCmd\\PyCmd.exe"))

  (defun kimim/cyg ()
    "Open cygwin mintty from emacs."
    (interactive)
    (cond ((eq window-system 'w32)
           (w32-shell-execute
            "open" "mintty" " -e bash"))
          ((eq window-system 'ns)
           (mac-open-terminal))))

  (defun kimim/4nt ()
    "Open 4NT terminal"
    (interactive)
    (w32-shell-execute
     "open" "4nt"))

  (defun kimim/dc ()
    "Open file location in double commander"
    (interactive)
    (w32-shell-execute
     "open" "doublecmd" (concat "-L " (replace-regexp-in-string "/" "\\\\" (pwd)))))

  (defun kill-dired-buffers()
    "Kill all dired buffers."
    (interactive)
    (save-excursion
      (let((count 0))
        (dolist(buffer (buffer-list))
          (set-buffer buffer)
          (when (equal major-mode 'dired-mode)
            (setq count (1+ count))
            (kill-buffer buffer)))
        (message "Killed %i dired buffer(s)." count ))))

  ;;设置 sentence-end 可以识别中文标点。不用在 fill 时在句号后插入两个空格。
  (setq sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")

  (setq scroll-margin                   0 )
  (setq scroll-conservatively      100000 )
                                          ;(setq scroll-preserve-screen-position 1 )
  (setq scroll-up-aggressively       0.01 )
  (setq scroll-down-aggressively     0.01 )



  (defun encode-buffer-to-utf8 ()
    "Sets the buffer-file-coding-system to UTF8."
    (interactive)
    (set-buffer-file-coding-system 'utf-8 nil))

  (defun save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

  (defun nuke-other-buffers ()
    "Kill all buffers, leaving current-buffer only."
    (interactive)
    (mapcar
     (lambda (x)
       (if (not
            (or (eq x (current-buffer))
                (member
                 (buffer-name x)
                 ;; all ecb related buffers
                 '(" *ECB Sources*" " *ECB History*"
                   " *ECB Methods*" " *Minibuf-1*"
                   " *Minibuf-0*" " *ECB Analyse*"
                   " *ECB Directories*"))))
           (kill-buffer x)))
     (buffer-list))
    (delete-other-windows)
    (message "All other buffers clear"))

  (defun indent-whole-buffer ()
    "Indent whole buffer and delete trailing whitespace.
    This command will also do untabify."
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max))
    (untabify (point-min) (point-max)))

  (defun fold-long-comment-lines ()
    "This functions allows us to fold long comment lines
     automatically in programming modes. Quite handy."
    (interactive "p")
    (auto-fill-mode 1)
    (set (make-local-variable 'fill-no-break-predicate)
         (lambda ()
           (not (eq (get-text-property (point) 'face)
                    'font-lock-comment-face)))))

  (defun new-note ()
    (interactive)
    (find-file (concat default-doc-path "/Notes/"
                       (format-time-string "%Y%m-")
                       (read-string (concat "Filename: " (format-time-string "%Y%m-"))) ".org")))

  (add-hook 'comint-output-filter-functions
            'shell-strip-ctrl-m nil t)
  (add-hook 'comint-output-filter-functions
            'comint-watch-for-password-prompt nil t)

  ;; For subprocesses invoked via the shell
  ;; (e.g., "shell -c command")
  (cond ((eq window-system 'w32)
         (setq explicit-shell-file-name "bash.exe")
         (setq shell-file-name explicit-shell-file-name)))

  (setq color-list '(hi-yellow hi-green hi-blue hi-pink));; hi-red-b hi-green-b hi-blue-b))
  (setq color-index 0)
  (setq color-list-length (length color-list))

  (defun kimim/toggle-highlight-tap ()
    "Highlight pattern at the point"
    (interactive)
    (if (and (listp (get-text-property (point) 'face))
             (memq (car (get-text-property (point) 'face)) color-list))
        (unhighlight-regexp (thing-at-point 'symbol))
      (progn
        (highlight-regexp (thing-at-point 'symbol) (nth color-index color-list))
        (setq color-index (+ color-index 1))
        (if (>= color-index color-list-length)
            (setq color-index 0))
        )))


  (defun my-blink(begin end)
    "blink a region. used for copy and delete"
    (interactive)
    (let* ((rh (make-overlay begin end)))
      (progn
        (overlay-put rh 'face '(:background "DodgerBlue" :foreground "White"))
        (sit-for 0.2 t)
        (delete-overlay rh)
        )))

  (defun get-point (symbol &optional arg)
    "get the point"
    (funcall symbol arg)
    (point)
    )

  (defun copy-thing (begin-of-thing end-of-thing &optional arg)
    "Copy thing between beg & end into kill ring. Remove leading and
    trailing whitespace while we're at it. Also, remove whitespace before
    column, if any. Also, font-lock will be removed, if any. Also, the
    copied region will be highlighted shortly (it 'blinks')."
    (save-excursion
      (let* ((beg (get-point begin-of-thing 1))
             (end (get-point end-of-thing arg)))
        (progn
          (copy-region-as-kill beg end)
          (with-temp-buffer
            (yank)
            (goto-char 1)
            (while (looking-at "[ \t\n\r]")
              (delete-char 1))
            (delete-trailing-whitespace)
            (delete-whitespace-rectangle (point-min) (point-max)) ;; del column \s, hehe
            (font-lock-unfontify-buffer) ;; reset font lock
            (kill-region (point-min) (point-max))
            )
          ))))

  (defun copy-word (&optional arg)
    "Copy word at point into kill-ring"
    (interactive "P")
    (my-blink (get-point 'backward-word 1) (get-point 'forward-word 1))
    (copy-thing 'backward-word 'forward-word arg)
    (message "word at point copied"))

  (defun copy-line (&optional arg)
    "Copy line at point into kill-ring, truncated"
    (interactive "P")
    (my-blink (get-point 'beginning-of-line 1) (get-point 'end-of-line 1))
    (copy-thing 'beginning-of-line 'end-of-line arg)
    (message "line at point copied"))

  (defun copy-paragraph (&optional arg)
    "Copy paragraph at point into kill-ring, truncated"
    (interactive "P")
    (my-blink (get-point 'backward-paragraph 1) (get-point 'forward-paragraph 1))
    (copy-thing 'backward-paragraph 'forward-paragraph arg)
    (message "paragraph at point copied"))

  (defun copy-buffer(&optional arg)
    "Copy the whole buffer into kill-ring, as-is"
    (interactive "P")
    (progn
      (my-blink (point-min) (point-max))
      (copy-region-as-kill (point-min) (point-max))
      (message "buffer copied")))


  (defvar kimim/last-edit-list nil)
  ;; ((file location) (file location))
  ;;   1              2

  (defun kimim/backward-last-edit ()
    (interactive)
    (let ((position (car kimim/last-edit-list)))
      (when position
        ;;(print position)
        ;;(print kimim/last-edit-list)
        (find-file (car position))
        (goto-char (cdr position))
        (setq kimim/last-edit-list (cdr kimim/last-edit-list)))))


  ;; TODO shrink list if more items
  (defun kimim/buffer-edit-hook (beg end len)
    (interactive)
    (let ((bfn (buffer-file-name)))
      ;; insert modification in current index
      ;; remove forward locations
      ;; if longer than 100, remove old locations
      (when bfn
        (progn
          (add-to-list 'kimim/last-edit-list (cons bfn end))))))

  (add-hook 'after-change-functions 'kimim/buffer-edit-hook)
  (global-set-key (kbd "M-`") 'kimim/backward-last-edit)

  ;; copy from http://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs
  ;; http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
  ;; many thanks to Bozhidar Batsov (https://github.com/bbatsov)
  (defun kimim/rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting. Binded to
  key C-c r"
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC
** Grep
#+BEGIN_SRC emacs-lisp :tangle yes
  (defadvice grep-compute-defaults (around grep-compute-defaults-advice-null-device)
    "Use cygwin's /dev/null as the null-device."
    (let ((null-device "/dev/null"))
      ad-do-it))
  (ad-activate 'grep-compute-defaults)
  (setq grep-find-command
        "find . -type f -not -name \"*.svn-base\" -and -not -name \"*#\" -and -not -name \"*.tmp\" -and -not -name \"*.obj\" -and -not -name \"*.386\" -and -not -name \"*.img\" -and -not -name \"*.LNK\" -and -not -name GTAGS -print0 | xargs -0 grep -n -e ")

  (defun kimim/grep-find()
    (interactive)
    (grep-find (concat grep-find-command (buffer-substring-no-properties (region-beginning) (region-end)))))
#+END_SRC
