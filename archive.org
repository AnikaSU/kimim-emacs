** Everything

Everything[fn:14] is a wonderful fast file and folder search engine, it provide
a command line tool to get search result from Everything to command line output:
=es.exe= [fn:15].

Reminded that Everything should be running in background to do the real search
task for =es.exe=.

#+BEGIN_SRC emacs-lisp
  (use-package everything
    :defer t
    :ensure t
    :init
    (setq everything-cmd (concat kimim/path-kimikit "bin/es.exe")))
#+END_SRC

** Simplenote2

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :defer t
    :ensure t
    )

  (use-package simplenote2
    :defer t
    :ensure t
    :bind
    (
     ("C-x p" . simplenote2-list)
     ;; when in Chinese environment, / is a dot, confusing
     ("C-;" . simplenote2-list-filter-notes)
     ("C-." . simplenote2--create-note-locally))
    :config
    (require 'simplenote2)
    (require 'markdown-mode)
    ;;(require 'visual-fill-column)
    (setq simplenote2-notes-mode 'markdown-mode)
    ;;(add-hook 'simplenote2-note-mode-hook 'visual-fill-column-mode)
    (simplenote2-setup)
    )
#+END_SRC

New orgmode link type for simplenote2. The reason for creating a new kind of
link type is that the newly added note is located under folder "new", while the
synchronized notes are in "notes". We should ensure that all the link points to
note in "notes" folder.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org
    :defer t
    :config
    (org-add-link-type "simplenote2" 'org-simplenote2-open)

    (defun org-simplenote2-open (path)
      (find-file (concat simplenote2-directory "notes/" path)))

    (defun simplenotes-linkto-note ()
      "extract orgmode link string to this note"
      (interactive)
      (unless (buffer-file-name)
        (error "No file for buffer %s" (buffer-name)))
      (beginning-of-buffer)
      (let (title msg)
        ;;fetch first line string as title
        (setq title (buffer-substring-no-properties
                     (line-beginning-position) (line-end-position)))
        ;;package orgmode line with buffer name and title
        (setq msg (format "[[simplenote2:%s][%s]]"
                          (file-name-nondirectory (buffer-file-name))
                          title))
        (kill-new msg)
        (message msg))))
#+END_SRC


** BBDB for contact management

#+BEGIN_SRC emacs-lisp
  (use-package bbdb
    :defer t
    :bind
    :config
    (setq bbdb-file (concat kimim/path-sync "kimikit/emacs.d/bbdb"))
    ;; https://www.emacswiki.org/emacs/BbdbMailingLists
    ;;(add-hook 'message-setup-hook 'bbdb-mail-aliases)
    )
#+END_SRC
** GNUS setting

#+begin_src emacs-lisp
  ;; gnus settings
  (use-package gnus
    :ensure nil
    :defer t
    :bind
    (("C-x m m" . kimim/mail-new-empty)
     ("C-x m n" . kimim/mail-new)
     ("C-x m y" . kimim/mail-attach-files)
     :map gnus-summary-mode-map
     ("g" . gnus-summary-insert-new-articles)
     ("f" . gnus-summary-forward-with-original)
     ("R" . gnus-summary-very-wide-reply-with-original)
     ("<delete>" . gnus-summary-delete-article)
     ("<insert>" . mail-archive-kimim))
    :config
    (message "......gnus[0]")
    (use-package ebdb)
    (use-package gnus-dired :ensure nil)
    (setq gnus-visible-headers
          "^Subject:\\|^From:\\|^To:\\|^[BGF]?CC:\\|^Date:")
    (setq gnus-sorted-header-list
          '("^Subject:" "^From:""^To:" "^[BGF]?CC:" "^Date:"))
    (setq compose-mail-user-agent-warnings nil) ;; remove warning
    (setq message-directory "~/Gnus/Mail/")
    (setq gnus-directory "~/Gnus/News/")
    (setq nnfolder-directory "~/Gnus/Mail/Archive")
    ;; unfortunately, following variable not support CN strings
    (setq gnus-permanently-visible-groups "\\(Inbox\\|INBOX\\|已发送邮件\\)")
    (setq mail-self-blind t)
    (setq gnus-alias-override-user-mail-address t)
    (setq mail-signature-file (concat kimim/path-sync "kimikit/emacs.d/signature.txt"))
    (setq gnus-asynchronous t)
    (setq gnus-use-article-prefetch 1000)
    (setq gnus-fetch-old-headers 'some)
    ;; fetch only 50 latest articles to speed up downloading
    (setq gnus-large-newsgroup 50)
    (setq message-forward-as-mime t)
    (setq message-forward-before-signature t) ;; put signature before the fwd msg
    (setq message-forward-included-headers "^Date\\|^From\\|^To\\|^Subject:")
    (setq message-make-forward-subject-function 'message-forward-subject-fwd)
    (setq gnus-user-date-format-alist
          '(((gnus-seconds-today) . "Today %H:%M")
            ((+ 86400 (gnus-seconds-today)) . "Yest. %H:%M")
            (604800 . "%a %H:%M")               ; That's one week
            ((gnus-seconds-month) . "%a %H:%M")
            ((gnus-seconds-year) . "%b %d")
            (t . "%b %d %Y")))
    (setq gnus-summary-line-format
          ":%U%R | %d%13&user-date; %-13,13f (%5k) | %B %s %-120= \n")
    (setq gnus-article-sort-functions '((not gnus-article-sort-by-date)))
    (setq gnus-thread-sort-functions '((not gnus-thread-sort-by-date)))
    (setq gnus-thread-ignore-subject t)
    (setq gnus-agent t)
    (setq gnus-agent-expire-days 90)
    ; prompt for how many articles only for larger than 1000 articles
    (setq gnus-large-newsgroup 100)
    (setq gnus-use-cache t)
    (setq gnus-fetch-old-headers 1) ; show previous messages in a thread
    (setq gnus-thread-indent-level 1)
    (setq gnus-show-threads t)
    (setq gnus-thread-hide-subtree nil)
    (add-hook 'gnus-summary-prepare-hook 'gnus-summary-hide-all-threads)
    ;;(use-package orgalist)
    ;;(add-hook 'message-mode-hook 'orgalist-mode)
    (add-hook 'message-mode-hook 'turn-off-auto-fill)
    (defun gnus-summary-forward-with-original (n &optional wide)
      "Start composing a reply mail to the current message.
  The original article will be yanked."
      (interactive "P")
      (gnus-summary-reply (gnus-summary-work-articles n) wide)
      (mail-to)
      (message-beginning-of-line)
      (kill-line)
      (mail-subject)
      (message-beginning-of-line)
      (delete-char 2)
      (narrow-to-region (line-beginning-position) (line-end-position))
      (goto-char (point-min))
      (while (search-forward "Fw: " nil t)
        (replace-match ""))
      (while (search-forward "转发： " nil t)
        (replace-match ""))
      (widen)
      (message-beginning-of-line)
      (insert "FW")
      (mail-to))

    (define-key gnus-summary-mode-map
      [remap gnus-summary-followup-with-original]
      'gnus-summary-forward-with-original)

    (define-key gnus-summary-mode-map
      [remap gnus-summary-reply]
      'gnus-summary-reply-with-original)

    (define-key gnus-summary-mode-map
      [remap gnus-summary-wide-reply]
      'gnus-summary-very-wide-reply-with-original)

    (add-hook 'gnus-message-setup-hook 'kimim/mail-setup))
#+end_src
