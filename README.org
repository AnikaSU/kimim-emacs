#+TITLE: README
#+LATEX_CLASS: article
#+OPTIONS: toc:nil
#+STARTUP: showall

[[https://travis-ci.org/kimim/kimim-emacs][https://travis-ci.org/kimim/kimim-emacs.svg]]

* Introduction

This Emacs configuration file is written in literate programming method.[fn:1]
The elisp file is extracted from this file, and then compiled to binary =elc=
file for fast loading in the future.

To use of this configuration, you can follow below shell commands to prepare the
emacs configuration files and folders:

- back up =.emacs= file and =.emacs.d= folder, if you have your own emacs
  configuration files
- clone =kimim-emacs= to home folder =~=
- copy =.emacs= from =kimim-emacs= to =~=

#+begin_src shell
  cd ~ && mv .emacs .emacs-backup && mv .emacs.d .emacs.d-backup && \
  git clone https://github.com/kimim/kimim-emacs && \
  cp kimim-emacs/.emacs ~
#+end_src

This emacs setting uses several path to keep different informations, you should
specify in =~/.emacs=:

- =kimim/path-sync= is the root of sync folder
- =kimim/path-sync-emacs= to sync emacs settings
- =kimim/path-org= to sync todo list and journals
- =kimim/path-notes= to sync notes
- =kimim/path-ref= to keep reference documents
- =kimim/path-kimim-emacs= where kimim-emacs you clone to

If these pathes are not set, emacs will report errors:

#+begin_src emacs-lisp
  (mapc (lambda (path)
          (if (not (boundp path))
              (error (concat "please set " (symbol-name path) " in ~/.emacs"))))
        '(kimim/path-sync
          kimim/path-sync-emacs
          kimim/path-org
          kimim/path-notes
          kimim/path-ref
          kimim/path-kimim-emacs))
#+end_src

Then execute =emacs= to bootstrap itself.

* Preparation
** Windows/Cygwin

Cygwin project[fn:2] is required for this configuration in Windows, which is a
large collection of GNU and Open Source tools provide functionality similar to a
Linux distribution on Windows.

In order to make life easier, we have two option to install Cygwin packages in
terminal, 1) Cygwin standalone package management tool =setup-x86.exe= or
=setup-x86_64.exe= accept command-line arguments [fn:3]; 2) =apt-cyg= can
install Cygwin packages in =apt-get= style [fn:4].

** macOS

For Apple macOS, most UNIX tools are installed already. Homebrew [fn:5] is used
to install additional application if it is missing.

Install Homebrew:

#+begin_src shell
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+end_src

** Linux

Most of the external tools I used in this Emacs configuration should be easily
installed or already available in main Linux distributions.

* Emacs Frame

Set look & feel before all other settings.

** Menu Bar and Tool Bar

Show menu bar only in macOS desktop environment, because the system preserves
menu bar for every applications.

#+begin_src emacs-lisp
  (cond
   ((eq window-system 'w32)
    ;; Enable copy and paste in Win32
    (setq select-enable-clipboard t)
    (menu-bar-mode 0)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
   ((eq window-system 'ns)
    (menu-bar-mode 1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
   ((eq window-system 'x)
    (menu-bar-mode 0)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
   ((eq window-system nil)
    (menu-bar-mode 0)))
#+end_src

** Font and Frame Size

Set default font and frame size for both Windows and macOS. You should
=set-default-font= first, otherwise, the frame height and width will be
calculated with original default font height and width: =frame-char-height= and
=frame-char-width=.

Because Incosolata font is really great for programming, and Microsoft Yahei is
nice font to view Chinese characters, you'd better download and install it from:
https://github.com/loseblue/yaheiInconsolata.ttf/raw/master/yaheiInconsolata.ttf

#+begin_src emacs-lisp
  ;; set default font and default frame dimension
  (if window-system
      (progn
        (if (font-utils-exists-p "Inconsolata")
            (cond
             ((eq window-system 'w32)
              (cond
               ((< (display-pixel-width) 1400)
                (set-fontset-font
                 "fontset-default"
                 'unicode-bmp (font-spec :family "YaheiInconsolata"))
                (set-frame-font "Inconsolata-14"))
               ((> (display-pixel-width) 1400)
                (set-fontset-font
                 "fontset-default"
                 'unicode-bmp (font-spec :family "YaheiInconsolata"))
                (set-frame-font "Inconsolata-14"))))
             ((eq window-system 'ns)
              (set-fontset-font
               "fontset-default"
               'unicode-bmp (font-spec :family "YaheiInconsolata"))
              (set-frame-font "Inconsolata-18")))
          (set-frame-font "14"))

        ;; top, left ... must be integer
        (add-to-list 'default-frame-alist
                     (cons 'top  (/ (x-display-pixel-height) 10)))
        (add-to-list 'default-frame-alist
                     (cons 'left (/ (x-display-pixel-width) 10)))
        (add-to-list 'default-frame-alist
                     (cons 'height (/ (* 4 (x-display-pixel-height))
                                      (* 5 (frame-char-height)))))
        (add-to-list 'default-frame-alist
                     (cons 'width (/ (* 4 (x-display-pixel-width))
                                     (* 5 (frame-char-width)))))))
#+end_src

* Environment

** PATH, exec-path and Info

Environment variable =PATH= is the the searching path of executables by the
shell running in Emacs while =exec-path= is the search path of Emacs itself. So
we should set both of them to almost the same paths.

As I have a Windows box in the office, and a Apple macOS at home, so I need to
specify these variables in different way.

#+begin_src emacs-lisp
  (cond
   ((eq system-type 'cygwin)
    (setq kimim/path-root "/")
    (add-to-list 'exec-path "/cygdrive/C/CTEX/MiKTeX/miktex/bin/"))
   ((eq system-type 'darwin)
    (setq kimim/path-root "/")
    (add-to-list 'exec-path "/Library/TeX/texbin")
    (add-to-list 'exec-path "~/Library/Python/2.7/bin"))
   ((eq system-type 'gnu/linux)
    (setq kimim/path-root "/")))

  (add-to-list 'exec-path (concat kimim/path-root "bin"))
  (add-to-list 'exec-path (concat kimim/path-root "usr/bin"))
  (add-to-list 'exec-path (concat kimim/path-root "usr/local/bin"))
#+end_src

Then append exec-path to PATH:

#+begin_src emacs-lisp
  (setenv "PATH"
          (concat
           (mapconcat #'identity exec-path path-separator)
           (getenv "PATH")))
#+end_src

** Custom File

#+begin_src emacs-lisp
  (if (not (boundp 'kimim/file-custom))
      (defvar kimim/file-custom
        (concat kimim/path-sync-emacs "custom.el")))
  (if (not (file-exists-p kimim/file-custom))
      (write-region "" nil kimim/file-custom))
  (setq custom-file kimim/file-custom)
  (load-file custom-file)
#+end_src

** Language

#+begin_src emacs-lisp
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  ;; remove svn log LC_TYPE not defined warning.
  (setenv "LC_CTYPE" "en_US")
  (set-locale-environment "English")
  (set-language-environment 'English)
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (cond
   ((member system-type '(windows-nt cygwin))
    (set-clipboard-coding-system 'utf-16le))
   ((eq system-type 'gnu/linux)
    (set-clipboard-coding-system 'utf-8)))
#+end_src

** global key map

Define new command prefix for keys such as "C-x m f", "C-x m v".

#+begin_src emacs-lisp
  (define-prefix-command 'ctl-x-m-map)
  (global-set-key "\C-xm" 'ctl-x-m-map)
#+end_src

* Package

=package= [fn:6] is the modern =elisp= package management system, which let you
easily download and install packages that implement additional features. Each
package is a separate Emacs Lisp program, sometimes including other components
such as an Info manual.

All the extensions used in this file are installed and managed by =package=.

Here I use =use-package= to defer the package loading and even installation,
When you use the =:commands= keyword, it creates autoloads for those commands
and defers loading of the module until they are used.

#+begin_src emacs-lisp
  (setq package-user-dir "~/.emacs.d/elpa")
  (setq package-archives
        '(("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
          ("sunrise" . "http://elpa.emacs-china.org/sunrise-commander/")))
  (mapc
   (lambda (package)
     (unless (package-installed-p package)
       (progn (message "installing %s" package)
              (package-refresh-contents)
              (package-install package))))
   '(use-package diminish bind-key))

  (require 'use-package)
  (require 'diminish)
  (require 'bind-key)
  ;; install package if missing
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)
  (setq use-package-verbose t)
#+end_src

* Title and Header

#+begin_src emacs-lisp
  (setq frame-title-format
        '("" invocation-name ": "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  (use-package path-headerline-mode
    :commands (path-headerline-mode)
    :config
    ;; only display headerline for real files
    (defun kimim/ph--display-header (orig-fun &rest args)
      (if (buffer-file-name)
          (apply orig-fun args)
        (setq header-line-format nil)))
    (advice-add 'ph--display-header :around #'kimim/ph--display-header))
#+end_src

* Mode Line

Display time and (line, column) numbers in mode line.

#+begin_src emacs-lisp
  (use-package time
    :defer 1
    :init
    (setq display-time-24hr-format t)
    (setq display-time-day-and-date t)
    (setq display-time-interval 10)
    :config
    (display-time-mode t))

  (use-package simple
    :ensure nil
    :defer 3
    :config
    (line-number-mode 1)
    (column-number-mode 1))
#+end_src

* Color Theme

#+begin_src emacs-lisp
  (setq font-lock-maximum-decoration t)
  (setq font-lock-global-modes '(not shell-mode text-mode))
  (setq font-lock-verbose t)
  (global-font-lock-mode 1)
#+end_src

#+begin_src emacs-lisp
  (use-package kimim-light-theme
    :ensure nil
    :defer 0
    :load-path "~/kimim-emacs/site-lisp/")
#+end_src

* Highlight

#+begin_src emacs-lisp
  ;; highlight current line
  (use-package hl-line
    :defer 5
    :config
    (if window-system
        (global-hl-line-mode 1)))

  ;; highlight current symbol
  (use-package auto-highlight-symbol
    :diminish auto-highlight-symbol-mode
    :bind ("C-x m e" . ahs-edit-mode)
    :config
    (global-auto-highlight-symbol-mode t))
#+end_src

* Dealing with Unicode fonts

#+begin_src emacs-lisp
  (use-package unicode-fonts
    :defer 3
    :config
    (defun unicode-fonts-setup-advice ()
      (if window-system
          (set-fontset-font
           "fontset-default"
           'cjk-misc (font-spec :family "YaheiInconsolata"))))
    (advice-add 'unicode-fonts-setup :after 'unicode-fonts-setup-advice)
    (unicode-fonts-setup))
#+end_src

* Other Visual Element

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq visible-bell t)
  (setq ring-bell-function #'ignore)
  (fset 'yes-or-no-p 'y-or-n-p)
  (show-paren-mode 1)
  (setq blink-cursor-blinks 3)
  (blink-cursor-mode 1)
  (tooltip-mode nil)
#+end_src

* Help
** Info

#+begin_src emacs-lisp
  (use-package info
    :commands (info)
    :config
    (add-to-list 'Info-additional-directory-list
                 (concat kimim/path-root "usr/share/info"))
    (add-to-list 'Info-additional-directory-list
                 (concat kimim/path-root "usr/local/share/info"))
    ;; additional info, collected from internet
    (add-to-list 'Info-additional-directory-list
                 "~/info"))
#+end_src

** tldr

TL;DR stands for "Too Long; Didn't Read"[fn:7]. =tldr.el= [fn:8] is the Emacs
client.

#+begin_src emacs-lisp
  (use-package tldr)
#+end_src

* Controlling
** Window and Frame

#+begin_src emacs-lisp
  (use-package winner
    ;; restore windows configuration, built-in package
    :commands winner-mode
    :config
    (winner-mode t))

  (use-package window-numbering
    :commands window-numbering-mode
    :config
    (window-numbering-mode 1))

  (bind-key "C-x m w" 'make-frame)
  ;; donno why, w/o following, new frame still has scroll-bar
  (if (not (eq window-system nil))
      (scroll-bar-mode -1))
#+end_src

scroll slowly with touchpad.

#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(0.01))
#+end_src

** Command

#+begin_src emacs-lisp
  ;; https://github.com/justbur/emacs-which-key
  (use-package which-key
    :defer 3
    :diminish which-key-mode
    :config
    ;; use minibuffer as the popup type, otherwise conflict in ecb mode
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode 1))

  ;; smex will list the recent function on top of the cmd list
  (use-package smex
    :commands (smex)
    :config
    (smex-initialize))

  (use-package counsel
    :defer 1
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-x m f" . counsel-describe-function)
     ("C-x m v" . counsel-describe-variable)
     ("C-x m l" . counsel-load-library)
     ("C-x m i" . counsel-info-lookup-symbol)
     ("C-x m j" . counsel-bookmark)
     ("C-x m r" . counsel-recentf)
     ("C-x m u" . counsel-unicode-char)
     ("C-c j" . counsel-git-grep)
     ("C-c g" . counsel-grep)
     ("C-x b" . counsel-ibuffer)
     ("C-c k" . counsel-ag)
     ("C-c p" . counsel-pt)
     ("C-x l" . counsel-locate)
     :map read-expression-map
     ("C-r" . counsel-minibuffer-history))
    :config
    (use-package ivy)
    (use-package smex)
    (add-hook 'counsel-grep-post-action-hook 'recenter)
    (ivy-mode 1))
#+end_src

** Key Frequency

#+begin_src emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-mode)
    (keyfreq-autosave-mode)
    (setq keyfreq-file "~/.emacs.d/emacs.keyfreq"))
#+end_src

* Editing
** General

#+begin_src emacs-lisp
  (setq inhibit-eol-conversion nil)
  ;; fill-column is a buffer-local variable
  ;; use setq-default to change it globally
  (setq-default fill-column 80)
  (if window-system
      (setq-default fill-column
                    (min 80
                     (ceiling
                      (/ (x-display-pixel-width)
                         (frame-char-width)
                         2.3))))
    (setq-default fill-column 80))
  (toggle-word-wrap -1)
  (use-package drag-stuff
    :diminish drag-stuff-mode
    :config
    (drag-stuff-global-mode 1))
  (delete-selection-mode 1)
  (setq kill-ring-max 200)
  (setq kill-whole-line t)
  (setq require-final-newline t)
  (setq-default tab-width 4)
  (setq tab-stop-list
        (number-sequence 4 120 4))
  (setq track-eol t)
  (setq backup-directory-alist '(("." . "~/temp")))
  (setq version-control t)
  (setq kept-old-versions 10)
  (setq kept-new-versions 20)
  (setq delete-old-versions t)
  (setq backup-by-copying t)

  (setq auto-save-interval 50)
  (setq auto-save-timeout 60)
  (setq auto-save-default nil)
  (setq auto-save-list-file-prefix "~/temp/auto-saves-")
  (setq auto-save-file-name-transforms `((".*"  , "~/temp/")))
  (setq create-lockfiles nil)
  (use-package time-stamp
    :config
    (setq time-stamp-active t)
    (setq time-stamp-warn-inactive t)
    (setq time-stamp-format "%:y-%02m-%02d %3a %02H:%02M:%02S kimi")
    (add-hook 'write-file-hooks 'time-stamp))

  (defun kimim/save-buffer-advice (orig-fun &rest arg)
    (delete-trailing-whitespace)
    (apply orig-fun arg))

  (advice-add 'save-buffer :around #'kimim/save-buffer-advice)

  (setq ispell-program-name "aspell")
  (diminish 'visual-line-mode)
  (add-hook 'text-mode-hook
            (lambda ()
              (when (derived-mode-p 'org-mode 'markdown-mode 'text-mode)
                (visual-line-mode))))
  (setq-default indent-tabs-mode nil)

  (setq uniquify-buffer-name-style 'forward)
  (setq suggest-key-bindings 5)
  (setq auto-mode-alist
        (append '(("\\.css\\'" . css-mode)
                  ("\\.S\\'" . asm-mode)
                  ("\\.md\\'" . markdown-mode)
                  ("\\.markdown\\'" . markdown-mode)
                  ("\\.svg\\'" . html-mode)
                  ("\\.pas\\'" . delphi-mode)
                  ("\\.txt\\'" . org-mode)
                  )
                auto-mode-alist))

  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name "saveplace" "~"))
#+end_src

** visual-fill-mode

#+begin_src emacs-lisp
  (use-package visual-fill-column)
  (setq visual-fill-column-width fill-column)
  (setq visual-fill-column-center-text t)
#+end_src

** undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t))
#+end_src

* File Management
** dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :bind
    (("C-x C-j" . dired-jump)
     :map dired-mode-map
     ("<left>" . dired-up-directory)
     ("<right>" . dired-find-file)
     ("o" . kimim/open-in-external-app)
     )
    :config
    (require 'dired-x)
    (add-hook 'dired-mode-hook
              (lambda ()
                (turn-on-gnus-dired-mode)
                ;; Set dired-x buffer-local variables here.  For example:
                (dired-omit-mode 1)
                (setq dired-omit-localp t)
                (setq dired-omit-files
                      (concat "|NTUSER\\|ntuser\\"
                              "|Cookies\\|AppData\\"
                              "|Contacts\\|Links\\"
                              "|Intel\\|NetHood\\"
                              "|PrintHood\\|Recent\\"
                              "|Start\\|SendTo\\"
                              "|^\\.DS_Store\\"
                              "|qms-bmh"))))
    (setq dired-listing-switches "-Avhlgo --group-directories-first")
    (if (eq system-type 'darwin)
        (setq dired-listing-switches "-Avhlgo"))

    (setq dired-recursive-copies t)
    (setq dired-recursive-deletes t)

    (defadvice dired-next-line (after dired-next-line-advice (arg) activate)
      "Move down lines then position at filename, advice"
      (interactive "p")
      (if (eobp)
          (progn
            (goto-char (point-min))
            (forward-line 2)
            (dired-move-to-filename))))

    (defadvice dired-previous-line (before dired-previous-line-advice (arg) activate)
      "Move up lines then position at filename, advice"
      (interactive "p")
      (if (= 3 (line-number-at-pos))
          (goto-char (point-max)))))

  (use-package ibuffer
    :bind (("C-x C-b" . ibuffer-other-window)
           :map ibuffer-mode-map
           ("<right>" . ibuffer-visit-buffer))
    :config
    (defun ibuffer-visit-buffer-other-window (&optional noselect)
      "Visit the buffer on this line in another window."
      (interactive)
      (let ((buf (ibuffer-current-buffer t)))
        (bury-buffer (current-buffer))
        (if noselect
            (let ((curwin (selected-window)))
              (pop-to-buffer buf)
              (select-window curwin))
          (switch-to-buffer-other-window buf)
          (kill-buffer-and-its-windows "*Ibuffer*")
          )))

    ;; Use human readable Size column instead of original one
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

    ;; Modify the default ibuffer-formats
    (setq ibuffer-formats
          '((mark modified read-only " "
                  (name 32 32 :left :elide)
                  " "
                  (size-h 9 -1 :right)
                  " "
                  (mode 14 14 :left :elide)
                  " "
                  filename-and-process))))
#+end_src

** sunrise commander

The Sunrise Commmander is a powerful and versatile double-pane file manager for
GNU Emacs. It's built atop of Dired and takes advantage of most of its
functions, but also provides many handy features of its own.

#+begin_src emacs-lisp
  (use-package sunrise-commander
    :bind (("<f10>" . sunrise)
           :map sr-mode-map
           ("o" . kimim/open-in-external-app)
           ("<left>" . sr-dired-prev-subdir)
           ("<right>" . sr-advertised-find-file))
    :config
    (setq sr-listing-switches "-Avhlgo --group-directories-first")
    (if (eq system-type 'darwin)
        (setq sr-listing-switches "-Avhlgo")))
#+end_src

* Navigation

#+begin_src emacs-lisp
  ;; bookmark setting
  (setq bookmark-default-file "~/.emacs.d/emacs.bmk")
  (setq bookmark-save-flag 1)

  (use-package bm
    :bind (("C-x m t" . bm-toggle)
           ("C-x m s" . bm-show-all)))

  (use-package ace-jump-mode
    :bind
    ("C-x j" . ace-jump-mode)
    ("M-g j" . ace-jump-mode)
    ("C-`" . ace-jump-mode)
    ("<apps>" . ace-jump-mode))

  (use-package ace-window
    :bind
    ("C-\"" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

* Search and Finding
** swiper replaces isearch

#+begin_src emacs-lisp
  (use-package swiper
    :init (setq swiper-action-recenter t)
    :bind
    ("C-s" . swiper))
#+end_src

** ag: the silver searcher

=ag= [fn:9] is really a very fast grep tool, and =ag.el= [fn:10] provide the
Emacs interface to =ag=:

#+begin_src emacs-lisp
  (use-package ag
    :bind
    ("C-x g" . ag-project)
    :config
    (setq ag-highlight-search t))
#+end_src

** pt: the platium searcher

Because =counsel-ag= is not working in my Win64 machine, so I switch to =pt=
now.

Download =pt= from
https://github.com/monochromegane/the_platinum_searcher/releases, and it works
out of the box.

** imenu & imenu-anywhere

=imenu= is used to navigate the function definitions in current buffer.

#+begin_src emacs-lisp
  (use-package imenu
    :bind ("C-c C-i" . imenu)
    :config
    (advice-add 'imenu-default-goto-function
                :around
                #'kimim/imenu-default-goto-function-advice))

  (use-package imenu-anywhere
    :bind ("C-c i" . imenu-anywhere))
#+end_src

* auto-complete
** abbrev

#+begin_src emacs-lisp
(diminish 'abbrev-mode)
#+end_src

** ivy-mode

#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :bind ("<f6>" . ivy-resume)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-wrap nil)
    (ivy-mode 1))
#+end_src

** auto parenthesis

#+begin_src emacs-lisp
  ;; add pair parenthis and quote automatically
  (use-package autopair
    :diminish autopair-mode
    :config
    (autopair-global-mode 1))
#+end_src

** yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 10
    :config
    (require 'yasnippet)
    (add-to-list
     'yas-snippet-dirs (concat kimim/path-sync-emacs "snippets"))
    (yas-global-mode 1)
    (use-package company)
    (eval-after-load 'company
      '(add-to-list  'company-backends 'company-yasnippet))
    (use-package warnings)
    (setq warning-suppress-types '((yasnippet backquote-change))))
#+end_src

In order to remove following warning:

#+BEGIN_QUOTE
Warning (yasnippet): ‘xxx’ modified buffer in a backquote expression.
  To hide this warning, add (yasnippet backquote-change) to ‘warning-suppress-types’.
#+END_QUOTE

** company dict

#+begin_src emacs-lisp
  (use-package company-dict
    :config
    ;; Where to look for dictionary files
    (setq company-dict-dir (concat kimim/path-sync-emacs "dict"))
    ;; Optional: if you want it available everywhere
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-dict)))
#+end_src

** company mode

English word list fetch from https://github.com/dwyl/english-words

#+begin_src emacs-lisp
  (use-package company-try-hard
    :bind ("C-\\" . company-try-hard))

  (use-package company
    :diminish company-mode
    :config
    (use-package company-try-hard)
    (use-package company-dict)
    (global-company-mode t)
    ;; macOS will use system dict file directly
    (cond ((eq system-type 'windows-nt)
           (setq ispell-alternate-dictionary "~/.emacs.d/dict/words3.txt")))
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-ispell)))
#+end_src

** company statistics

Sort candidates using completion history.

#+begin_src emacs-lisp
  (use-package company-statistics
    :config
    (company-statistics-mode 1))
#+end_src

* Programming General

** Compiling

#+begin_src emacs-lisp
  (setq next-error-recenter 20)
  (bind-key "C-<f11>" 'compile)
#+end_src

** Tagging

#+begin_src emacs-lisp
  (use-package ggtags
    :bind (("C-c f" . ggtags-find-file)
           ("M-." . ggtags-find-tag-dwim))
    :config
    (setq ggtags-global-ignore-case t)
    (setq ggtags-sort-by-nearness t))
#+end_src

** Version Control

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x m g" . magit-status))
#+end_src

Following error will reported when using magit to commit changes:

#+BEGIN_QUOTE
server-ensure-safe-dir: The directory ‘~/.emacs.d/server’ is unsafe
#+END_QUOTE

The solution is to change the owner of =~/.emacs.d/server= [fn:11]

#+BEGIN_QUOTE
Click R-mouse on ~/.emacs.d/server and select “Properties” (last item in
menu). From Properties select the Tab “Security” and then select the button
“Advanced”. Then select the Tab “Owner” and change the owner from
=“Administrators (\Administrators)”= into =“ (\”=. Now the server code will accept
this directory as secure because you are the owner.
#+END_QUOTE

* Programming Language

** C

#+begin_src emacs-lisp
  (use-package cc-mode
    :ensure nil
    :config
    (add-to-list 'auto-mode-alist '("\\.c\\'" . c-mode))
    (use-package ggtags)
    (add-hook 'c-mode-hook 'ggtags-mode)
    (add-hook 'c++-mode-hook 'ggtags-mode)

    (add-hook 'c-mode-common-hook
              (lambda ()
                ;;(c-set-style "gnu")
                (c-toggle-auto-newline 0)
                (c-toggle-auto-hungry-state 0)
                (c-toggle-syntactic-indentation 1)
                ;;(highlight-indentation-mode 1)
                (which-function-mode 1)
                (local-set-key "\C-co" 'ff-find-other-file)
                (setq c-basic-offset 4))))
#+end_src

** C#

#+begin_src emacs-lisp
  (use-package csharp-mode
    :mode ("\\.cs\\'" . csharp-mode))
#+end_src


** Clojure

Clojure is a lisp over JVM. Emm, I like it.

#+begin_src emacs-lisp
  (use-package paredit)
  (use-package clojure-mode
    :mode ("\\.clj\\'" . clojure-mode)
    :config
    (use-package clojure-mode-extra-font-locking)
    (add-to-list 'auto-mode-alist '("\\.\\(clj\\|dtm\\|edn\\)\\'" . clojure-mode))
    (add-to-list 'auto-mode-alist '("\\.cljc\\'" . clojurec-mode))
    (add-to-list 'auto-mode-alist '("\\.cljs\\'" . clojurescript-mode))
    (add-to-list 'auto-mode-alist '("\\(?:build\\|profile\\)\\.boot\\'" . clojure-mode))
    (use-package paredit)
    (add-hook 'clojure-mode-hook (lambda ()
                                   (enable-paredit-mode))))
#+end_src

#+begin_src emacs-lisp
  (use-package ob-clojure
    :ensure org
    :config
    (use-package clojure-mode)
    (require 'ob-clojure)
    (use-package cider)
    (setq org-babel-clojure-backend 'cider))
#+end_src

** Python

Python development configuration is quite easy. =elpy= [fn:12] is used here:

#+begin_src emacs-lisp
  (use-package elpy
    :config
    (elpy-enable))

  (use-package python
    :ensure nil
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :config
    (add-hook 'python-mode-hook
              (lambda ()
                (setq yas-indent-line nil)))
    (add-to-list 'python-shell-completion-native-disabled-interpreters "python"))

  (use-package company-jedi
    :config
    (setq elpy-rpc-backend "jedi")
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-jedi)))
#+end_src

Following =python= package is required according to =elpy= mannual:

#+begin_src shell
pip install rope
pip install jedi
# flake8 for code checks
pip install flake8
# importmagic for automatic imports
pip install importmagic
# and autopep8 for automatic PEP8 formatting
pip install autopep8
# and yapf for code formatting
pip install yapf
# install virtualenv for jedi
pip install virtualenv
#+end_src

** Swift

#+begin_src emacs-lisp
  (use-package swift-mode
    :mode ("\\.swift\\'" . swift-mode))
#+end_src

** Go lang
Open =.go= file with go-mode.
#+begin_src emacs-lisp
  (use-package go-mode
    :mode ("\\.go\\'" . go-mode))
#+end_src

** Docker file

Some dockerfile is not end with =.dockerfile=, so lets guess:

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :mode ("\\dockerfile\\'" . dockerfile-mode))
#+end_src

** Emacs lisp

#+begin_src emacs-lisp
  (define-derived-mode lisp-interaction-mode emacs-lisp-mode "λ")
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-elisp))
#+end_src

** AutoHotKey

=ahk-mode= developed by Rich Alesi[fn:13]

#+begin_src emacs-lisp
  (use-package ahk-mode
    :mode ("\\.ahk\\'" . ahk-mode))
#+end_src

* Calendar

#+begin_src emacs-lisp
  (if (not (boundp 'kimim/file-diary))
      (defvar kimim/file-diary (concat kimim/path-sync-emacs "diary")))
  (if (not (file-exists-p kimim/file-diary))
      (write-region "" nil kimim/file-diary))
  (setq diary-file kimim/file-diary)
  (setq calendar-latitude +30.16)
  (setq calendar-longitude +120.12)
  (setq calendar-location-name "Hangzhou")
  (setq calendar-remove-frame-by-deleting t)
  (setq calendar-week-start-day 1)
  (setq holiday-christian-holidays nil)
  (setq holiday-hebrew-holidays nil)
  (setq holiday-islamic-holidays nil)
  (setq holiday-solar-holidays nil)
  (setq holiday-bahai-holidays nil)
  (setq holiday-general-holidays
        '((holiday-fixed 1 1 "元旦")
          (holiday-float 5 0 2 "父親節")
          (holiday-float 6 0 3 "母親節")))
  (setq calendar-mark-diary-entries-flag t)
  (setq calendar-mark-holidays-flag nil)
  (setq calendar-view-holidays-initially-flag nil)
  (setq chinese-calendar-celestial-stem
        ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
  (setq chinese-calendar-terrestrial-branch
        ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
#+end_src

* Orgmode

** orgalist

#+begin_src emacs-lisp
  (use-package orgalist
    :commands (orgalist-mode))
#+end_src

** org general setting

#+begin_src emacs-lisp
  ;; path and system environment setting for orgmode
  (use-package org
    :bind
    ("C-c a" . org-agenda)
    ("C-c b" . org-iswitchb)
    ("C-c c" . org-capture)
    ("C-c l" . org-store-link)
    ("C-c  ！" . org-time-stamp-inactive)
    ("C-c  。" . org-time-stamp)
    :config
    (setq org-support-shift-select t)
    ;; no empty line after collapsed
    (setq org-cycle-separator-lines 0)
    (setq org-src-fontify-natively t)
    (setq org-startup-indented t)
    (setq org-image-actual-width 600))
#+end_src

** org for writing

#+begin_src emacs-lisp
  (use-package org-download
    :config
    (setq org-download-timestamp "")
    (setq-default org-download-image-dir "./images")
    (setq org-download-method 'directory)
    (setq org-download-heading nil)
    (setq org-startup-with-inline-images nil)
    ;;(setq org-download-annotate-function #'(lambda (link)()))
    (setq org-download-display-inline-images nil)
    (setq image-file-name-extensions
          (quote
           ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm"
            "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "pdf" "bmp")))
    (defun org-download--dir-2 () "."))
#+end_src

#+begin_src emacs-lisp
  (use-package org
    :config
    ;;(use-package org-download)
    (use-package pangu-spacing)
    (setq org-hide-leading-stars t)
    (setq org-footnote-auto-adjust t)
    (setq org-footnote-define-inline nil)
    (define-key org-mode-map (kbd "C-c C-x h") (lambda ()
                                                 (interactive)
                                                 (insert "^{()}")
                                                 (backward-char 2)))
    (define-key org-mode-map (kbd "C-c C-x l") (lambda ()
                                                 (interactive)
                                                 (insert "_{}")
                                                 (backward-char 1))))
#+end_src

** org with source code

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-src-window-setup 'current-window)
    (setq org-src-fontify-natively t)
    (setq org-confirm-babel-evaluate nil)
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images))
#+end_src

** org exporting

When exporting, do not export with author and date.

#+begin_src emacs-lisp
  (use-package org
    :bind ("C-c C-'" . org-insert-structure-template)
    :config
    (setq org-export-allow-BIND t)
    (setq org-export-creator-string "")
    (setq org-export-html-validation-link nil)
    (setq org-export-with-sub-superscripts '{})
    (setq org-export-with-author nil)
    (setq org-export-with-date nil))
#+end_src

*** org to pdf

LaTeX is required to convert =org-mode= to PDF.

For MacOS:

#+begin_src shell
brew cask install mactex-no-gui
#+end_src

For Windows, download and install CTEX from http://www.ctex.org

For Linux: use pacakge mangagement to install texlive.

To export =org-mode= to PDF, with code style highlight, you need to install
=python= and =pygments=. Because =pygmentize= from =pygments= is used to
generate =latex= markups for font highlighting.

For Windows environment, please note that =python= and =pygments= installed in
=msys64= is not working for xetex. You should download Python install file for
Windows from https://www.python.org/downloads/.

Get =pygments= with =pip:

#+begin_src shell
pip install pygments
#+end_src

#+begin_src emacs-lisp
  (use-package ox-latex
    :ensure org
    :bind ("<C-f7>" . org-latex-export-to-pdf)
    :commands (org-latex-publish-to-pdf)
    :config
    (require 'ox-latex)
    (setq org-latex-listings 'minted)
    (setq org-latex-pdf-process
          `(,(let ((ref (concat kimim/path-sync "papers/references.bib")))
               (if (file-exists-p ref)
                   (concat "cp -f \"" ref "\" .")
                 ""))
            "xelatex -shell-escape %f"
            "bibtex %b"
            "xelatex -shell-escape %f"
            "xelatex -shell-escape %f"
            "rm references.bib"))

    ;;; Nicolas Goaziou, http://article.gmane.org/gmane.emacs.orgmode/67692
    (defun org-latex-ignore-heading-filter-headline (headline backend info)
      "Strip headline from HEADLINE. Ignore BACKEND and INFO."
      (when (and (org-export-derived-backend-p backend 'latex)
                 (string-match "\\`.*ignoreheading.*\n" headline))
        (replace-match "" nil nil headline)))
    (add-to-list 'org-export-filter-headline-functions
                 'org-latex-ignore-heading-filter-headline)

    ;; most of the time, I do not need table of contents
    (setq org-latex-toc-command nil)
    ;; https://www.tuicool.com/articles/ZnAnym
    ;; remove error: ! LaTeX Error: Command \nobreakspace unavailable in encoding T1.
    ;; add: \DeclareRobustCommand\nobreakspace{\leavevmode\nobreak\ }
    (setq org-latex-classes
          '(("cn-article"
             "\\documentclass[a4paper,UTF8]{ctexart}
  \\usepackage{geometry}
  \\usepackage{titlesec}
  \\usepackage{enumitem}
  \\usepackage{abstract}
  \\renewcommand{\\abstractname}{摘要}
  \\renewcommand\\refname{参考文献}
  \\usepackage{fancyhdr, lastpage}
  \\fancypagestyle{plain}{
      \\fancyhf{}
      \\fancyfoot[C]{{\\thepage}/\\pageref*{LastPage}}
      \\renewcommand{\\headrulewidth}{0pt}
  }
  \\usepackage{hyperref}
  \\hypersetup{hidelinks}
  \\hypersetup{colorlinks = true, urlcolor = blue, linkcolor = blue, citecolor = blue}
  \\pagestyle{plain}
  \\setlist[1]{labelindent=\\parindent,nosep,leftmargin= *}
  \\geometry{a4paper,scale=0.8}
  \\geometry{a4paper,left=2.5cm,right=2.5cm,top=3cm,bottom=3cm}
  \\setlength{\\baselineskip}{20pt}
  \\setlength{\\parskip}{5pt}
  \\DeclareRobustCommand\\nobreakspace{\\leavevmode\\nobreak\\ }"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

            ("cn-book"
             "\\documentclass[a4paper,UTF8]{ctexbook}
  \\usepackage{enumitem}
  \\usepackage{abstract}
  \\renewcommand{\\abstractname}{摘要}
  \\renewcommand\\refname{参考文献}
  \\usepackage{fancyhdr, lastpage}
  \\fancypagestyle{plain}{
      \\fancyhf{}
      \\fancyfoot[C]{{\\thepage}/\\pageref*{LastPage}}
      \\renewcommand{\\headrulewidth}{0pt}
  }
  \\usepackage{hyperref}
  \\hypersetup{hidelinks}
  \\hypersetup{colorlinks = true, urlcolor = blue, linkcolor = blue, citecolor = blue}
  \\pagestyle{plain}
  \\setlist[1]{labelindent=\\parindent,nosep,leftmargin= *}
  \\setlength{\\baselineskip}{20pt}
  \\setlength{\\parskip}{5pt}
  \\DeclareRobustCommand\\nobreakspace{\\leavevmode\\nobreak\\ }"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

            ("article"
             "\\documentclass{article}
  \\usepackage[UTF8]{ctex}
  \\usepackage{geometry}
  \\usepackage{titlesec}
  \\usepackage{enumitem}
  \\usepackage{fancyhdr, lastpage}
  \\usepackage{hyperref}
  \\hypersetup{hidelinks}
  \\hypersetup{colorlinks = true, urlcolor = blue, linkcolor = blue, citecolor = blue}
  \\fancypagestyle{plain}{
      \\fancyhf{}
      \\fancyfoot[C]{{\\thepage}/\\pageref*{LastPage}}
      \\renewcommand{\\headrulewidth}{0pt}
  }
  \\pagestyle{plain}
  \\setlist[1]{labelindent=\\parindent,nosep,leftmargin= *}
  \\geometry{a4paper,scale=0.8}
  \\geometry{a4paper,left=2.5cm,right=2.5cm,top=3cm,bottom=3cm}
  \\setlength{\\baselineskip}{20pt}
  \\setlength{\\parskip}{5pt}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

            ("article2c"
             "\\documentclass[twocolumn]{article}
  \\usepackage[UTF8]{ctex}
  \\usepackage{geometry}
  \\usepackage{titlesec}
  \\usepackage{enumitem}
  \\usepackage{fancyhdr, lastpage}
  \\fancypagestyle{plain}{
      \\fancyhf{}
      \\fancyfoot[C]{{\\thepage}/\\pageref*{LastPage}}
      \\renewcommand{\\headrulewidth}{0pt}
  }
  \\usepackage{hyperref}
  \\hypersetup{hidelinks}
  \\hypersetup{colorlinks = true, urlcolor = blue, linkcolor = blue, citecolor = blue}
  \\pagestyle{plain}
  \\setlist[1]{labelindent=\\parindent,nosep,leftmargin= *}
  \\geometry{a4paper,scale=0.8}
  \\geometry{a4paper,left=2.5cm,right=2.5cm,top=2cm,bottom=2cm}
  \\setlength{\\baselineskip}{20pt}
  \\setlength{\\parskip}{5pt}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

    (setq org-latex-default-class "article")
    ;; remove fontenc, and AUTO in front of inputenc,
    ;; then francais can be processed
    (setq org-latex-default-packages-alist
          (quote
           (("" "inputenc" t ("pdflatex"))
            ;; add cache=false acc. https://github.com/gpoore/minted/issues/92
            ("cache=false" "minted" t nil)
            ("" "graphicx" t nil)
            ("" "grffile" t nil)
            ("" "longtable" nil nil)
            ("" "wrapfig" nil nil)
            ("" "rotating" nil nil)
            ("normalem" "ulem" t nil)
            ("" "amsmath" t nil)
            ("" "textcomp" t nil)
            ("" "capt-of" nil nil)))))
#+end_src

*** org to html page

#+begin_src emacs-lisp
  (use-package ox-html
    :ensure org
    :commands (org-html-publish-to-html)
    :config
    (setq org-html-validation-link nil)
    (defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
                                          (paragraph contents info) activate)
      "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
      (let ((fixed-contents)
            (orig-contents (ad-get-arg 1))
            (reg-han "[[:multibyte:]]"))
        (setq fixed-contents (replace-regexp-in-string
                              (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")
                              "\\1\\2" orig-contents))
        (ad-set-arg 1 fixed-contents)
        ))

    (defun org-babel-result-to-file (result &optional description)
      "Convert RESULT into an `org-mode' link with optional DESCRIPTION.
  If the `default-directory' is different from the containing
  file's directory then expand relative links."
      (when (stringp result)
        (if (string= "svg" (file-name-extension result))
            (progn
              (with-temp-buffer
                (if (file-exists-p (concat result ".html"))
                    (delete-file (concat result ".html")))
                (rename-file result (concat result ".html"))
                (insert-file-contents (concat result ".html"))
                (message (concat result ".html"))
                (format "#+BEGIN_HTML
  <div style=\"text-align: center;\">
  %s
  </div>
  ,#+END_HTML"
                        (buffer-string)
                        )))
          (progn
            (format "[[file:%s]%s]"
                    (if (and default-directory
                             buffer-file-name
                             (not (string= (expand-file-name default-directory)
                                           (expand-file-name
                                            (file-name-directory buffer-file-name)))))
                        (expand-file-name result default-directory)
                      result)
                    (if description (concat "[" description "]") "")))))))
#+end_src

** org to html slide

#+begin_src emacs-lisp
  (use-package org-re-reveal
    :bind ("C-x r v" . org-re-reveal-export-to-html-and-browse)
    :config
    (use-package htmlize :ensure t)
    (setq org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.9.2/")
    (setq org-re-reveal-theme "none")
    (setq org-re-reveal-width 1000)
    (setq org-re-reveal-height 750)
    (setq org-re-reveal-transition "none")
    (setq org-re-reveal-hlevel 2)
    (setq org-re-reveal-extra-css "./kimim.css"))
#+end_src

** org with diagram

#+begin_src emacs-lisp
  ;; plant uml setting
  (use-package ob-plantuml
    :ensure org
    :config
    (require 'ob-plantuml)
    (setenv "GRAPHVIZ_DOT" (concat kimim/path-root "bin/dot"))
    (setq org-plantuml-jar-path (concat kimim/path-kimikit "plantuml/plantuml.jar")))
#+end_src

** org as GTD system

#+begin_src emacs-lisp
  (use-package org
    :commands (org-toggle-office org-toggle-home org-toggle-home-or-office)
    :bind (:map org-mode-map
           :map org-agenda-mode-map
           ("<C-left>"  . org-agenda-do-date-earlier)
           ("<C-right>" . org-agenda-do-date-later)
           ("<S-left>" . (lambda ()
                            (interactive)
                            (org-agenda-todo 'left)))
           ("<S-right>" . (lambda ()
                            (interactive)
                            (org-agenda-todo 'right))))
    :config
    (require 'org-agenda)
    (add-hook 'kill-emacs-hook
              (lambda ()
                (org-clock-out nil t nil)
                (org-save-all-org-buffers)))
    (setq org-todo-keywords
          '(
            ;; for tasks
            (sequence "TODO(t!)" "SCHED(s)" "|" "DONE(d@/!)")
            ;; for risks, actions, problems
            (sequence "OPEN(o!)" "WAIT(w@/!)" "|" "CLOSE(c@/!)")
            (sequence "|" "SOMEDAY(m)")
            (sequence "|" "ABORT(a@/!)")
            (sequence "REPEAT(r)" "|")))

    (setq org-tag-alist
          '(("@office" . ?o) ("@home" . ?h)
            ("team" . ?t) ("leader" . ?l) ("boss" . ?b)
            ("risk" . ?k) ("sync" . ?s) ("followup" . ?f)
            ("reading" . ?r) ("writing" . ?w)
            ("project" . ?p) ("category" . ?c)
            ("habit" . ?H)
            ("next" . ?n)))

    (setq org-tags-exclude-from-inheritance '("project" "category"))

    (diminish 'auto-fill-function)

    (add-hook 'org-mode-hook
              (lambda ()
                ;;(auto-fill-mode)
                ;;(drag-stuff-mode -1)
                ))

    (setq org-stuck-projects
          '("+LEVEL>=2-category-habit-info"
            ("TODO" "SCHED"  "DONE"
             "OPEN" "WAIT" "CLOSE"
             "ABORT" "SOMEDAY" "REPEAT")
            nil nil))

    (setq org-refile-targets
          '(;; refile to maxlevel 2 of current file
            (nil . (:maxlevel . 1))
            ;; refile to maxlevel 1 of org-refile-files
            (org-refile-files :maxlevel . 1)
            ;; refile to item with 'project' tag in org-refile-files
            (org-refile-files :tag . "project")
            (org-refile-files :tag . "category")))

    (defadvice org-schedule (after add-todo activate)
      (if (or (string= "OPEN" (org-get-todo-state))
              (string= "WAIT" (org-get-todo-state))
              (string= "CLOSE" (org-get-todo-state)))
          (org-todo "WAIT")
        (org-todo "SCHED")))

    (defadvice org-deadline (after add-todo activate)
      (if (or (string= "OPEN" (org-get-todo-state))
              (string= "WAIT" (org-get-todo-state))
              (string= "CLOSE" (org-get-todo-state)))
          (org-todo "WAIT")
        (org-todo "SCHED")))

    (setq org-log-done t)
    (setq org-todo-repeat-to-state "REPEAT")

    ;; settings for org-agenda-view
    (setq org-agenda-span 2)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-deadline-warning-days 2)
    (add-hook 'org-agenda-after-show-hook 'org-narrow-to-subtree)
    (setq org-agenda-custom-commands
          '(("t" todo "TODO|OPEN"
             ((org-agenda-sorting-strategy '(priority-down))))
            ("w" todo "SCHED|WAIT"
             ((org-agenda-sorting-strategy '(priority-down))))
            ;; all task should be done or doing
            ("d" todo "TODO|SCHED|OPEN|WAIT"
             ((org-agenda-sorting-strategy '(priority-down))))
            ("b" tags "boss/-ABORT-CLOSE-DONE"
             ((org-agenda-sorting-strategy  '(priority-down))))
            ("f" todo "SOMEDAY"
             ((org-agenda-sorting-strategy '(priority-down))))
            ("h" tags "habit/-ABORT-CLOSE"
             ((org-agenda-sorting-strategy '(todo-state-down))))
            ("c" tags "clock"
             ((org-agenda-sorting-strategy '(priority-down))))))

    (setq org-directory kimim/path-org)

    (setq org-capture-templates
          '(("c" "Capture" entry (file+headline "capture.org" "Inbox")
             "* %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("t" "TODO Task"    entry (file+headline "capture.org" "Inbox")
             "* TODO %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("s" "SCHED Task"    entry (file+headline "capture.org" "Inbox")
             "* SCHED %?\nSCHEDULED: %t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("o" "OPEN Issue"  entry (file+headline "capture.org" "Inbox")
             "* OPEN %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("w" "WAIT Task"    entry (file+headline "capture.org" "Inbox")
             "* WAIT %?\nSCHEDULED: %t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("h" "Habit"   entry (file+headline "global.org"   "Habit")
             "* %?  :habit:\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")))

    (use-package ivy) ; use ivy to complete refile files
    (setq org-agenda-files
           (file-expand-wildcards (concat kimim/path-org "*.org")))
    (setq org-refile-files
           (file-expand-wildcards (concat kimim/path-org "*.org"))))
#+end_src

** org link: match

New link to use everything to locate a file with unique ID:

#+begin_src emacs-lisp
  (use-package org
    :config
    (org-link-set-parameters "match"
                             :follow #'org-match-open)

    (defun org-match-open (path)
      "Visit the match search on PATH.
       PATH should be a topic that can be thrown at everything/?."
      (w32-shell-execute
       "open" "Everything" (concat "-search " path))))
#+end_src

** org link: onenote

New link to use everything to locate a file with unique ID:

#+begin_src emacs-lisp
  (use-package org
    :config
    (org-link-set-parameters "onenote"
                             :follow #'org-onenote-open)

    (defun org-onenote-open (path)
      "Visit the match search on PATH.
       PATH should be a topic that can be thrown at everything/?."
      (cond
       ((eq system-type 'windows-nt)
        (progn
          (w32-shell-execute
           "open" (concat "onenote:" path))))
        ((eq window-system 'ns)
         (shell-command
          (replace-regexp-in-string
           "&" "\\\\&" (format "open onenote:%s" path)))))))
#+end_src


** org link: deft

=C-x l= keychord can store deft links in deft mode, but cannot fetch the link
from deft note. Below defines a function to fetch a deft style link, which can
be used to paste directly in other org files, such as work journal. Buffer file
name handling function can be found from emacs manual[fn:14].

#+begin_src emacs-lisp
  (use-package org
    :defer 5
    :bind
    (("C-x m d" . kimim/deft-store-link))
    :config
    (defun kimim/deft-store-link()
      "get deft link of current note file."
      (interactive)
      (unless (buffer-file-name)
        (error "No file for buffer %s" (buffer-name)))
      (let ((msg (format "[[deft:%s]]"
                         (file-name-nondirectory (buffer-name)))))
        (kill-new msg)
        (message msg))))
#+end_src


** org publish to jekyll

#+begin_src emacs-lisp
  (use-package org
    :commands (jekyll)
    :config
    ;; file in jekyll base will also be uploaded to github
    (defvar path-jekyll-base "~/kimi.im/_notes/_posts")
    ;; in order to sync draft with cloud sync driver
    (defvar path-jekyll-draft (concat kimim/path-sync "kimim/_draft/"))
    ;; file in jekyll base will also be uploaded to github

    (setq org-publish-project-alist
          '(
            ("org-blog-content"
             ;; Path to your org files.
             :base-directory "~/kimi.im/_notes"
             :base-extension "org"
             ;; Path to your jekyll project.
             :publishing-directory "~/kimi.im/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :headline-levels 4
             :section-numbers t
             :html-extension "html"
             :body-only t ;; Only export section between <body></body>
             :with-toc nil
             )
            ("org-blog-static"
             :base-directory "~/kimi.im/_notes/"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php\\|svg"
             :publishing-directory "~/kimi.im/"
             :recursive t
             :publishing-function org-publish-attachment)
            ("blog" :components ("org-blog-content" "org-blog-static"))))

    (use-package ivy)

    (defun jekyll-post ()
      "Post current buffer to kimi.im"
      (interactive)
      ;; get categories
      ;; get buffer file name
      (let ((category (jekyll-get-category))
            (filename (file-name-nondirectory buffer-file-name))
            newfilename)
        ;; append date to the beginning of the file name
        (setq newfilename (concat
                           path-jekyll-base "/"
                           category "/"
                           (format-time-string "%Y-%m-%d-") filename))
        ;; mv the file to the categories folder
        (rename-file buffer-file-name newfilename)
        (switch-to-buffer (find-file-noselect newfilename))
        ;; execute org-publish-current-file
        (org-publish-current-file)
        ;; go to kimi.im folder and execute cyg command
        (with-temp-buffer
          (dired "~/kimi.im/")
          (kimim/xterm)
          (kill-buffer))
        ))

    (defun jekyll-tag ()
      "add new tags"
      (interactive)
      ;; find "tags: [" and replace with "tags: [new-tag, "
      (let (tag)
        (goto-char (point-min))
        ;;  (search-forward "tags: [")
        (re-search-forward "tags: \\[" nil t)
        (setq tag (ivy-read "tags: " '(
                                       "Deutsch" "Français" "English"
                                       "emacs" "org-mode"
                                       "Windows" "macOS" "Linux"
                                       "industry" "edge-computing"
                                       "travel" "photography"
                                       "leadership"
                                       "x"
                                       )))
        (if (string= "x" tag)
            (insert "")
          (insert tag ", "))
        tag))

    (defun jekyll-header()
      "Insert jekyll post headers,
  catergories and tags are generated from exisiting posts"
      (interactive)
      (let (tag)
        (insert "#+BEGIN_EXPORT html\n---\nlayout: post\ntitle: ")
        (insert (read-string "Title: "))
        (insert "\ncategories: [")
        (insert (ivy-read "categories: " '(
                                           "technology"
                                           "productivity" "leadership"
                                           "psychology" "language"
                                           "education" "photography"
                                           )))
        (insert "]")
        (insert "\ntags: [")
        (while (progn
                 (setq tag (jekyll-tag))
                 (not (string= "x" tag))))
        (move-end-of-line 1)
        (backward-delete-char 2)
        (insert "]\n---\n#+END_EXPORT\n\n")))

    (defun jekyll ()
      (interactive)
      (find-file (concat path-jekyll-draft "/" (read-string "Filename: ") ".org"))
      (jekyll-header)
      (save-buffer))

    (defun jekyll-get-category ()
      (interactive)
      (goto-char (point-min))
      (re-search-forward "^categories: \\[\\([a-z-]*\\)\\]$" nil t)
      (match-string 1))

    (defun jekyll-test ()
      (interactive)
      (org-open-file (org-html-export-to-html nil))))
#+end_src

* Note Taking Tools
** Deft

#+begin_src emacs-lisp
  (use-package deft
    :bind
    (("C-x d" . deft-find-file)
     ("C-x C-d" . deft))
    :config
    (use-package ivy)
    (setq deft-extensions '("txt" "org" "md"))
    (setq deft-directory kimim/path-notes)
    (setq deft-recursive t)
    ;; disable auto save
    (setq deft-auto-save-interval 0)
    (setq deft-file-naming-rules '((noslash . "_")))
    (setq deft-text-mode 'org-mode)
    (setq deft-use-filter-string-for-filename t)
    (setq deft-org-mode-title-prefix t)
    (setq deft-use-filename-as-title nil)
    (setq deft-strip-summary-regexp
          (concat "\\("
                  "[\n\t]" ;; blank
                  "\\|^#\\+[[:upper:]_]+:.*$" ;; org-mode metadata
                  "\\|^#\\+[[:alnum:]_]+:.*$" ;; org-mode metadata
                  "\\)"))

    ;;advise deft-open-file to replace spaces in file names with _
    (require 'kimim)
    (defun kimim/deft-open-file-advice (orig-fun &rest args)
      (let (name title)
        (setq name (pop args))
        (if (file-exists-p name)
            (progn
              (push name args)
              (apply orig-fun args))
          (progn
            (setq title (file-name-sans-extension
                         (file-name-nondirectory name)))
            (setq name (concat
                        (file-name-directory name)
                        (kimim/genfile-timestamp)
                        (downcase
                         (replace-regexp-in-string
                          " " "_" (file-name-nondirectory name)))
                        (if (not (file-name-extension name))
                            ".txt")))
            (push name args)
            (apply orig-fun args)
            (insert (concat "#+TITLE: " title "\n\n"))))))

    (advice-add 'deft-open-file
                :around #'kimim/deft-open-file-advice)

    (defun kimim/deft-new-file-named-advice (orig-fun &rest args)
      (let (name title)
        (setq name (pop args))
        (setq title name)
        (setq name (concat
                    (kimim/genfile-timestamp)
                    (downcase
                     (replace-regexp-in-string
                      " " "_" name))))
        (push name args)
        (apply orig-fun args)
        (insert (concat "#+TITLE: " title "\n\n"))))

    (advice-add 'deft-new-file-named
                :around #'kimim/deft-new-file-named-advice))
#+end_src

* Markdown mode

Markdown is widely used as plain text file format.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :bind(:map markdown-mode-map
               ("M-<up>" . markdown-move-subtree-up)
               ("M-<down>" . markdown-move-subtree-down)))
#+end_src

* Reference management

#+begin_src emacs-lisp
  (use-package org-ref
    :after org
    :demand t
    :config
    (setq reftex-default-bibliography ())
    (add-to-list 'reftex-default-bibliography (concat kimim/path-sync "papers/references.bib"))
    (setq org-ref-bibliography-notes (concat kimim/path-sync "papers/notes.org")
          org-ref-pdf-directory (concat kimim/path-sync "papers/"))
    (setq org-ref-default-bibliography ())
    (add-to-list 'org-ref-default-bibliography (concat kimim/path-sync "papers/references.bib"))
    (setq bibtex-completion-bibliography (concat kimim/path-sync "papers/references.bib")
          bibtex-completion-library-path (concat kimim/path-sync "papers/")
          bibtex-completion-notes-path kimim/path-notes)

    ;; open pdf with system pdf viewer
    (setq bibtex-completion-pdf-open-function
          (lambda (fpath)
            (start-process "open" "*open*" "open" fpath)))

    (defun kimim/org-ref-get-pdf-filename (key)
      "Return the pdf filename associated with a bibtex KEY.
  This searches recursively for the pattern KEY*.pdf. If one result
  is found it is returned, but if multiple results are found,
  e.g. there are related files to the KEY you are prompted for
  which one you want."
      (if org-ref-pdf-directory
          (let ((pdfs
                 (-flatten
                  (--map (file-expand-wildcards
                          (f-join it (format "%s*.pdf" key)))
                         (-flatten
                          (append (list org-ref-pdf-directory)
                                  (directory-files-recursively
                                   org-ref-pdf-directory "" t)))))))
            (cond
             ((= 0 (length pdfs))
              (expand-file-name (format "%s.pdf" key) org-ref-pdf-directory))
             ((= 1 (length pdfs))
              (car pdfs))
             ((> (length pdfs) 1)
              (completing-read "Choose: " pdfs))))
        ;; No org-ref-pdf-directory defined so return just a file name.
        (format "%s.pdf" key)))

    (setq org-ref-get-pdf-filename-function 'kimim/org-ref-get-pdf-filename))
#+end_src

* Dictionary
** Youdao dictionary

Search dictionary with Ctrl+F3 by youdao dictionary.

#+begin_src emacs-lisp
  (use-package youdao-dictionary
    :bind (
           ("<f12>" . youdao-dictionary-def-copied)
           ("C-<f3>" . youdao-dictionary-search-at-point+)
           :map youdao-dictionary-mode-map
           ("<mouse-3>" . youdao-dictionary-def-copied)
           ("f" . youdao-dictionary-search-from-input))
    :config
    (defun youdao-dictionary-def-copied ()
      (interactive)
      (youdao-dictionary-search (gui-get-selection)))
    )
#+end_src

* Mail and Contacts
** EBDB - a replacement for BBDB, as contact management

#+begin_src emacs-lisp
  (use-package ebdb
    :commands (ebdb ebdb-mail-aliases)
    :config
    (setq ebdb-sources (concat kimim/path-sync-emacs "ebdb"))
    ;; do not pop *EBDB-Gnus* window
    (setq ebdb-mua-pop-up nil)
    (require 'ebdb-gnus)
    (require 'ebdb-message)
    (require 'ebdb-org)
    (add-hook 'message-setup-hook 'ebdb-mail-aliases))
#+end_src

** erc

#+begin_src emacs-lisp
  ;; erc settings
  (use-package erc
    :commands (erc)
    :config
    (require 'erc-join)
    (erc-autojoin-mode 1)
    (erc-autojoin-enable)
    (setq erc-default-server "irc.freenode.net")
    (setq erc-autojoin-channels-alist
          '(("irc.freenode.net" "#emacs")))
    (setq erc-hide-list '("JOIN" "PART" "QUIT")))
#+end_src

** GNUS dired

#+begin_src emacs-lisp
  (use-package gnus-dired
    :ensure nil
    :commands (turn-on-gnus-dired-mode)
    :config
    ;; make the `gnus-dired-mail-buffers' function also work on
    ;; message-mode derived modes, such as mu4e-compose-mode
    (defun gnus-dired-mail-buffers ()
      "Return a list of active message buffers."
      (let (buffers)
        (save-current-buffer
          (dolist (buffer (buffer-list t))
            (set-buffer buffer)
            (when (and (derived-mode-p 'message-mode)
                       (null message-sent-message-via))
              (push (buffer-name buffer) buffers))))
        (nreverse buffers)))
    (setq gnus-dired-mail-mode 'mu4e-user-agent))
#+end_src

** mu4e

#+begin_src emacs-lisp
  (use-package sendmail
    :ensure nil
    :config
    (setq mail-user-agent 'sendmail-user-agent)
    (setq mail-self-blind t)
    (setq mail-signature-file (concat kimim/path-sync-emacs "signature.txt")))
#+end_src

#+begin_src emacs-lisp
  (use-package mu-cite
    :commands (mu-cite-original)
    :config
    (setq mu-cite-top-format '("On " date ", " from " wrote:\n\n"))
    (setq mu-cite-prefix-format '(" > ")))
#+end_src

#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :commands (mu4e mu4e-compose-new)
    :bind (
           :map mu4e-headers-mode-map
           ("r" . mu4e-compose-reply)
           ("f" . kimim/mu4e~view-quit-buffer)
           :map mu4e-compose-mode-map
           ("<C-tab>" . message-tab)
           :map mu4e-view-mode-map
           ("<home>" . move-beginning-of-line)
           ("<end>" . move-end-of-line)
           ("r" . mu4e-compose-reply))
    :load-path (lambda ()
                 (cond ((eq system-type 'darwin)
                        "/usr/local/Cellar/mu/1.0_1/share/emacs/site-lisp/mu/mu4e")
                       ((eq system-type 'cygwin)
                        "/usr/local/share/emacs/site-lisp/mu4e")))
    :config
    (require 'org-mu4e) ;; capture link
    (use-package sendmail)
    (add-to-list 'Info-additional-directory-list "/usr/local/share/info")
    (setq mu4e-mu-binary "/usr/local/bin/mu")
    (setq mail-user-agent 'mu4e-user-agent)
    ;; Mail folder set to ~/Maildir
    (setq mu4e-maildir "~/.mail")         ; NOTE: should not be symbolic link
    ;; Fetch mail by offlineimap
    (setq mu4e-get-mail-command "offlineimap -u quiet")
    ;; Fetch mail in 60 sec interval
    (setq mu4e-update-interval 300)
    ;; hide indexing messages from minibuffer
    (setq mu4e-hide-index-messages t)
    (setq mu4e-use-fancy-chars nil)
    (setq mu4e-view-show-images t)
    (setq mu4e-view-fields
          '(:subject :from :to :cc :date :mailing-list
            :attachments :signature :decryption))
    (setq mu4e-headers-fields
          '( (:human-date    .   12)
             (:flags         .    6)
             (:from          .   22)
             (:subject       .   nil)))
    (setq mu4e-compose-cite-function 'mu-cite-original)
    (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
    (add-hook 'mu4e-compose-mode-hook 'kimim/mail-setup)
    (add-hook 'mu4e-compose-mode-hook 'orgalist-mode)
    (add-hook 'mu4e-compose-mode-hook (lambda ()
                                        (auto-fill-mode -1)))
    (defun kimim/mu4e~view-quit-buffer ()
      (interactive)
      (when (get-buffer "*mu4e-view*")
        (switch-to-buffer "*mu4e-view*")
        (mu4e~view-quit-buffer))))
#+end_src

* Viewing Documents

doc-view-mode can view many kind of documents, such as PDF, PS and images. You
should install postscript in cygwin.

#+begin_src emacs-lisp
  (use-package doc-view
    :config
    (setq doc-view-continuous t)
    (setq doc-view-resolution 300)
    (setq doc-view-image-width 1460))
#+end_src

* Reading News

#+begin_src emacs-lisp
  (use-package elfeed
    :commands (elfeed)
    :bind
    (:map elfeed-search-mode-map
          ("<SPC>" . scroll-up-command)
          ("<backspace>" . scroll-down-command)
     :map elfeed-show-mode-map
          ("M-q" . article-fill-long-lines))
    :config
    ;; open feed link with eww
    (use-package org)
    (setq browse-url-browser-function 'browse-url-default-browser);;eww-browse-url)
    (setq elfeed-curl-extra-arguments '("--proxy" "127.0.0.1:1080"))
    (setq elfeed-feeds
          '(
            ("https://www.theguardian.com/world/china/rss" CN)
            ("http://www.chinadaily.com.cn/rss/bizchina_rss.xml" CN)
            ("https://www.lemonde.fr/rss/une.xml" FR une)
            ("https://www.lemonde.fr/asie-pacifique/rss_full.xml" FR asia)
            ("https://www.lemonde.fr/sciences/rss_full.xml" FR science)
            ("https://www.lemonde.fr/technologies/rss_full.xml" FR technology)
            ("http://kimi.im/atom.xml" blog))))
#+end_src

* kimim utils

In Windows environment, =kimim/xterm= and =kimim/dc= will look up the program
from system PATH, so you should set these to system PATH.

#+begin_src emacs-lisp
  (use-package kimim
    :defer 1
    :ensure nil
    :commands (kimim/mail-setup)
    :bind
    (("C-x m m" . kimim/mail-new-empty)
     ("C-x m y" . kimim/mail-attach-files)
     ("<f9>" . kimim/xterm)
     ("S-<f9>" . kimim/cmd)
     ("C-c r" . kimim/rename-file-and-buffer)
     ("C-x m o" . kimim/open-in-external-app)
     ("C-c d" . kimim/lookinsight))
    :load-path "~/kimim-emacs/site-lisp/")
#+end_src

* Key Binding

#+begin_src emacs-lisp
  (bind-key "<f1>" 'delete-other-windows)
  (bind-key "C-<f1>" 'nuke-other-buffers)
  (bind-key "M-<f1>" (lambda()
                       (interactive)
                       (switch-to-buffer "*scratch*") (nuke-other-buffers)))
  (bind-key "<f2>" 'other-window)
  (bind-key "<f5>" (lambda ()
                     (interactive)
                     (switch-to-buffer "*scratch*") (delete-other-windows)))
  ;;(bind-key "<f7>" 'kimim/toggle-highlight-tap)
  ;;(bind-key "<f8>" (lambda ()
  ;;                   (interactive) (list-charset-chars 'ascii)))
  (bind-key "<f7>" 'bury-buffer)
  (bind-key "<f8>" 'unbury-buffer)
  ;; (bind-key "M-<SPC>" (lambda () (interactive)
  ;;                       (insert ?_)))
  (bind-key "C-h" 'delete-backward-char)
  (bind-key "M-h" 'backward-kill-word)
  (bind-key "M-?" 'mark-paragraph)
  (bind-key "C-x k" 'kill-this-buffer)
  (bind-key "C-x C-v" 'view-file-other-window)
  (bind-key "C-c C-o" 'occur)
  (bind-key "C-z" 'set-mark-command)
  (bind-key "M-o" 'other-window)
  (bind-key "M-n" 'next-error)
  (bind-key "M-p" 'previous-error)
  ;;(define-key hs-minor-mode-map "\C-c/" 'hs-toggle-hiding)
  (bind-key "M-*" 'pop-tag-mark)

  (bind-key "C-c C-/" 'comment-or-uncomment-region)
  (bind-key "RET" 'newline-and-indent)
  ;;(define-key global-map (kbd "<M-S-mouse-1>") 'pop-tag-mark)
  ;; key bindings
  (when (eq system-type 'darwin) ;; mac specific settings
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta)
    ;; sets fn-delete to be right-delete
    (global-set-key [kp-delete] 'delete-char))

  (bind-key "C-x m h" 'help)
  (bind-key "C-x m c" 'calculator)
  (bind-key "C-x m n" 'compose-mail)
  (bind-key "C-x m s" '(lambda ()
                         (interactive)
                         (set-frame-font
                          (concat "Inconsolata-" (read-string "Enter font size: ")) t)))
  (bind-key "C-x m ." 'unbury-buffer)
  (bind-key "C-x m ," 'bury-buffer)
  (bind-key "C-x m  。" 'unbury-buffer)
  (bind-key "C-x m  ，" 'bury-buffer)
  (bind-key "C-x ," 'bury-buffer)
  (bind-key "C-x ." 'unbury-buffer)
  (bind-key "C-x  ，" 'bury-buffer)
  (bind-key "C-x  。" 'unbury-buffer)
  (bind-key "C-x  ‘" 'hippie-expand)
  (bind-key "C-x  ’" 'hippie-expand)
#+end_src

* Footnotes

[fn:1] http://www.literateprogramming.com/

[fn:2] http://cygwin.com/

[fn:3] https://cygwin.com/faq/faq.html#faq.setup.cli

[fn:4] https://github.com/transcode-open/apt-cyg

[fn:5] http://brew.sh/

[fn:6] https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html

[fn:7] https://github.com/tldr-pages/tldr

[fn:8] https://github.com/kuanyui/tldr.el

[fn:9] https://github.com/ggreer/the_silver_searcher#installation

[fn:10] https://github.com/Wilfred/ag.el

[fn:11] https://github.com/syl20bnr/spacemacs/issues/381

[fn:12] https://github.com/jorgenschaefer/elpy

[fn:13] https://github.com/ralesi/ahk-mode

[fn:14] https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html
