* Introduction

This Emacs configuration file is written with literate programming method.[fn:1]
=.el= file is loaded by extracting source code from this file.

* Preparation
** Windows
*** Starter Script

Because I want to let Emacs be executed in a specific =home= directory, so I
create a =.bat= file =emacs.bat= to set the environment and run Emacs:

#+BEGIN_SRC bat
  :: set home path for Emacs
  set HOME=C:\Users\kimim\home
  :: execute emacs with debug enable
  C:\kimikit\emacs\bin\runemacs.exe --debug-init
#+END_SRC

*** Cygwin

Another tool sets required for this configuration in Windows is the Cygwin
project[fn:2], which is a large collection of GNU and Open Source tools provide
functionality similar to a Linux distribution on Windows.

Another useful tool is MSYS2 [fn:3], which is better than Cygwin in one point
that the packages can be installed in command line with =pacman -S=.

The explanation from Cygwin is that because Windows do not allow overwriting of
in-use executable, so installing a new version of Cygwin DLL while a packager is
using the DLL is problematic.[fn:4] But I guess MSYS2 should have the same
issue.

However Cygwin standalone package management tool =setup-x86.exe= or
=setup-x86_64.exe= accept command-line arguments [fn:5], so I will try to use
the command line option to install packages as many as possible.

** Mac OS

For Apple macOS, most UNIX tools are installed already. Homebrew [fn:6] is used
to install additional application if it is missing in macOS.

Install Homebrew:

#+BEGIN_SRC shell
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+END_SRC

** Linux

Most of the external tools I used in this Emacs configuration should be easily
installed or already available in main Linux distributions.

* Environment
** Synchronization Folders

I'm using this Emacs configuration for both working usage and personal usage,
and I want to synchronize some files in synchronization service, so I need to
seperate the working file and personal file in different synchronization
services. For example, working files are synchronized in Microsoft OneDrive
Business or Box Business, while personal files are synchronized in Dropbox or
SugarSync.

The variable for synchronization location is named as:
- =path-sync-work= for working usage
- =path-sync-home= for personal usage

If the sync path is not set, then use HOME path =~= as the default folder, that
means, no synchronization. So please set these variables in your =.emacs= file.

#+BEGIN_SRC emacs-lisp
  ;; Synchronization Folders
  (if (not (boundp 'path-sync-work))
      (defvar path-sync-work "~/"))
  (if (not (boundp 'path-sync-home))
      (defvar path-sync-home "~/"))
#+END_SRC

** kimim-emacs path

Another important folder is the folder for this configuration files, which is
cloned from my github repository.

Anyway, you can change the path as you want, and set =path-kimim-emacs=
accordingly.

#+BEGIN_SRC sh
git clone https://github.com/kimim/kimim-emacs.git
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defvar path-kimim-emacs "~/kimim-emacs/")
#+END_SRC

** PATH, exec-path and Info

Environment variable =PATH= is the the searching path of executables by the
shell running in Emacs while =exec-path= is the search path of Emacs itself. So
we should set both of them to almost the same paths.

As I have a Windows box in the office, and a Apple macOS at home, so I need to
specify these variables in different way.

#+BEGIN_SRC emacs-lisp
  (defvar path-root "/")
  (cond ((eq window-system 'w32)
         (setq path-root "C:/cygwin/")
         (add-to-list 'exec-path
                      "C:/kimikit/emacs/bin/")
         (setenv "PATH"
                 (concat "C:/kimikit/emacs/bin" path-separator
                 (getenv "PATH"))))
        ((eq window-system 'ns)
         (setq path-root "/")
         (add-to-list 'exec-path "/Library/Frameworks/Python.framework/Versions/3.5/bin")
         (setenv "PATH"
                 (concat
                  "/Library/Frameworks/Python.framework/Versions/3.5/bin" path-separator
                  (getenv "PATH")))))

  (add-to-list 'exec-path (concat path-root "bin"))
  (add-to-list 'exec-path (concat path-root "usr/bin"))
  (add-to-list 'exec-path (concat path-root "usr/local/bin"))

  (setenv "PATH"
          (concat
           path-root "bin" path-separator
           path-root "usr/bin" path-separator
           path-root "usr/local/bin" path-separator
           (getenv "PATH")))

  (add-to-list 'Info-additional-directory-list
               (concat path-root "usr/share/info"))
  (add-to-list 'Info-additional-directory-list
               (concat path-root "usr/local/share/info"))
  ;; additional info, collected from internet
  (add-to-list 'Info-additional-directory-list
               (concat "~/info"))
#+END_SRC

** Language
#+BEGIN_SRC emacs-lisp
  ;;========================================
  ;; Language and Encoding Settings
  ;;========================================
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  ;; remove svn log LC_TYPE not defined warning.
  (setenv "LC_CTYPE" "en_US")
  (set-locale-environment "English")
  (set-language-environment 'English)
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-16le)
  (cond ((eq window-system 'w32)
         ;; Windows file name is encoded in gbk
         (set-file-name-coding-system 'gbk)
         (set-terminal-coding-system 'gbk))
        ((eq window-system 'ns)
         (set-file-name-coding-system 'utf-8)
         (set-terminal-coding-system 'utf-8)))
#+END_SRC

** TODO Customization File

Do I need another customization file? Or shall I collect these settings in this
file?

#+BEGIN_SRC emacs-lisp
  ;; load customization
  (setq custom-file (concat path-kimim-emacs "custom.el"))
  (load custom-file)
#+END_SRC
** global key map
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'ctl-x-m-map)
  (global-set-key "\C-xm" 'ctl-x-m-map)
#+END_SRC
* Package

=package= [fn:7]is the modern =elisp= package management system, which lets you
easily download and install packages that implement additional features. Each
package is a separate Emacs Lisp program, sometimes including other components
such as an Info manual.

All the extensions used in this file are installed and managed by =package=.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-user-dir "~/.emacs.d/elpa")
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("ELPA" . "http://tromey.com/elpa/")
          ("elpy" . "http://jorgenschaefer.github.io/packages/")
          ("marmalade" . "https://marmalade-repo.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))
  (package-initialize)
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)                ;; if you use :diminish
  (require 'bind-key)                ;; if you use any :bind variant
  ;; install package is missing
  (setq use-package-always-ensure t)
#+END_SRC
* Appearance
** Font and Color
#+BEGIN_SRC emacs-lisp
  (setq font-lock-maximum-decoration t)
  (setq font-lock-global-modes '(not shell-mode text-mode))
  (setq font-lock-verbose t)
  (global-font-lock-mode 1)                 ; 开启语法高亮

  (cond ((eq window-system 'w32)
         ;; cleaner font setting
         (set-fontset-font
          "fontset-default"
          'han (font-spec :family "NSimSun" :size 16))
         (setq default-frame-alist
               '((top . 80) (left . 250)
                 (width . 128) (height . 45)
                 ;; if you like anti-alias, use this to have a try
                 (font . "Inconsolata-11")
                 )))
        ((eq window-system 'ns)
         (set-fontset-font
          "fontset-default"
          'han (font-spec :family "Microsoft Yahei" :size 14))
         ;; OS X 下，只有雅黑字體的標點符號顯示的不是那麼難看
         (set-fontset-font
          "fontset-default"
          'cjk-misc (font-spec :family "Microsoft Yahei" :size 14))
         (setq default-frame-alist
               '((top . 100) (left . 600)
                 (width . 166) (height . 70)
                 ;; (font . "Bitstream Vera Sans Mono-14")
                 ))))
  (load-file (concat path-kimim-emacs "site-lisp/color-theme-kimim.el"))
  (color-theme-kimim)
#+END_SRC
** Title and Header Line

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
        '("" invocation-name ": "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))
  (require 'path-headerline-mode)
  ;; only display headerline for real files
  (defun kimim/ph--display-header (orig-fun &rest args)
    (if (buffer-file-name)
        (apply orig-fun args)
      (setq header-line-format nil)))
  (advice-add 'ph--display-header :around #'kimim/ph--display-header)
  ;; display file path in headerline
  ;; useful when in fullscreen mode
  (path-headerline-mode t)
#+END_SRC
** Menu Bar and Tool Bar
#+BEGIN_SRC emacs-lisp
  (cond ((eq window-system 'w32)
         ;; Enable copy and paste in Win32
         (setq select-enable-clipboard t)
         (menu-bar-mode 0))
        ((eq window-system 'ns)
         (menu-bar-mode 1)))
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Mode Line
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)
  (setq display-time-interval 10)
  (display-time-mode t)
#+END_SRC
** Highlight
#+BEGIN_SRC emacs-lisp
  ;; highlight current line
  (global-hl-line-mode 1)
  (require 'auto-highlight-symbol)
  ;; highlight current symbol
  (global-auto-highlight-symbol-mode t)
  ;; edit highlighted symbol
  ;; -> defined in key binding section
  ;; (define-key ctl-x-m-map "e" 'ahs-edit-mode)
#+END_SRC
** Other Visual Element
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)          ; 不顯示開始畫面
  (setq initial-scratch-message nil)        ; scratch 默認為空
  (setq visible-bell t)                     ; 關閉視覺告警
  (setq ring-bell-function #'ignore)
  (fset 'yes-or-no-p 'y-or-n-p)
  (show-paren-mode 1)                       ; 高亮显示匹配的括号
  (blink-cursor-mode 0)                     ; 光标不闪烁
  (tooltip-mode nil)
#+END_SRC

* Editing

#+BEGIN_SRC emacs-lisp
  ;;========================================
  ;; Editor setting
  ;;========================================
  (setq inhibit-eol-conversion nil)       ; 不要轉換 end-of-line style
  (setq fill-column 80)
  (drag-stuff-global-mode 1)              ; use Alt-up/down to drag line or region
  (delete-selection-mode 1)               ; 輸入的文字覆蓋選中的文字
  (setq kill-ring-max 200)                ; kill-ring 最多的记录个数
  (setq kill-whole-line t)                ; 在行首 C-k 时，同时删除该行。
  (setq require-final-newline t)          ; 存盘的时候，要求最后一个字符时换行符
  (setq tab-width 4)                      ; 用space替换tab，tab长度为4
  (setq tab-stop-list
        (number-sequence 4 120 4))        ; 每次tab空格數
  (setq track-eol t)                      ; 当光标在行尾上下移动的时候保持在行尾
  ;; 对于每个备份文件，保留最原始的两个版本和最新的五个版本。并且备份的时
  ;; 候，备份文件是复本，而不是原件。
  (setq backup-directory-alist '(("." . "~/Temp")))
  (setq version-control t)
  (setq kept-old-versions 10)
  (setq kept-new-versions 20)
  (setq delete-old-versions t)
  (setq backup-by-copying t)

  (setq auto-save-interval 50)
  (setq auto-save-timeout 60)
  (setq auto-save-default nil)           ; auto-save of every file-visiting buffer
  (setq auto-save-list-file-prefix "~/Temp/auto-saves-")
  (setq auto-save-file-name-transforms `((".*"  , "~/Temp/")))
  (setq create-lockfiles nil)
  (setq time-stamp-active t)
  (setq time-stamp-warn-inactive t)
  (setq time-stamp-format "%:y-%02m-%02d %3a %02H:%02M:%02S kimi")
  (add-hook 'write-file-hooks 'time-stamp); 自动更新 time-stamp

  (defun kimim/delete-trailing-whitespace (&optional start end)
    (interactive)
    (if (or (not (boundp 'deft-auto-save-buffers))
            (not (member (current-buffer) deft-auto-save-buffers)))
        (delete-trailing-whitespace)))
  (add-hook 'before-save-hook 'kimim/delete-trailing-whitespace)

  (defun kimim/save-buffer-advice (orig-fun &rest arg)
    (delete-trailing-whitespace)
    (apply orig-fun arg))

  (advice-add 'save-buffer :around #'kimim/save-buffer-advice)

  (setq ispell-program-name "aspell")

  (add-hook 'text-mode-hook
            (lambda ()
              (when (derived-mode-p 'org-mode 'markdown-mode 'text-mode)
                (flyspell-mode)
                (visual-line-mode))))
  (setq-default indent-tabs-mode nil)

  ;; 当有两个文件名相同的缓冲时，使用前缀的目录名做 buffer 名字
  (setq uniquify-buffer-name-style 'forward)

  ;; bookmark setting
  (setq bookmark-default-file "~/.emacs.d/emacs.bmk")
  ;; 当使用 M-x COMMAND 后，显示该 COMMAND 绑定的键 5 秒鐘時間
  (setq suggest-key-bindings 5)
  ;; 每当设置书签的时候都保存书签文件，否则只在你退出 Emacs 时保存
  (setq bookmark-save-flag 1)


  ;;========================================
  ;; Global Mode Settings
  ;;========================================
  (setq auto-mode-alist
        (append '(("\\.py\\'" . python-mode)
                  ("\\.css\\'" . css-mode)
                  ("\\.A\\w*\\'" . asm-mode)
                  ("\\.S\\'" . asm-mode)
                  ("\\.C\\w*\\'" . c-mode)
                  ("\\.md\\'" . markdown-mode)
                  ("\\.markdown\\'" . markdown-mode)
                  ("\\.svg\\'" . html-mode)
                  ("\\.pas\\'" . delphi-mode)
                  ("\\.txt\\'" . org-mode)
                  )
                auto-mode-alist))


  ;;========================================
  ;; Load other configuration files
  ;;========================================

  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name "saveplace" "~"))

  ;;  (use-package volatile-highlights
  ;;    :config
  ;;    (volatile-highlights-mode t)
  ;;    :diminish volatile-highlights-mode)
#+END_SRC
** undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+END_SRC
* Controlling
** Window and Frame
#+BEGIN_SRC emacs-lisp
  (use-package winner
    ;; restore windows configuration, built-in package
    :commands winner-mode
    :config
    (winner-mode t))

  (use-package window-numbering
    :ensure t
    :commands window-numbering-mode
    :config
    (window-numbering-mode 1))
#+END_SRC

** Command

Here I use =use-package= to defer the package loading and even installation,
When you use the =:commands= keyword, it creates autoloads for those commands
and defers loading of the module until they are used.

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/justbur/emacs-which-key
  (use-package which-key
    :ensure t
    :config
    ;; use minibuffer as the popup type, otherwise conflict in ecb mode
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode 1))

  ;; smex will list the recent function on top of the cmd list
  (use-package smex
    :ensure t
     :config
    (smex-initialize))
#+END_SRC
* Dired and Buffer

#+BEGIN_SRC emacs-lisp
  ;;==============================================================================
  ;; Settings for dired mode
  ;;==============================================================================
  (require 'dired-x)
  (add-hook 'dired-mode-hook
            (lambda ()
              ;; Set dired-x buffer-local variables here.  For example:
              (dired-omit-mode 1)
              (setq dired-omit-localp t)
              (setq dired-omit-files
                    (concat "|NTUSER\\|ntuser\\"
                            "|Cookies\\|AppData\\"
                            "|Contacts\\|Links\\"
                            "|Intel\\|NetHood\\"
                            "|PrintHood\\|Recent\\"
                            "|Start\\|SendTo\\"
                            "|^\\.DS_Store\\"
                            "|qms-bmh"))))
  ;; Dired buffer 中列出文件时传递给 ls 的参数。加个 "l" 可以使大写的文
  ;; 件名在顶部，临时的改变可以用 C-u s。
  (setq dired-listing-switches "-avhl")
  ;; 复制(删除)目录的时，第归的复制(删除)其中的子目录。
  (setq dired-recursive-copies t)
  (setq dired-recursive-deletes t)
  (define-key dired-mode-map (kbd "<left>") 'dired-up-directory)
  (define-key dired-mode-map (kbd "<right>") 'dired-find-file)

  (defadvice dired-next-line (after dired-next-line-advice (arg) activate)
    "Move down lines then position at filename, advice"
    (interactive "p")
    (if (eobp)
        (progn
          (goto-char (point-min))
          (forward-line 2)
          (dired-move-to-filename))))

  (defadvice dired-previous-line (before dired-previous-line-advice (arg) activate)
    "Move up lines then position at filename, advice"
    (interactive "p")
    (if (= 3 (line-number-at-pos))
        (goto-char (point-max))))

  (require 'ibuffer)

  (defun ibuffer-visit-buffer-other-window (&optional noselect)
    "Visit the buffer on this line in another window."
    (interactive)
    (let ((buf (ibuffer-current-buffer t)))
      (bury-buffer (current-buffer))
      (if noselect
          (let ((curwin (selected-window)))
            (pop-to-buffer buf)
            (select-window curwin))
        (switch-to-buffer-other-window buf)
        (kill-buffer-and-its-windows "*Ibuffer*")
        )))

  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (cond
     ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
     ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
     ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
     (t (format "%8d" (buffer-size)))))

  ;; Modify the default ibuffer-formats
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 18 18 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                filename-and-process)))
#+END_SRC

* Navigation
#+BEGIN_SRC emacs-lisp
  (use-package bm
    :bind (("C-x m t" . bm-toggle)
           ("C-x m s" . bm-show-all)))
#+END_SRC
* Search and Finding
** Grep
#+BEGIN_SRC emacs-lisp
  (defadvice grep-compute-defaults (around grep-compute-defaults-advice-null-device)
    "Use cygwin's /dev/null as the null-device."
    (let ((null-device "/dev/null"))
      ad-do-it))
  (ad-activate 'grep-compute-defaults)
  (setq grep-find-command
        "find . -type f -not -name \"*.svn-base\" -and -not -name \"*#\" -and -not -name \"*.tmp\" -and -not -name \"*.obj\" -and -not -name \"*.386\" -and -not -name \"*.img\" -and -not -name \"*.LNK\" -and -not -name GTAGS -print0 | xargs -0 grep -n -e ")

  (defun kimim/grep-find()
    (interactive)
    (grep-find (concat grep-find-command (buffer-substring-no-properties (region-beginning) (region-end)))))
#+END_SRC

** ag: the silver searcher

=ag= [fn:8] is really a very fast grep tool, and =ag.el= [fn:9] provide the
Emacs interface to =ag=:

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :bind
    ("C-x g" . ag-project)
    :config
    (setq ag-highlight-search t))
#+END_SRC

** Everything

Everything[fn:10] is a wonderful fast file and folder search engine, it provide
a command line tool to get search result from Everything to command line output:
=es.exe= [fn:11].

Reminded that Everything should be running in background to do the real search
task for =es.exe=.

#+BEGIN_SRC emacs-lisp
  (use-package everything
    :ensure t
    :init
    (setq everything-cmd "c:\\kimikit\\bin\\es.exe"))
#+END_SRC
** imenu & imenu-anywhere

=imenu= is used to navigate the function definitions in current buffer.

#+BEGIN_SRC emacs-lisp
  (use-package imenu
    :bind (("C-c i" . imenu))
    :config
    (advice-add 'imenu-default-goto-function
                :around
                #'kimim/imenu-default-goto-function-advice))

  (use-package imenu-anywhere)
#+END_SRC

** Other search utils
#+BEGIN_SRC emacs-lisp
  (defun kimim/look-from-mydict()
    (interactive)
    (browse-url (concat "http://www.mydict.com/index.php?controller=Dict_German&action=Search&keyword="
                        (buffer-substring-no-properties (region-beginning) (region-end)))))

  (defun kimim/lookinsight ()
    (interactive)
    (kill-ring-save (region-beginning) (region-end))
    (w32-shell-execute
     "open" "C:\\Program Files\\AutoHotkey\\AutoHotkey.exe" "c:\\kimikit\\Autohotkey\\lookinsight.ahk"))
#+END_SRC
* auto-complete
** ivy-mode

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config (ivy-mode 1))
#+END_SRC

** auto parenthesis

#+BEGIN_SRC emacs-lisp
  ;; add pair parenthis and quote automatically
  (autopair-global-mode 1)
#+END_SRC

** yasnippet

#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
  (setq yas-snippet-dirs (concat path-sync-home "tools/snippets"))
#+END_SRC

In order to remove following warning:

#+BEGIN_QUOTE
Warning (yasnippet): ‘xxx’ modified buffer in a backquote expression.
  To hide this warning, add (yasnippet backquote-change) to ‘warning-suppress-types’.
#+END_QUOTE

add following lines:

#+BEGIN_SRC emacs-lisp
  (require 'warnings)
  (setq warning-suppress-types '((yasnippet backquote-change)))
#+END_SRC

** COMMENT auto-complete
#+BEGIN_SRC emacs-lisp
  ;; intelligent completion setting
  (require 'auto-complete-config)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/dict")
  (ac-config-default)
  ;;(abbrev-mode -1)
  ;;(icomplete-mode 1)
#+END_SRC
** company mode

#+BEGIN_SRC emacs-lisp
  (require 'company)
  (global-company-mode t)
  (add-hook 'after-init-hook 'global-company-mode)
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-yasnippet))
#+END_SRC
** company dict
#+BEGIN_SRC emacs-lisp
  (require 'company-dict)

  ;; Where to look for dictionary files. Default is ~/.emacs.d/dict
  (setq company-dict-dir "~/.emacs.d/dict/")

  ;; Optional: if you want it available everywhere
  (add-to-list 'company-backends 'company-dict)
#+END_SRC
* helper functions

#+BEGIN_SRC emacs-lisp
  ;; generate timestamp such as 2016_1031KJ__ for file name
  (defun kimim/genfile-timestamp()
    (concat (format-time-string "%Y_%m%d")
            (char-to-string (+ 65 (random 26)))
            (char-to-string (+ 65 (random 26)))
            "__"))

  ;; self define functions
  (defun kimim/imenu-default-goto-function-advice (orig-fun &rest args)
    (apply orig-fun args)
    (recenter))

  (defun now () (interactive)
         (insert (shell-command-to-string "date")))

  (defun day ()
    "Insert string for today's date nicely formatted in American style,
    e.g. Sunday, September 17, 2000."
    (interactive)                 ; permit invocation in minibuffer
    (insert (format-time-string "%A, %B %e, %Y")))

  (defun today ()
    "Insert string for today's date nicely formatted in American style,
    e.g. 2000-10-12."
    (interactive)                 ; permit invocation in minibuffer
    (insert (format-time-string "%Y-%m-%d")))

  (defun toyear ()
    "Insert string for today's date nicely formatted in American style,
    e.g. 2000."
    (interactive)                 ; permit invocation in minibuffer
    (insert (format-time-string "%Y")))


  (defun get-file-line ()
    "Show (and set kill-ring) current file and line"
    (interactive)
    (unless (buffer-file-name)
      (error "No file for buffer %s" (buffer-name)))
    (let ((msg (format "%s::%d"
                       (file-truename (buffer-file-name))
                       (line-number-at-pos))))
      (kill-new msg)
      (message msg)))


  (defun open-folder-in-explorer ()
    "Call when editing a file in a buffer.
    Open windows explorer in the current directory and select the current file"
    (interactive)
    (w32-shell-execute
     "open" "explorer"
     (concat "/e,/select," (convert-standard-filename buffer-file-name))
     ))


  (defun mac-open-terminal ()
    (interactive)
    (let ((dir ""))
      (cond
       ((and (local-variable-p 'dired-directory) dired-directory)
        (setq dir dired-directory))
       ((stringp (buffer-file-name))
        (setq dir (file-name-directory (buffer-file-name))))
       ((stringp default-directory)
        (setq dir default-directory))
       )
      (do-applescript
       (format "
     tell application \"Terminal\"
       activate
       try
         do script with command \"cd %s\"
       on error
         beep
       end try
     end tell" dir))
      ))

  (defun kimim/cmd ()
    "Open cmd.exe from emacs just as you type: Win-R, cmd, return."
    (interactive)
    (w32-shell-execute
     "open" "c:\\kimikit\\PyCmd\\PyCmd.exe"))

  (defun kimim/cyg ()
    "Open cygwin mintty from emacs."
    (interactive)
    (cond ((eq window-system 'w32)
           (w32-shell-execute
            "open" "mintty" " -e bash"))
          ((eq window-system 'ns)
           (mac-open-terminal))))

  (defun kimim/4nt ()
    "Open 4NT terminal"
    (interactive)
    (w32-shell-execute
     "open" "4nt"))

  (defun kimim/dc ()
    "Open file location in double commander"
    (interactive)
    (w32-shell-execute
     "open" "doublecmd" (concat "-L " (replace-regexp-in-string "/" "\\\\" (pwd)))))

  (defun kill-dired-buffers()
    "Kill all dired buffers."
    (interactive)
    (save-excursion
      (let((count 0))
        (dolist(buffer (buffer-list))
          (set-buffer buffer)
          (when (equal major-mode 'dired-mode)
            (setq count (1+ count))
            (kill-buffer buffer)))
        (message "Killed %i dired buffer(s)." count ))))

  ;;设置 sentence-end 可以识别中文标点。不用在 fill 时在句号后插入两个空格。
  (setq sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")

  (setq scroll-margin                   0 )
  (setq scroll-conservatively      100000 )
                                          ;(setq scroll-preserve-screen-position 1 )
  (setq scroll-up-aggressively       0.01 )
  (setq scroll-down-aggressively     0.01 )



  (defun encode-buffer-to-utf8 ()
    "Sets the buffer-file-coding-system to UTF8."
    (interactive)
    (set-buffer-file-coding-system 'utf-8 nil))

  (defun save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

  (defun nuke-other-buffers ()
    "Kill all buffers, leaving current-buffer only."
    (interactive)
    (mapcar
     (lambda (x)
       (if (not
            (or (eq x (current-buffer))
                (member
                 (buffer-name x)
                 ;; all ecb related buffers
                 '(" *ECB Sources*" " *ECB History*"
                   " *ECB Methods*" " *Minibuf-1*"
                   " *Minibuf-0*" " *ECB Analyse*"
                   " *ECB Directories*"))))
           (kill-buffer x)))
     (buffer-list))
    (delete-other-windows)
    (message "All other buffers clear"))

  (defun indent-whole-buffer ()
    "Indent whole buffer and delete trailing whitespace.
    This command will also do untabify."
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max))
    (untabify (point-min) (point-max)))

  (defun fold-long-comment-lines ()
    "This functions allows us to fold long comment lines
     automatically in programming modes. Quite handy."
    (interactive "p")
    (auto-fill-mode 1)
    (set (make-local-variable 'fill-no-break-predicate)
         (lambda ()
           (not (eq (get-text-property (point) 'face)
                    'font-lock-comment-face)))))

  (defun new-note ()
    (interactive)
    (find-file (concat default-doc-path "/Notes/"
                       (format-time-string "%Y%m-")
                       (read-string (concat "Filename: " (format-time-string "%Y%m-"))) ".org")))

  (add-hook 'comint-output-filter-functions
            'shell-strip-ctrl-m nil t)
  (add-hook 'comint-output-filter-functions
            'comint-watch-for-password-prompt nil t)

  ;; For subprocesses invoked via the shell
  ;; (e.g., "shell -c command")
  (cond ((eq window-system 'w32)
         (setq explicit-shell-file-name "bash.exe")
         (setq shell-file-name explicit-shell-file-name)))

  (setq color-list '(hi-yellow hi-green hi-blue hi-pink));; hi-red-b hi-green-b hi-blue-b))
  (setq color-index 0)
  (setq color-list-length (length color-list))

  (defun kimim/toggle-highlight-tap ()
    "Highlight pattern at the point"
    (interactive)
    (if (and (listp (get-text-property (point) 'face))
             (memq (car (get-text-property (point) 'face)) color-list))
        (unhighlight-regexp (thing-at-point 'symbol))
      (progn
        (highlight-regexp (thing-at-point 'symbol) (nth color-index color-list))
        (setq color-index (+ color-index 1))
        (if (>= color-index color-list-length)
            (setq color-index 0))
        )))


  (defun my-blink(begin end)
    "blink a region. used for copy and delete"
    (interactive)
    (let* ((rh (make-overlay begin end)))
      (progn
        (overlay-put rh 'face '(:background "DodgerBlue" :foreground "White"))
        (sit-for 0.2 t)
        (delete-overlay rh)
        )))

  (defun get-point (symbol &optional arg)
    "get the point"
    (funcall symbol arg)
    (point)
    )

  (defun copy-thing (begin-of-thing end-of-thing &optional arg)
    "Copy thing between beg & end into kill ring. Remove leading and
    trailing whitespace while we're at it. Also, remove whitespace before
    column, if any. Also, font-lock will be removed, if any. Also, the
    copied region will be highlighted shortly (it 'blinks')."
    (save-excursion
      (let* ((beg (get-point begin-of-thing 1))
             (end (get-point end-of-thing arg)))
        (progn
          (copy-region-as-kill beg end)
          (with-temp-buffer
            (yank)
            (goto-char 1)
            (while (looking-at "[ \t\n\r]")
              (delete-char 1))
            (delete-trailing-whitespace)
            (delete-whitespace-rectangle (point-min) (point-max)) ;; del column \s, hehe
            (font-lock-unfontify-buffer) ;; reset font lock
            (kill-region (point-min) (point-max))
            )
          ))))

  (defun copy-word (&optional arg)
    "Copy word at point into kill-ring"
    (interactive "P")
    (my-blink (get-point 'backward-word 1) (get-point 'forward-word 1))
    (copy-thing 'backward-word 'forward-word arg)
    (message "word at point copied"))

  (defun copy-line (&optional arg)
    "Copy line at point into kill-ring, truncated"
    (interactive "P")
    (my-blink (get-point 'beginning-of-line 1) (get-point 'end-of-line 1))
    (copy-thing 'beginning-of-line 'end-of-line arg)
    (message "line at point copied"))

  (defun copy-paragraph (&optional arg)
    "Copy paragraph at point into kill-ring, truncated"
    (interactive "P")
    (my-blink (get-point 'backward-paragraph 1) (get-point 'forward-paragraph 1))
    (copy-thing 'backward-paragraph 'forward-paragraph arg)
    (message "paragraph at point copied"))

  (defun copy-buffer(&optional arg)
    "Copy the whole buffer into kill-ring, as-is"
    (interactive "P")
    (progn
      (my-blink (point-min) (point-max))
      (copy-region-as-kill (point-min) (point-max))
      (message "buffer copied")))


  (defvar kimim/last-edit-list nil)
  ;; ((file location) (file location))
  ;;   1              2

  (defun kimim/backward-last-edit ()
    (interactive)
    (let ((position (car kimim/last-edit-list)))
      (when position
        ;;(print position)
        ;;(print kimim/last-edit-list)
        (find-file (car position))
        (goto-char (cdr position))
        (setq kimim/last-edit-list (cdr kimim/last-edit-list)))))


  ;; TODO shrink list if more items
  (defun kimim/buffer-edit-hook (beg end len)
    (interactive)
    (let ((bfn (buffer-file-name)))
      ;; insert modification in current index
      ;; remove forward locations
      ;; if longer than 100, remove old locations
      (when bfn
        (progn
          (add-to-list 'kimim/last-edit-list (cons bfn end))))))

  (add-hook 'after-change-functions 'kimim/buffer-edit-hook)
  (global-set-key (kbd "M-`") 'kimim/backward-last-edit)

  ;; copy from http://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs
  ;; http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
  ;; many thanks to Bozhidar Batsov (https://github.com/bbatsov)
  (defun kimim/rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting. Binded to
  key C-c r"
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC
* Programming General
** Tagging

#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :bind (("C-c g" . ggtags-grep)
           ("C-c f" . ggtags-find-file)
           ("M-." . ggtags-find-tag-dwim))
    :config
    ;; ggtags settings
    ;; Activate cygwin mount for gtags CDPATH issue on W32
    (cond ((eq window-system 'w32)
           (require 'cygwin-mount)
           (cygwin-mount-activate)))
    (setq ggtags-global-ignore-case t)
    (setq ggtags-sort-by-nearness t)
    ;; let ggtags use split-window with is redefined by ecb mode
    ;;(setq ggtags-split-window-function 'split-window-below)

    ;; close grep window and done ggtags navigation when type C-g
    ;; but some times it will close all the ecb windows, so remove this advice.
    ;; (advice-add 'keyboard-quit :before #'kimim/kill-grep-and-ggtags-done)
    (defun kimim/recenter()
      (interactive)
      (recenter))

    (advice-add 'pop-tag-mark :after #'kimim/recenter)
    ;;(advice-add 'next-error :after #'kimim/recenter)
    ;;(advice-add 'previous-error :after #'kimim/recenter)
    (add-hook 'c-mode-common-hook
              (lambda ()
                (ggtags-mode 1))))
#+END_SRC
** Version Control
#+BEGIN_SRC emacs-lisp
  ;; ;; magit-status for git
  (use-package magit
    :bind ("C-x m g" . magit-status))
#+END_SRC
* Programming Language
** C
*** Formatting

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
            (lambda ()
              ;; show column width indicator
              ;;(fci-mode 0)
              ;;(syntax-subword-mode 1)
              ;;(hs-minor-mode 0)
              ;;(c-set-style "gnu")
              (c-toggle-auto-newline 0)
              (c-toggle-auto-hungry-state 0)
              (c-toggle-syntactic-indentation 1)
              ;;(highlight-indentation-mode 1)
              (which-function-mode 1)
              (local-set-key "\C-co" 'ff-find-other-file)
              ;;(my-c-mode-common-hook-if0)
              (setq c-basic-offset 4)))
#+END_SRC

*** Completion
#+BEGIN_SRC emacs-lisp
  ;; Define the modes/packages you need
  (require 'irony)
  (require 'company-c-headers)
  ;; Enable company mode globally

  ;;(add-hook 'after-init-hook 'global-company-mode)

  (defun company-c-headers-includes ()
    (add-to-list 'company-c-headers-path-system "/usr/include"))

  (company-c-headers-includes)

  ;; irony-mode configuration
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  (setq w32-pipe-read-delay 0)

  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

  ;; set up flycheck
  (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

  (add-hook 'c-mode-hook 'flycheck-mode)
  (add-hook 'c++-mode-hook 'flycheck-mode)

  ;; replace the `completion-at-point' and `complete-symbol' bindings in
  ;; irony-mode's buffers by irony-mode's function
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  ( add-hook 'irony-mode-hook 'my-irony-mode-hook)

  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-irony))
#+END_SRC
** Python

Python development configuration is quite easy. =elpy= [fn:12] is used here:

#+BEGIN_SRC emacs-lisp
  (elpy-enable)
  (setq elpy-rpc-backend "jedi")
  ;;(setq jedi:complete-on-dot t)

  ;; prevent redundant intent in using yasnippets
  (add-hook 'python-mode-hook
            (lambda ()
              (setq yas-indent-line nil)))
  ;; remove warning when start python interpreter
  (add-to-list 'python-shell-completion-native-disabled-interpreters "python")
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-jedi))
#+END_SRC

Following =python= package is required according to =elpy= mannual:

#+BEGIN_SRC sh
pip install rope
pip install jedi
# flake8 for code checks
pip install flake8
# importmagic for automatic imports
pip install importmagic
# and autopep8 for automatic PEP8 formatting
pip install autopep8
# and yapf for code formatting
pip install yapf
# install virtualenv for jedi
pip install virtualenv
#+END_SRC
** Emacs lisp

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-elisp))
#+END_SRC

* calendar amd orgmode
** calendar

#+BEGIN_SRC emacs-lisp
  ;;============================================================================
  ;; Calendar and Holiday Settings
  ;;============================================================================
  (setq diary-file "~/.emacs.d/diary")
  (setq calendar-latitude +30.16)
  (setq calendar-longitude +120.12)
  (setq calendar-location-name "Hangzhou")
  (setq calendar-remove-frame-by-deleting t)
  (setq calendar-week-start-day 1)
  (setq holiday-christian-holidays nil)
  (setq holiday-hebrew-holidays nil)
  (setq holiday-islamic-holidays nil)
  (setq holiday-solar-holidays nil)
  (setq holiday-bahai-holidays nil)
  (setq holiday-general-holidays '((holiday-fixed 1 1 "元旦")
                           (holiday-fixed 4 1 "愚人節")
                           (holiday-float 5 0 2 "父親節")
                           (holiday-float 6 0 3 "母親節")))
  (setq calendar-mark-diary-entries-flag t)
  (setq calendar-mark-holidays-flag nil)
  (setq calendar-view-holidays-initially-flag nil)
  (setq chinese-calendar-celestial-stem
        ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
  (setq chinese-calendar-terrestrial-branch
        ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
#+END_SRC
** orgmode path setting

#+BEGIN_SRC emacs-lisp
  ;; path and system environment setting for orgmode
  (defvar path-org-home (concat path-sync-home "org/"))
  (defvar path-org-work (concat path-sync-work "org/"))
#+END_SRC

** orgmode as GTD system

#+BEGIN_SRC emacs-lisp
  ;;==============================================
  ;; org as GTD system
  ;;==============================================
  (setq org-todo-keywords
        '(
          ;; for tasks
          (sequence "TODO(t!)" "SCHED(s)" "|" "DONE(d@/!)")
          ;; for risks, actions, problems
          (sequence "OPEN(o!)" "WAIT(w@/!)" "|" "CLOSE(c@/!)")
          ;; special states
          (type "REPEAT(r)" "SOMEDAY(m)" "|" "ABORT(a@/!)")))

  (setq org-tag-alist '((:startgroup . nil)
                        ("@office" . ?o) ("@home" . ?h)
                        (:endgroup . nil)
                        ("@team" . ?t) ("@leader" . ?l)
                        ("risk" . ?k)
                        ("sync" . ?s)
                        ("reading" . ?r)
                        ("writing" . ?w)
                        ("project" . ?p) ("category" . ?c)
                        ("habit" . ?H)
                        ("next" . ?n)))
  ;; Level=2 or 3, state is not DONE/ABORT/CLOSED/SOMEDAY
  ;; contains no TODO keywords or SOMEDAY
  ;; contains no project tag
  ;; subtree contains TODO

  ;; 子節點不需要繼承父節點的 tag
  ;; project 表示這個節點下的是項目任務，任務不需要繼承project tag
  ;; category 表示該節點是分類節點
  (setq org-tags-exclude-from-inheritance '("project" "category"))

  (add-hook 'org-mode-hook
            (lambda ()
              (auto-fill-mode)
              (org-display-inline-images)
              (drag-stuff-mode -1)
              (if (boundp 'org-agenda-mode-map)
                  (org-defkey org-agenda-mode-map "x"
                              'org-agenda-list-stuck-projects))))

  (setq org-stuck-projects
        '("+LEVEL>=2-category-project-habit/-TODO-SCHED-DONE-OPEN-WAIT-CLOSE-SOMEDAY-REPEAT-ABORT"
          ("TODO" "SCEHD" "OPEN" "WAIT") nil nil))

  (setq org-refile-targets
        '(;; refile to maxlevel 2 of current file
          (nil . (:maxlevel . 1))
          ;; refile to maxlevel 1 of org-refile-files
          (org-refile-files :maxlevel . 1)
          ;; refile to item with 'project' tag in org-refile-files
          (org-refile-files :tag . "project")
          (org-refile-files :tag . "category")))

  (defadvice org-schedule (after add-todo activate)
    (if (or (string= "OPEN" (org-get-todo-state))
            (string= "WAIT" (org-get-todo-state))
            (string= "CLOSE" (org-get-todo-state)))
        (org-todo "WAIT")
      (org-todo "SCHED")))

  (defadvice org-deadline (after add-todo activate)
    (if (or (string= "OPEN" (org-get-todo-state))
            (string= "WAIT" (org-get-todo-state))
            (string= "CLOSE" (org-get-todo-state)))
        (org-todo "WAIT")
      (org-todo "SCHED")))

  (setq org-log-done t)
  (setq org-todo-repeat-to-state "REPEAT")

  ;; settings for org-agenda-view
  (setq org-agenda-span 'day)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-deadline-warning-days 2)

  (defcustom org-location-home-or-office "office" "office")
  (defun org-toggle-office ()
    (interactive)
    (setq org-location-home-or-office "office")
    (setq org-agenda-files
          (list (concat path-org-home "capture.org")
                (concat path-org-home "world.org")
                (concat path-org-work "work/")))
    (setq org-refile-files
          (append
           (list (concat path-org-home "capture.org")
                 (concat path-org-home "world.org")
                 (concat path-org-home "words.org")
                 (concat path-org-home "home/kimi.org"))
           (file-expand-wildcards (concat path-org-work "work/*.org"))))
    (message "Agenda is from office..."))

  (defun org-toggle-home ()
    (interactive)
    (setq org-location-home-or-office "home")
    (setq org-agenda-files
          (list (concat path-org-home "capture.org")
                (concat path-org-home "world.org")
                (concat path-org-home "home/")))
    (setq org-refile-files
          (append
           (list (concat path-org-home "capture.org")
                 (concat path-org-home "world.org"))
           (file-expand-wildcards (concat path-org-home "home/*.org"))))
    (message "Agenda is from home..."))

  (defun org-toggle-home-or-office()
    (interactive)
    (if (string= org-location-home-or-office "home")
        (org-toggle-office)
      (org-toggle-home)))

  (org-toggle-office)

  (setq org-agenda-custom-commands
        '(("t" todo "TODO|OPEN"
           ((org-agenda-sorting-strategy '(priority-down))))
          ;; all task should be done or doing
          ("d" todo "TODO|SCHED|OPEN|WAIT"
           ((org-agenda-sorting-strategy '(priority-down))))
          ("o" todo "OPEN"
           ((org-agenda-sorting-strategy '(priority-down))))
          ("w" todo "WAIT"
           ((org-agenda-sorting-strategy '(priority-down))))
          ("h" tags "habit/-ABORT-CLOSE"
           ((org-agenda-sorting-strategy '(todo-state-down))))
          ("c" tags "clock"
           ((org-agenda-sorting-strategy '(priority-down))))))

  (setq org-capture-templates
        '(("c" "Capture" entry (file+headline (concat path-org-home "capture.org") "Inbox")
           "* %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
          ("t" "TODO" entry (file+headline (concat path-org-home "capture.org") "Inbox")
           "* TODO %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
          ("o" "Action" entry (file+headline (concat path-org-home "capture.org") "Inbox")
           "* OPEN %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
          ("h" "Habit" entry (file+headline (concat path-org-home "world.org") "Habit")
           "* %?  :habit:\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")))
#+END_SRC
** orgmode for writing

#+BEGIN_SRC emacs-lisp

  ;(require 'ox-reveal)
  ;; load htmlize.el , which org-babel export syntax highlight source code need it
  (require 'htmlize)
  (require 'ox-md)

  ;; plant uml setting
  (require 'ob-plantuml)
  (setenv "GRAPHVIZ_DOT" "C:\\cygwin\\bin\\dot.exe")
  (setq org-plantuml-jar-path "C:\\kimikit\\plantuml\\plantuml.jar")

  (setq org-hide-leading-stars t)
  (setq org-footnote-auto-adjust t)
  (setq org-html-validation-link nil)
  (setq org-export-creator-string "")
  ;; no empty line after collapsed
  (setq org-cycle-separator-lines 0)
  ;; src block setting
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-export-with-sub-superscripts '{})
  (define-key org-mode-map (kbd "C-c C-x h") (lambda()
                                               (interactive)
                                               (insert "^{()}")
                                               (backward-char 2)))
  (define-key org-mode-map (kbd "C-c C-x l") (lambda()
                                               (interactive)
                                               (insert "_{}")
                                               (backward-char 1)))
  ;; insert time stamp even in chinese input method
  (define-key org-mode-map (kbd "C-c 。") 'org-time-stamp)
  ;; (setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
  ;;                                                        "xelatex -interaction nonstopmode %f"))
  ;;(setq org-latex-pdf-process '("pdflatex -interaction nonstopmode %f"))
  ;; active Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t)
     (python .t)
     (emacs-lisp . t)
     (sh . t)
     (dot . t)
     (ditaa . t)
     (js . t)
     (latex . t)
     (plantuml . t)
     (clojure .t)
     (org . t)
     (R . t)
     ))

  ;;============================================================================
  ;; org-reveal settings for html5 ppt
  ;;============================================================================
  (setq org-reveal-root "reveal.js")
  ;;(setq org-reveal-root "~/../Tools/reveal.js")
  ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/2.5.0/")
  (setq org-reveal-theme "simple")
  (setq org-reveal-width 1200)
  (setq org-reveal-height 750)
  (setq org-reveal-transition "fade")
  (setq org-reveal-hlevel 2)

  ;;============================================================================
  ;; new link to use everything/? to locate a file with unique ID
  ;;============================================================================
  (org-add-link-type "match" 'org-match-open)

  (defun org-match-open (path)
    "Visit the match search on PATH.
       PATH should be a topic that can be thrown at everything/?."
    (w32-shell-execute
     "open" "Everything" (concat "-search " path)))

  ;;============================================================================
  ;; org-mode-reftex-search
  ;;============================================================================
  (defun org-mode-reftex-search ()
   ;; jump to the notes for the paper pointed to at from reftex search
   (interactive)
   (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))

  (setq org-link-abbrev-alist
   '(("bib" . "~/reference/ref.bib::%s")
     ("notes" . "~/reference/notes.org::#%s")
     ("papers" . "~/reference/papers/%s.pdf")))

  (defun org-mode-reftex-setup ()
    (load-library "reftex")
    (and (buffer-file-name) (file-exists-p (buffer-file-name))
         (progn
      ;; enable auto-revert-mode to update reftex when bibtex file changes on disk
      (global-auto-revert-mode t)
      (reftex-parse-all)
      ;; add a custom reftex cite format to insert links
      (reftex-set-cite-format
        '((?b . "[[bib:%l][%l-bib]]")
          (?c . "\\cite{%l}")
          (?n . "[[notes:%l][%l-notes]]")
          (?p . "[[papers:%l][%l-paper]]")
          (?t . "%t")
          (?h . "** %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
    (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
    (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))




  (defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
                                        (paragraph contents info) activate)
    "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
    (let ((fixed-contents)
          (orig-contents (ad-get-arg 1))
          (reg-han "[[:multibyte:]]"))
      (setq fixed-contents (replace-regexp-in-string
                            (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")
                            "\\1\\2" orig-contents))
      (ad-set-arg 1 fixed-contents)
      ))

  ;;============================================================================
  ;; function redifinition
  ;;============================================================================
  (defun org-babel-result-to-file (result &optional description)
    "Convert RESULT into an `org-mode' link with optional DESCRIPTION.
  If the `default-directory' is different from the containing
  file's directory then expand relative links."
    (when (stringp result)
      (if (string= "svg" (file-name-extension result))
          (progn
            (with-temp-buffer
              (if (file-exists-p (concat result ".html"))
                  (delete-file (concat result ".html")))
              (rename-file result (concat result ".html"))
              (insert-file-contents (concat result ".html"))
              (message (concat result ".html"))
              (format "#+BEGIN_HTML
  <div style=\"text-align: center;\">
  %s
  </div>
  ,#+END_HTML"
                      (buffer-string)
                      )))
        (progn
          (format "[[file:%s]%s]"
                  (if (and default-directory
                           buffer-file-name
                           (not (string= (expand-file-name default-directory)
                                         (expand-file-name
                                          (file-name-directory buffer-file-name)))))
                      (expand-file-name result default-directory)
                    result)
                  (if description (concat "[" description "]") ""))))))

  ;; R-mode
  ;; Now we set up Emacs to find R
  ;; The path to R might need to be changed
  (setq-default inferior-R-program-name
                "C:/Program Files/R/R-3.1.1/bin/i386/Rterm.exe")
  ;(setenv "PATH" (concat "C:\\Program Files\\R\\R-2.15.3\\bin\\i386" ";"
  ;    (getenv "PATH")))
  ;;(setq-default inferior-R-program-name "C:/cygwin/lib/R/bin/exec/R.exe")

  ;; Configuring org mode to know about R and set some reasonable default behavior
  ;; (require 'ess-site)
  (require 'org-install)

  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-html-validation-link nil)
  (setq org-export-allow-BIND t)
  (setq org-support-shift-select t)
  (setq org-src-fontify-natively t)
  (setq org-startup-indented t)
#+END_SRC

* deft for note management

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :bind (("C-x d" . deft-find-file)
           ("C-x C-d" . deft))
    :config
    (setq deft-extensions '("txt" "tex" "org" "md"))
    (setq deft-directory (concat path-sync-home "notes/"))
    (setq deft-recursive t)
    (setq deft-file-naming-rules '((noslash . "_")))
    (setq deft-text-mode 'org-mode)
    (setq deft-use-filter-string-for-filename t)
    (setq deft-org-mode-title-prefix t)
    (setq deft-use-filename-as-title nil)
    (setq deft-strip-summary-regexp
          (concat "\\("
                  "[\n\t]" ;; blank
                  "\\|^#\\+[[:upper:]_]+:.*$" ;; org-mode metadata
                  "\\|^#\\+[[:alnum:]_]+:.*$" ;; org-mode metadata
                  "\\)"))

    ;;advise deft-open-file to replace spaces in file names with _
    (defun kimim/deft-open-file-advice (orig-fun &rest args)
      (setq name (pop args))
      (if (file-exists-p name)
          (progn
            (push name args)
            (apply orig-fun args))
        (progn
          (setq title (file-name-sans-extension
                       (file-name-nondirectory name)))
          (setq name (concat
                      (file-name-directory name)
                      (kimim/genfile-timestamp)
                      (downcase
                       (replace-regexp-in-string
                        " " "_" (file-name-nondirectory name)))
                      (if (not (file-name-extension name))
                          ".txt")))
          (push name args)
          (apply orig-fun args)
          (insert (concat "#+TITLE: " title "\n\n")))))

    (advice-add 'deft-open-file
                :around #'kimim/deft-open-file-advice)

    (defun kimim/deft-new-file-named-advice (orig-fun &rest args)
      (setq name (pop args))
      (setq title name)
      (setq name (concat
                  (kimim/genfile-timestamp)
                  (downcase
                   (replace-regexp-in-string
                    " " "_" name))))
      (push name args)
      (apply orig-fun args)
      (insert (concat "#+TITLE: " title "\n\n")))

    (advice-add 'deft-new-file-named
                :around #'kimim/deft-new-file-named-advice))
#+END_SRC
* jekyll
#+BEGIN_SRC emacs-lisp
  ;; ============================================================================
  ;; org for blog system
  ;; ============================================================================
  ;; file in jekyll base will also be uploaded to github
  (setq path-jekyll-base "~/kimi.im/_notes/_posts")
  ;; in order to sync draft with cloud sync driver
  (setq path-jekyll-draft (concat path-sync-home "kimim/_draft/"))
  ;; file in jekyll base will also be uploaded to github

  (setq org-publish-project-alist
        '(
          ("org-blog-content"
           ;; Path to your org files.
           :base-directory "~/kimi.im/_notes"
           :base-extension "org"
           ;; Path to your jekyll project.
           :publishing-directory "~/kimi.im/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :section-numbers t
           :html-extension "html"
           :body-only t ;; Only export section between <body></body>
           :with-toc nil
           )
          ("org-blog-static"
           :base-directory "~/kimi.im/_notes/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php\\|svg"
           :publishing-directory "~/kimi.im/"
           :recursive t
           :publishing-function org-publish-attachment)
          ("blog" :components ("org-blog-content" "org-blog-static"))
          ))

  (define-key org-mode-map (kbd "C-c p") (lambda ()
                                           (interactive)
                                           (org-publish-current-file)
                                           (with-temp-buffer(dired "~/kimi.im/")
                                                            (kimim/cyg)
                                                            (kill-buffer))))
  (defun jekyll-post ()
    "Post current buffer to kimi.im"
    (interactive)
    ;; get categories
    ;; get buffer file name
    (let ((category (jekyll-get-category))
          (filename (file-name-nondirectory buffer-file-name))
          newfilename)
          ;; append date to the beginning of the file name
      (setq newfilename (concat path-jekyll-base "/" category "/" (format-time-string "%Y-%m-%d-") filename))
      ;; mv the file to the categories folder
      (rename-file buffer-file-name newfilename)
      (switch-to-buffer (find-file-noselect newfilename))
  ;;    (color-theme-initialize)
  ;;    (color-theme-jekyll)
      ;; execute org-publish-current-file
      (org-publish-current-file)
  ;;    (color-theme-eclipse)
      ;; go to kimi.im folder and execute cyg command
      (with-temp-buffer(dired "~/kimi.im/")
                       (kimim/cyg)
                       (kill-buffer))
      ))

  (defun jekyll-tag ()
  "add new tags"
    (interactive)
    ;find "tags: [" and replace with "tags: [new-tag, "
    (goto-char (point-min))
  ;;  (search-forward "tags: [")
    (re-search-forward "tags: \\[" nil t)
    (insert (ido-completing-read "tags: " '(
                                            "emacs" "org-mode"
                                            "Deutsch" "Français" "English"
                                            "Windows" "RTOS" "industry"
                                            "travel"  "street-shots" "photography"
                                            "leadership"
                                            )))
    (insert ", ")
    )

  (defun jekyll-header()
    "Insert jekyll post headers,
  catergories and tags are generated from exisiting posts"
    (interactive)
    (insert "#+BEGIN_HTML\n---\nlayout: post\ntitle: ")
    (insert (read-string "Title: "))
    (insert "\ncategories: [")
    (insert (ido-completing-read "categories: " '(
                                                  "technology"
                                                  "productivity" "leadership"
                                                  "psychology" "language"
                                                  "education" "photography"
                                                  )))
    (insert "]")
    (insert "\ntags: [")
    (insert (ido-completing-read "tags: " '("emacs" "org-mode" "c prog"
                                            "Deutsch" "Français" "English"
                                            "management")))
    (insert "]\n---\n#+END_HTML\n\n")
    )


  (defun jekyll ()
    (interactive)
    (find-file (concat path-jekyll-draft "/" (read-string "Filename: ") ".org"))
    (jekyll-header)
    (save-buffer)
    )

  (defun jekyll-get-category ()
    (interactive)
    (goto-char (point-min))
    (re-search-forward "^categories: \\[\\([a-z-]*\\)\\]$" nil t)
    (match-string 1)
    )

  (defun jekyll-test ()
    (interactive)
    (color-theme-initialize)
    (color-theme-jekyll)
    (org-open-file (org-html-export-to-html nil)))


#+END_SRC
* erc and gnus

#+BEGIN_SRC emacs-lisp
  ;; erc settings
  (require 'erc-join)
  (erc-autojoin-mode 1)
  (erc-autojoin-enable)
  (setq erc-default-server "irc.freenode.net")
  (setq erc-autojoin-channels-alist
            '(("irc.freenode.net" "#emacs")))
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))

  ;; gnus settings
  (setq message-directory "~/Gnus/Mail/")
  (setq gnus-directory "~/Gnus/News/")
  (setq nnfolder-directory "~/Gnus/Mail/Archive")

  (setq gnus-agent t)
  (setq gnus-agent-expire-days 90)
  ; prompt for how many articles only for larger than 1000 articles
  (setq gnus-large-newsgroup 1000)
  (setq gnus-use-cache t)
  (setq gnus-fetch-old-headers nil) ; show previous messages in a thread
  (setq gnus-thread-indent-level 1)
  (add-hook 'gnus-summary-prepare-hook 'gnus-summary-hide-all-threads)
  (setq gnus-select-method '(nnml ""))
  (setq gnus-secondary-select-methods nil)
  (add-to-list 'gnus-secondary-select-methods '(nntp "news.gnus.org"))
  (add-to-list 'gnus-secondary-select-methods '(nntp "news.gmane.org"))
  (add-to-list 'gnus-secondary-select-methods '(nnml ""))

#+END_SRC

* Key Binding

#+BEGIN_SRC emacs-lisp
  (setq ivy-use-virtual-buffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c r") 'kimim/rename-file-and-buffer)
  ;; (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  ;; (global-set-key (kbd "<f1> l") 'counsel-load-library)
  ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;==============================================================================
  ;; Global Key Settings
  ;;==============================================================================
  (require 'hideshow) ;; hs-toggle-hiding
  (global-set-key [f1] 'delete-other-windows)
  (global-set-key (kbd "C-<f1>") 'nuke-other-buffers)
  (global-set-key [f2] 'other-window)
  (global-set-key [f5] (lambda() (interactive)
                         (switch-to-buffer "*scratch*") (delete-other-windows)))
  (global-set-key [f6] (lambda() (interactive)
                         (if (not (boundp 'ecb-minor-mode))
                             (ecb-activate)
                           (if ecb-minor-mode
                               (ecb-deactivate)
                             (ecb-activate)))))
  (global-set-key [f7] 'kimim/toggle-highlight-tap)
  (global-set-key [f8] (lambda() (interactive) (list-charset-chars 'ascii)))
  (global-set-key [f9] 'kimim/cyg)
  (global-set-key (kbd "S-<f9>") 'kimim/cmd)
  (global-set-key [f10] 'kimim/dc)
  (global-set-key (kbd "C-<f11>") 'compile)
  (global-set-key [f12] 'org-toggle-home-or-office)

  (global-set-key (kbd "<M-SPC>") (lambda () (interactive)
                                    (insert ?_)))
  ;;(global-set-key "\C-cs" 'helm-swoop)
  (global-set-key "\C-x\C-b" 'ibuffer-other-window)
  (global-set-key "\C-h" 'delete-backward-char)
  (global-set-key "\M-h" 'backward-kill-word)
  (global-set-key (kbd "C-?") 'help)
  (global-set-key "\M-?" 'mark-paragraph)
  (global-set-key "\C-x\C-j" 'dired-jump)
  (global-set-key "\C-xj" 'bookmark-jump)
  (global-set-key "\C-xk" 'kill-this-buffer)
  (global-set-key "\C-x\C-v" 'view-file-other-window)
  (global-set-key "\C-c\C-o" 'occur)
  (global-set-key "\C-z" 'set-mark-command)
  (global-set-key "\M-o" 'other-window)
  (global-set-key "\M-n" 'next-error)
  (global-set-key "\M-p" 'previous-error)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (global-set-key "\C-c=" 'get-file-line)
  (global-set-key "\C-cd" 'kimim/lookinsight)

  (define-key hs-minor-mode-map "\C-c/" 'hs-toggle-hiding)
  (define-key global-map "\M-*" 'pop-tag-mark)
  (global-set-key "\C-c\C-x\C-l" 'org-clock-in-last)
  (global-set-key "\C-c\C-x\C-i" 'org-clock-in)
  (global-set-key "\C-c\C-x\C-o" 'org-clock-out)
  (global-set-key [?\C-c ?\C-/] 'comment-or-uncomment-region)
  ;;(define-key global-map "\C-cd" 'kimim/look-from-mydict)
  (define-key global-map (kbd "C-`") 'ace-jump-mode)
  (define-key global-map (kbd "<apps>") 'ace-jump-mode)
  (define-key global-map (kbd "C-\"") 'ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (define-key global-map (kbd "RET") 'newline-and-indent)
  (define-key global-map (kbd "<M-S-mouse-1>") 'pop-tag-mark)
  ;; key bindings
  (when (eq system-type 'darwin) ;; mac specific settings
    (setq mac-option-modifier 'alt)
    (setq mac-command-modifier 'meta)
    ;; sets fn-delete to be right-delete
    (global-set-key [kp-delete] 'delete-char))

  (global-set-key "\C-xmc" 'calculator)
  ;; ;; edit highlighted symbol
  (global-set-key "\C-xme" 'ahs-edit-mode)
  ;; ;; Make a new frame
  (global-set-key "\C-xmf" 'make-frame)
  ;; ;; Make a new frame
  (global-set-key "\C-xmp" 'helm-global-mark-ring)
  ;; ;; 查看光标处的单词的 man page
  (global-set-key "\C-xmm" 'man-follow)
  ;; ;;查看 kill-ring，都曾经 kill 过哪些文本
  (global-set-key "\C-xml" 'browse-kill-ring)

  ;; C-x r j ?x 打開常用文件
  (set-register ?e '(file . "~/kimim-emacs/init.el"))
  (set-register ?o '(file . "~/kimim-emacs/README.org"))

#+END_SRC
* Finalization

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/work.el")
  (load-file "~/.emacs.d/home.el")
#+END_SRC

* Footnotes

[fn:1] http://www.literateprogramming.com/

[fn:2] http://cygwin.com/

[fn:3] http://msys2.github.io/

[fn:4] https://cygwin.com/install.html

[fn:5] https://cygwin.com/faq/faq.html#faq.setup.cli

[fn:6] http://brew.sh/

[fn:7] https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html

[fn:8] https://github.com/ggreer/the_silver_searcher#installation

[fn:9] https://github.com/Wilfred/ag.el

[fn:10] http://www.voidtools.com

[fn:11] http://www.voidtools.com/es.zip

[fn:12] https://github.com/jorgenschaefer/elpy
