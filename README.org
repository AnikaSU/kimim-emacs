#+TITLE: README
#+LATEX_CLASS: article
#+OPTIONS: toc:nil
#+STARTUP: showall

[[https://travis-ci.org/kimim/kimim-emacs][https://travis-ci.org/kimim/kimim-emacs.svg]]

* Introduction

This Emacs configuration file is written with literate programming method.[fn:1]
The elisp file is extracted from this file, and then compiled to binary =elc=
file for fast loading in the future.

To use of this configuration, you can follow below shell commands to prepare the
emacs configuration files and folders:

- back up =.emacs= file and =.emacs.d= folder, if you have your own emacs
  configuration files
- clone =kimim-emacs= to home folder =~=
- copy new =.emacs= file from =kimim-emacs= to =~=

#+begin_src shell
  cd ~ && mv .emacs .emacs-backup && mv .emacs.d .emacs.d-backup && \
  git clone https://github.com/kimim/kimim-emacs && \
  cp kimim-emacs/.emacs ~
#+end_src

This emacs setting uses several path to keep different informations, you should
specify in =~/.emacs=:

- =kimim/path-sync= is the root of sync folder
- =kimim/path-emacs-sync= to sync emacs settings
- =kimim/path-org= to sync todo list and journals
- =kimim/path-notes= to sync notes
- =kimim/path-ref= to keep reference documents
- =kimim/path-kimim-emacs= where kimim-emacs you clone to

If these pathes are not set, emacs will report errors:

#+begin_src emacs-lisp
  (if (not (boundp 'kimim/path-sync))
      (error "please set kimim/path-sync in ~/.emacs"))
  (if (not (boundp 'kimim/path-emacs-sync))
      (error "please set kimim/path-emacs-sync in ~/.emacs"))
  (if (not (boundp 'kimim/path-org))
      (error "please set kimim/path-org in ~/.emacs"))
  (if (not (boundp 'kimim/path-notes))
      (error "please set kimim/path-notes in ~/.emacs"))
  (if (not (boundp 'kimim/path-ref))
      (error "please set kimim/path-ref in ~/.emacs"))
  (if (not (boundp 'kimim/path-kimim-emacs))
      (error "please set kimim/path-kimim-emacs in ~/.emacs"))
#+end_src

Then execute =emacs= to bootstrap itself.

* Preparation
** Windows
*** HOME environment

First of all, You should specify HOME by adding HOME system environment as
=C:\Users\kimim\home=, for example.

*** Cygwin

Cygwin project[fn:2] is required for this configuration in Windows, which is a
large collection of GNU and Open Source tools provide functionality similar to a
Linux distribution on Windows.

The explanation from Cygwin is that because Windows do not allow overwriting of
in-use executable, so installing a new version of Cygwin DLL while a packager is
using the DLL is problematic.[fn:3] But I guess MSYS2 should have the same
issue.

However Cygwin standalone package management tool =setup-x86.exe= or
=setup-x86_64.exe= accept command-line arguments [fn:4], so I will try to use
the command line option to install packages as many as possible.

With =kimikit=, it is quite easy to upgrade cygwin setup tool:

#+begin_src shell
$ cd ~/kimikit/install
$ make cyg
wget https://cygwin.com/setup-x86_64.exe
--2017-01-04 16:50:29--  https://cygwin.com/setup-x86_64.exe
Length: 916499 (895K) [application/octet-stream]
Saving to: ‘setup-x86_64.exe’
...
mv setup-x86_64.exe ../bin/cygup.exe
#+end_src

** Mac OS

For Apple macOS, most UNIX tools are installed already. Homebrew [fn:5] is used
to install additional application if it is missing in macOS.

Install Homebrew:

#+begin_src shell
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+end_src

** Linux

Most of the external tools I used in this Emacs configuration should be easily
installed or already available in main Linux distributions.

* Emacs Frame

Set look & feel before all other settings.

** Menu Bar and Tool Bar

Show menu bar only in macOS desktop environment, because the system preserves
menu bar for every applications.

#+begin_src emacs-lisp
  (cond
   ((eq window-system 'w32)
    ;; Enable copy and paste in Win32
    (setq select-enable-clipboard t)
    (menu-bar-mode 0)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
   ((eq window-system 'ns)
    (menu-bar-mode 1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
   ((eq window-system 'x)
    (menu-bar-mode 0)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
   ((eq window-system nil)
    (menu-bar-mode 0)))
#+end_src

** Font and Frame Size

Set default font and frame size for both Windows and macOS. You should
=set-default-font= first, otherwise, the frame height and width will be
calculated with original default font height and width: =frame-char-height= and
=frame-char-width=.

Because Incosolata font is really great for programming, and Microsoft Yahei is
nice font to view Chinese characters, you'd better to install it from:
https://github.com/loseblue/yaheiInconsolata.ttf/raw/master/yaheiInconsolata.ttf

#+begin_src emacs-lisp
  ;;set default font
  (cond
   ((eq window-system 'w32)
    (cond
     ((< (display-pixel-width) 1400)
      (set-fontset-font
       "fontset-default"
       'unicode-bmp (font-spec :family "YaheiInconsolata"))
      (set-frame-font "Inconsolata-14"))
     ((> (display-pixel-width) 1400)
      (set-fontset-font
       "fontset-default"
       'unicode-bmp (font-spec :family "YaheiInconsolata"))
      (set-frame-font "Inconsolata-14"))))
   ((eq window-system 'ns)
    (set-fontset-font
     "fontset-default"
     'unicode-bmp (font-spec :family "YaheiInconsolata"))
    (set-frame-font "Inconsolata-18")))

  ;; set default frame dimension
  (if window-system
      (progn
        ;; top, left ... must be integer
        (add-to-list 'default-frame-alist
                     (cons 'top  (/ (x-display-pixel-height) 10)))
        (add-to-list 'default-frame-alist
                     (cons 'left (/ (x-display-pixel-width) 10)))
        (add-to-list 'default-frame-alist
                     (cons 'height (/ (* 4 (x-display-pixel-height))
                                      (* 5 (frame-char-height)))))
        (add-to-list 'default-frame-alist
                     (cons 'width (/ (* 4 (x-display-pixel-width))
                                     (* 5 (frame-char-width)))))))
#+end_src

* Environment

** PATH, exec-path and Info

Environment variable =PATH= is the the searching path of executables by the
shell running in Emacs while =exec-path= is the search path of Emacs itself. So
we should set both of them to almost the same paths.

As I have a Windows box in the office, and a Apple macOS at home, so I need to
specify these variables in different way.

#+begin_src emacs-lisp
  (cond
   ((eq system-type 'windows-nt)
    (setq kimim/path-root "C:/msys2")
    (add-to-list 'exec-path
                 (concat kimim/path-kimikit "emacs/bin/"))
    (add-to-list 'exec-path "C:/CTEX/MiKTeX/miktex/bin/"))
   ((eq system-type 'cygwin)
    (setq kimim/path-root "/")
    (add-to-list 'exec-path "/cygdrive/C/CTEX/MiKTeX/miktex/bin/"))
   ((eq system-type 'gnu/linux)
    (setq kimim/path-root "/"))
   ((eq system-type 'darwin)
    (setq kimim/path-root "/")
    (add-to-list 'exec-path "/Library/TeX/texbin")
    (add-to-list 'exec-path "/Library/Frameworks/Python.framework/Versions/3.5/bin")))

  (add-to-list 'exec-path (concat kimim/path-root "bin"))
  (add-to-list 'exec-path (concat kimim/path-root "usr/bin"))
  (add-to-list 'exec-path (concat kimim/path-root "usr/local/bin"))
#+end_src

Then append exec-path to PATH:

#+begin_src emacs-lisp
  (setenv "PATH"
          (concat
           (mapconcat #'identity exec-path path-separator)
           (getenv "PATH")))
#+end_src

** Custom File

#+begin_src emacs-lisp
  (if (not (boundp 'kimim/file-custom))
      (defvar kimim/file-custom
        (concat kimim/path-emacs-sync "custom.el")))
  (if (not (file-exists-p kimim/file-custom))
      (write-region "" nil kimim/file-custom))
  (setq custom-file kimim/file-custom)
  (load-file custom-file)
#+end_src

** Language

#+begin_src emacs-lisp
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  ;; remove svn log LC_TYPE not defined warning.
  (setenv "LC_CTYPE" "en_US")
  (set-locale-environment "English")
  (set-language-environment 'English)
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (cond
   ((eq system-type 'windows-nt)
    (set-clipboard-coding-system 'utf-16le))
   ((eq system-type 'cygwin)
    (set-clipboard-coding-system 'utf-16le))
   ((eq system-type 'gnu/linux)
    (set-clipboard-coding-system 'utf-8)))
#+end_src

** global key map

Define new command prefix for keys such as "C-x m f", "C-x m v".

#+begin_src emacs-lisp
  (define-prefix-command 'ctl-x-m-map)
  (global-set-key "\C-xm" 'ctl-x-m-map)
#+end_src

* Emacs in Terminal

** cmd.exe

=emacs -nw= works perfect in Windows cmd.exe as terminal mode!

** mintty

nt-emacs running in mintty will report error such as:

#+begin_src shell
$ /cygdrive/c/kimikit/emacs/bin/emacs -nw
emacs: standard input is not a tty
#+end_src

Because the native win32 emacs wants to talk to a Windows console window, not to
an actual tty -- the error message is misleading here.[fn:6]

In order to use emacs also in mintty, please install emacs-nox with cygwin-setup.

* Package

=package= [fn:7] is the modern =elisp= package management system, which let you
easily download and install packages that implement additional features. Each
package is a separate Emacs Lisp program, sometimes including other components
such as an Info manual.

All the extensions used in this file are installed and managed by =package=.

Here I use =use-package= to defer the package loading and even installation,
When you use the =:commands= keyword, it creates autoloads for those commands
and defers loading of the module until they are used.

#+begin_src emacs-lisp
  (setq package-user-dir "~/.emacs.d/elpa")
  (setq package-archives
        '(("gnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
          ("sunrise" . "http://elpa.emacs-china.org/sunrise-commander/")))
  (mapc
   (lambda (package)
     (unless (package-installed-p package)
       (progn (message "installing %s" package)
              (package-refresh-contents)
              (package-install package))))
   '(use-package diminish bind-key))

  (require 'use-package)
  (require 'diminish)
  (require 'bind-key)
  ;; install package if missing
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)
  (setq use-package-verbose t)
#+end_src

* Title and Header

#+begin_src emacs-lisp
  (setq frame-title-format
        '("" invocation-name ": "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  (use-package path-headerline-mode
    :commands (path-headerline-mode)
    :config
    ;; only display headerline for real files
    (defun kimim/ph--display-header (orig-fun &rest args)
      (if (buffer-file-name)
          (apply orig-fun args)
        (setq header-line-format nil)))
    (advice-add 'ph--display-header :around #'kimim/ph--display-header))
#+end_src

* Mode Line

Display time and (line, column) numbers in mode line.

#+begin_src emacs-lisp
  (use-package time
    :defer 3
    :init
    (setq display-time-24hr-format t)
    (setq display-time-day-and-date t)
    (setq display-time-interval 10)
    :config
    (display-time-mode t))

  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

* Color Theme

Use self defined color theme 1 seconds after init.

#+begin_src emacs-lisp
  (setq font-lock-maximum-decoration t)
  (setq font-lock-global-modes '(not shell-mode text-mode))
  (setq font-lock-verbose t)
  (global-font-lock-mode 1)
#+end_src

#+begin_src emacs-lisp
  (use-package kimim-theme
    :ensure nil
    :defer 0
    :load-path "~/kimim-emacs/site-lisp/")
#+end_src

* Highlight

#+begin_src emacs-lisp
  ;; highlight current line
  (use-package hl-line
    :defer 5
    :config
    (global-hl-line-mode 1))

  ;; highlight current symbol
  (use-package auto-highlight-symbol
    :diminish auto-highlight-symbol-mode
    :bind ("C-x m e" . ahs-edit-mode)
    :config
    (global-auto-highlight-symbol-mode t))
#+end_src

* Dealing with Unicode fonts

#+begin_src emacs-lisp
  (use-package unicode-fonts
    :defer 10
    :config
    (defadvice unicode-fonts-setup (after
                                    unicode-fonts-setup-advice
                                    (&optional fontset-names regenerate) activate)
      (interactive "p")
      (set-fontset-font
       "fontset-default"
       'cjk-misc (font-spec :family "YaheiInconsolata")))

    (unicode-fonts-setup))
#+end_src

* Other Visual Element

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)          ; 不顯示開始畫面
  (setq initial-scratch-message nil)        ; scratch 默認為空
  (setq visible-bell t)
  (setq ring-bell-function #'ignore)
  (fset 'yes-or-no-p 'y-or-n-p)
  (show-paren-mode 1)                       ; 高亮显示匹配的括号
  (setq blink-cursor-blinks 3)              ; 光标闪烁三次后不闪烁
  (blink-cursor-mode 1)                     ; 光标不闪烁
  (tooltip-mode nil)
#+end_src

* Help
** Info

#+begin_src emacs-lisp
  (use-package info
    :commands (info)
    :config
    (add-to-list 'Info-additional-directory-list
                 (concat kimim/path-root "usr/share/info"))
    (add-to-list 'Info-additional-directory-list
                 (concat kimim/path-root "usr/local/share/info"))
    ;; additional info, collected from internet
    (add-to-list 'Info-additional-directory-list
                 "~/info"))
#+end_src

** tldr

TL;DR stands for "Too Long; Didn't Read"[fn:8]. =tldr.el= [fn:9] is the Emacs
client.

#+begin_src emacs-lisp
  (use-package tldr
    )
#+end_src

* Controlling
** Window and Frame

#+begin_src emacs-lisp
  (use-package winner
    ;; restore windows configuration, built-in package
    :commands winner-mode
    :config
    (winner-mode t))

  (use-package window-numbering
    :commands window-numbering-mode
    :config
    (window-numbering-mode 1))

  (bind-key "C-x m w" 'make-frame)
  ;; donno why, w/o following, new frame still has scroll-bar
  (if (not (eq window-system nil))
      (scroll-bar-mode -1))
#+end_src

scroll slowly with touchpad.

#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(0.01))
#+end_src

** Command

#+begin_src emacs-lisp
  ;; https://github.com/justbur/emacs-which-key
  (use-package which-key
    :diminish which-key-mode
    :config
    ;; use minibuffer as the popup type, otherwise conflict in ecb mode
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode 1))

  ;; smex will list the recent function on top of the cmd list
  (use-package smex
    :commands (smex)
    :config
    (smex-initialize))

  (use-package counsel
    :defer 3
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-x m f" . counsel-describe-function)
     ("C-x m v" . counsel-describe-variable)
     ("C-x m l" . counsel-load-library)
     ("C-x m i" . counsel-info-lookup-symbol)
     ("C-x m j" . counsel-bookmark)
     ("C-x m r" . counsel-recentf)
     ("C-x m u" . counsel-unicode-char)
     ("C-c j" . counsel-git-grep)
     ("C-c g" . counsel-grep)
     ("C-c k" . counsel-ag)
     ("C-c p" . counsel-pt)
     ("C-x l" . counsel-locate)
     :map read-expression-map
     ("C-r" . counsel-minibuffer-history))
    :config
    (use-package ivy)
    (use-package smex)
    (add-hook 'counsel-grep-post-action-hook 'recenter)
    (ivy-mode 1))
#+end_src

** Key Frequency

#+begin_src emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-mode)
    (keyfreq-autosave-mode)
    (setq keyfreq-file "~/.emacs.d/emacs.keyfreq"))
#+end_src

* Editing
** General

#+begin_src emacs-lisp
  (setq inhibit-eol-conversion nil)       ; 不要轉換 end-of-line style
  ;; fill-column is a buffer-local variable, use setq-default to change it globally
  (setq-default fill-column 80)
  (toggle-word-wrap -1)
  (use-package drag-stuff
    :diminish drag-stuff-mode
    :config
    (drag-stuff-global-mode 1))           ; use Alt-up/down to drag line or region
  ;;(diminish 'drag-stuff-mode)
  (delete-selection-mode 1)               ; 輸入的文字覆蓋選中的文字
  (setq kill-ring-max 200)                ; kill-ring 最多的记录个数
  (setq kill-whole-line t)                ; 在行首 C-k 时，同时删除该行。
  (setq require-final-newline t)          ; 存盘的时候，要求最后一个字符时换行符
  (setq-default tab-width 4)              ; 用 space 替换 tab，tab 长度为 4
  (setq tab-stop-list
        (number-sequence 4 120 4))        ; 每次 tab 空格數
  (setq track-eol t)                      ; 当光标在行尾上下移动的时候保持在行尾
  ;; 对于每个备份文件，保留最原始的两个版本和最新的五个版本。并且备份的时
  ;; 候，备份文件是复本，而不是原件。
  (setq backup-directory-alist '(("." . "~/temp")))
  (setq version-control t)
  (setq kept-old-versions 10)
  (setq kept-new-versions 20)
  (setq delete-old-versions t)
  (setq backup-by-copying t)

  (setq auto-save-interval 50)
  (setq auto-save-timeout 60)
  (setq auto-save-default nil)           ; auto-save of every file-visiting buffer
  (setq auto-save-list-file-prefix "~/temp/auto-saves-")
  (setq auto-save-file-name-transforms `((".*"  , "~/temp/")))
  (setq create-lockfiles nil)
  (setq time-stamp-active t)
  (setq time-stamp-warn-inactive t)
  (setq time-stamp-format "%:y-%02m-%02d %3a %02H:%02M:%02S kimi")
  (add-hook 'write-file-hooks 'time-stamp); 自动更新 time-stamp

  (defun kimim/save-buffer-advice (orig-fun &rest arg)
    (delete-trailing-whitespace)
    (apply orig-fun arg))

  (advice-add 'save-buffer :around #'kimim/save-buffer-advice)

  (setq ispell-program-name "aspell")
  (diminish 'visual-line-mode)
  (add-hook 'text-mode-hook
            (lambda ()
              (when (derived-mode-p 'org-mode 'markdown-mode 'text-mode)
                (visual-line-mode))))
  (setq-default indent-tabs-mode nil)

  ;; 当有两个文件名相同的缓冲时，使用前缀的目录名做 buffer 名字
  (setq uniquify-buffer-name-style 'forward)

  ;; 当使用 M-x COMMAND 后，显示该 COMMAND 绑定的键 5 秒鐘時間
  (setq suggest-key-bindings 5)


  (setq auto-mode-alist
        (append '(("\\.css\\'" . css-mode)
                  ("\\.S\\'" . asm-mode)
                  ("\\.md\\'" . markdown-mode)
                  ("\\.markdown\\'" . markdown-mode)
                  ("\\.svg\\'" . html-mode)
                  ("\\.pas\\'" . delphi-mode)
                  ("\\.txt\\'" . org-mode)
                  )
                auto-mode-alist))

  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name "saveplace" "~"))
#+end_src

** visual-fille-mode

#+begin_src emacs-lisp
  (use-package visual-fill-column)
  (setq visual-fill-column-width 80)
  (setq visual-fill-column-center-text t)
#+end_src

** pangu-spacing

#+begin_src emacs-lisp
  (use-package pangu-spacing
    :diminish pangu-spacing-mode
    :config
    ;; (global-pangu-spacing-mode 1)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (set (make-local-variable 'pangu-spacing-real-insert-separtor) t))))
#+end_src

** undo-tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t))
#+end_src

* File Management
** dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :bind
    (("C-x C-j" . dired-jump)
     :map dired-mode-map
     ("<left>" . dired-up-directory)
     ("<right>" . dired-find-file)
     ("o" . kimim/open-in-external-app)
     )
    :config
    (require 'dired-x)
    (add-hook 'dired-mode-hook
              (lambda ()
                (turn-on-gnus-dired-mode)
                ;; Set dired-x buffer-local variables here.  For example:
                (dired-omit-mode 1)
                (setq dired-omit-localp t)
                (setq dired-omit-files
                      (concat "|NTUSER\\|ntuser\\"
                              "|Cookies\\|AppData\\"
                              "|Contacts\\|Links\\"
                              "|Intel\\|NetHood\\"
                              "|PrintHood\\|Recent\\"
                              "|Start\\|SendTo\\"
                              "|^\\.DS_Store\\"
                              "|qms-bmh"))))
    ;; Dired buffer 中列出文件时传递给 ls 的参数。加个 "l" 可以使大写的文
    ;; 件名在顶部，临时的改变可以用 C-u s。
    (setq dired-listing-switches "-Avhlgo --group-directories-first")
    (if (eq system-type 'darwin)
        (setq dired-listing-switches "-Avhlgo"))

    ;; 复制(删除)目录的时，第归的复制(删除)其中的子目录。
    (setq dired-recursive-copies t)
    (setq dired-recursive-deletes t)

    (defadvice dired-next-line (after dired-next-line-advice (arg) activate)
      "Move down lines then position at filename, advice"
      (interactive "p")
      (if (eobp)
          (progn
            (goto-char (point-min))
            (forward-line 2)
            (dired-move-to-filename))))

    (defadvice dired-previous-line (before dired-previous-line-advice (arg) activate)
      "Move up lines then position at filename, advice"
      (interactive "p")
      (if (= 3 (line-number-at-pos))
          (goto-char (point-max)))))

  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer-other-window)
    :config
    (defun ibuffer-visit-buffer-other-window (&optional noselect)
      "Visit the buffer on this line in another window."
      (interactive)
      (let ((buf (ibuffer-current-buffer t)))
        (bury-buffer (current-buffer))
        (if noselect
            (let ((curwin (selected-window)))
              (pop-to-buffer buf)
              (select-window curwin))
          (switch-to-buffer-other-window buf)
          (kill-buffer-and-its-windows "*Ibuffer*")
          )))

    ;; Use human readable Size column instead of original one
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

    ;; Modify the default ibuffer-formats
    (setq ibuffer-formats
          '((mark modified read-only " "
                  (name 32 32 :left :elide)
                  " "
                  (size-h 9 -1 :right)
                  " "
                  (mode 14 14 :left :elide)
                  " "
                  filename-and-process))))
#+end_src

** sunrise commander

The Sunrise Commmander is a powerful and versatile double-pane file manager for
GNU Emacs. It's built atop of Dired and takes advantage of most of its
functions, but also provides many handy features of its own.

#+begin_src emacs-lisp
  (use-package sunrise-commander
    :bind (("<f10>" . sunrise)
           :map sr-mode-map
           ("o" . kimim/open-in-external-app)
           ("<left>" . sr-dired-prev-subdir)
           ("<right>" . sr-advertised-find-file))
    :config
    (setq sr-listing-switches "-Avhlgo --group-directories-first")
    (if (eq system-type 'darwin)
        (setq sr-listing-switches "-Avhlgo")))
#+end_src

* Navigation

#+begin_src emacs-lisp
  ;; bookmark setting
  (setq bookmark-default-file "~/.emacs.d/emacs.bmk")
  ;; 每当设置书签的时候都保存书签文件，否则只在你退出 Emacs 时保存
  (setq bookmark-save-flag 1)

  (use-package bm
    :bind (("C-x m t" . bm-toggle)
           ("C-x m s" . bm-show-all)))

  (use-package ace-jump-mode
    :bind
    ("C-x j" . ace-jump-mode)
    ("M-g j" . ace-jump-mode)
    ("C-`" . ace-jump-mode)
    ("<apps>" . ace-jump-mode))

  (use-package ace-window
    :bind
    ("C-\"" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

* Search and Finding
** swiper replaces isearch

#+begin_src emacs-lisp
  (use-package swiper
    :init (setq swiper-action-recenter t)
    :bind
    ("C-s" . swiper))
#+end_src

** ag: the silver searcher

=ag= [fn:10] is really a very fast grep tool, and =ag.el= [fn:11] provide the
Emacs interface to =ag=:

#+begin_src emacs-lisp
  (use-package ag
    :bind
    ("C-x g" . ag-project)
    :config
    (setq ag-highlight-search t))
#+end_src

** pt: the platium searcher

Because =counsel-ag= is not working in my Win64 machine, so I switch to =pt=
now.

Download =pt= from
https://github.com/monochromegane/the_platinum_searcher/releases, and it works
out of the box.

** imenu & imenu-anywhere

=imenu= is used to navigate the function definitions in current buffer.

#+begin_src emacs-lisp
  (use-package imenu
    :bind ("C-c C-i" . imenu)
    :config
    (advice-add 'imenu-default-goto-function
                :around
                #'kimim/imenu-default-goto-function-advice))

  (use-package imenu-anywhere
    :bind ("C-c i" . imenu-anywhere))
#+end_src

* auto-complete
** abbrev

#+begin_src emacs-lisp
(diminish 'abbrev-mode)
#+end_src

** ivy-mode

#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :bind ("<f6>" . ivy-resume)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-wrap nil)
    (ivy-mode 1))
#+end_src

** auto parenthesis

#+begin_src emacs-lisp
  ;; add pair parenthis and quote automatically
  (use-package autopair
    :diminish autopair-mode
    :config
    (autopair-global-mode 1))
#+end_src

** yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 10
    :config
    (add-to-list
     'yas-snippet-dirs (concat kimim/path-emacs-sync "snippets"))
    (yas-global-mode 1)
    (use-package company)
    (eval-after-load 'company
      '(add-to-list  'company-backends 'company-yasnippet))
    (use-package warnings)
    (setq warning-suppress-types '((yasnippet backquote-change))))
#+end_src

In order to remove following warning:

#+BEGIN_QUOTE
Warning (yasnippet): ‘xxx’ modified buffer in a backquote expression.
  To hide this warning, add (yasnippet backquote-change) to ‘warning-suppress-types’.
#+END_QUOTE

** company dict

#+begin_src emacs-lisp
  (use-package company-dict
    :config
    ;; Where to look for dictionary files
    (setq company-dict-dir (concat kimim/path-emacs-sync "dict"))
    ;; Optional: if you want it available everywhere
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-dict)))
#+end_src

** company mode

English word list fetch from https://github.com/dwyl/english-words

#+begin_src emacs-lisp
  (use-package company-try-hard
    :bind ("C-\\" . company-try-hard))

  (use-package company
    :diminish company-mode
    :config
    (use-package company-try-hard)
    (use-package company-dict)
    (global-company-mode t)
    ;; macOS will use system dict file directly
    (cond ((eq system-type 'windows-nt)
           (setq ispell-alternate-dictionary "~/.emacs.d/dict/words3.txt")))
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-ispell)))
#+end_src

** company statistics

Sort candidates using completion history.

#+begin_src emacs-lisp
  (use-package company-statistics
    :config
    (company-statistics-mode 1))
#+end_src

* Programming General

** Compiling

#+begin_src emacs-lisp
  (setq next-error-recenter 20)
  (bind-key "C-<f11>" 'compile)
#+end_src

** Tagging

#+begin_src emacs-lisp
  (use-package ggtags
    :bind (("C-c f" . ggtags-find-file)
           ("M-." . ggtags-find-tag-dwim))
    :config
    (setq ggtags-global-ignore-case t)
    (setq ggtags-sort-by-nearness t))
#+end_src

** Version Control

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x m g" . magit-status))
#+end_src

Following error will reported when using magit to commit changes:

#+BEGIN_QUOTE
server-ensure-safe-dir: The directory ‘~/.emacs.d/server’ is unsafe
#+END_QUOTE

The solution is to change the owner of =~/.emacs.d/server= [fn:12]

#+BEGIN_QUOTE
Click R-mouse on ~/.emacs.d/server and select “Properties” (last item in
menu). From Properties select the Tab “Security” and then select the button
“Advanced”. Then select the Tab “Owner” and change the owner from
=“Administrators (\Administrators)”= into =“ (\”=. Now the server code will accept
this directory as secure because you are the owner.
#+END_QUOTE

* Programming Language

** C

#+begin_src emacs-lisp
  (use-package cc-mode
    :ensure nil
    :config
    (add-to-list 'auto-mode-alist '("\\.C\\w*\\'" . c-mode))
    (use-package ggtags)
    (add-hook 'c-mode-hook 'ggtags-mode)
    (add-hook 'c++-mode-hook 'ggtags-mode)

    (add-hook 'c-mode-common-hook
              (lambda ()
                ;;(c-set-style "gnu")
                (c-toggle-auto-newline 0)
                (c-toggle-auto-hungry-state 0)
                (c-toggle-syntactic-indentation 1)
                ;;(highlight-indentation-mode 1)
                (which-function-mode 1)
                (local-set-key "\C-co" 'ff-find-other-file)
                (setq c-basic-offset 4))))
#+end_src

** Python

Python development configuration is quite easy. =elpy= [fn:13] is used here:

#+begin_src emacs-lisp
  (use-package elpy
    :config
    (elpy-enable))

  (use-package python
    :ensure nil
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :config
    (add-hook 'python-mode-hook
              (lambda ()
                (setq yas-indent-line nil)))
    (add-to-list 'python-shell-completion-native-disabled-interpreters "python"))

  (use-package company-jedi
    :config
    (setq elpy-rpc-backend "jedi")
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-jedi)))
#+end_src

Following =python= package is required according to =elpy= mannual:

#+begin_src shell
pip install rope
pip install jedi
# flake8 for code checks
pip install flake8
# importmagic for automatic imports
pip install importmagic
# and autopep8 for automatic PEP8 formatting
pip install autopep8
# and yapf for code formatting
pip install yapf
# install virtualenv for jedi
pip install virtualenv
#+end_src

** Swift

#+begin_src emacs-lisp
  (use-package swift-mode
    :mode ("\\.swift\\'" . swift-mode))
#+end_src

** Go lang
Open =.go= file with go-mode.
#+begin_src emacs-lisp
  (use-package go-mode
    :mode ("\\.go\\'" . go-mode))
#+end_src

** Docker file
Some dockerfile is not end with =.dockerfile=, so lets guess:
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :mode ("\\dockerfile\\'" . dockerfile-mode))
#+end_src

** Emacs lisp

#+begin_src emacs-lisp
  (define-derived-mode lisp-interaction-mode emacs-lisp-mode "λ")
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-elisp))
#+end_src

** AutoHotKey

=ahk-mode= developed by Rich Alesi[fn:14]

#+begin_src emacs-lisp
  (use-package ahk-mode
    :mode ("\\.ahk\\'" . ahk-mode))
#+end_src

* Calendar

#+begin_src emacs-lisp
  (if (not (boundp 'kimim/file-diary))
      (defvar kimim/file-diary (concat kimim/path-emacs-sync "diary")))
  (if (not (file-exists-p kimim/file-diary))
      (write-region "" nil kimim/file-diary))
  (setq diary-file kimim/file-diary)
  (setq calendar-latitude +30.16)
  (setq calendar-longitude +120.12)
  (setq calendar-location-name "Hangzhou")
  (setq calendar-remove-frame-by-deleting t)
  (setq calendar-week-start-day 1)
  (setq holiday-christian-holidays nil)
  (setq holiday-hebrew-holidays nil)
  (setq holiday-islamic-holidays nil)
  (setq holiday-solar-holidays nil)
  (setq holiday-bahai-holidays nil)
  (setq holiday-general-holidays '((holiday-fixed 1 1 "元旦")
                           (holiday-fixed 4 1 "愚人節")
                           (holiday-float 5 0 2 "父親節")
                           (holiday-float 6 0 3 "母親節")))
  (setq calendar-mark-diary-entries-flag t)
  (setq calendar-mark-holidays-flag nil)
  (setq calendar-view-holidays-initially-flag nil)
  (setq chinese-calendar-celestial-stem
        ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
  (setq chinese-calendar-terrestrial-branch
        ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
#+end_src

* Orgmode

** orgalist

#+begin_src emacs-lisp
  (use-package orgalist
    :commands (orgalist-mode)
    )
#+end_src

** org general setting

#+begin_src emacs-lisp
  ;; path and system environment setting for orgmode
  (use-package org
    :bind
    ("C-c a" . org-agenda)
    ("C-c b" . org-iswitchb)
    ("C-c c" . org-capture)
    ("C-c l" . org-store-link)
    ("C-c  ！" . org-time-stamp-inactive)
    ("C-c  。" . org-time-stamp)
    :config
    (setq org-export-allow-BIND t)
    (setq org-support-shift-select t)
    ;; no empty line after collapsed
    (setq org-cycle-separator-lines 0)
    (setq org-src-fontify-natively t)
    (setq org-startup-indented t))
#+end_src

** org for writing

#+begin_src emacs-lisp
  (use-package org-download
    :config
    (setq org-download-timestamp "")
    (setq org-image-actual-width (/ (display-pixel-width) 3))
    (setq-default org-download-image-dir "./images")
    (setq org-download-method 'directory)
    (setq org-startup-with-inline-images t)
    (setq image-file-name-extensions
          (quote
           ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm"
            "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "pdf" "bmp")))
    (setq org-image-actual-width 800)
    (setq org-download-image-html-width 800)
    (setq org-download-image-latex-width 800)
    (setq org-download-image-org-width 800))
#+end_src

#+begin_src emacs-lisp
  (use-package org
    :config
    ;;(use-package org-download)
    (use-package pangu-spacing)
    (setq org-hide-leading-stars t)
    (setq org-footnote-auto-adjust t)
    (setq org-footnote-define-inline t)
    (setq org-export-with-sub-superscripts '{})
    (define-key org-mode-map (kbd "C-c C-x h") (lambda()
                                                 (interactive)
                                                 (insert "^{()}")
                                                 (backward-char 2)))
    (define-key org-mode-map (kbd "C-c C-x l") (lambda()
                                                 (interactive)
                                                 (insert "_{}")
                                                 (backward-char 1)))
    )
#+end_src

** org with source code

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-src-window-setup 'current-window)
    (setq org-src-fontify-natively t)
    (setq org-confirm-babel-evaluate nil)
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images))
#+end_src

** org exporting

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-export-allow-BIND t)
    (setq org-export-creator-string "")
    (setq org-export-html-validation-link nil))
#+end_src

*** org to pdf

Export =org-mode= to PDF, with font highlight, you need to install =python= and
=pygments=. Because =pygmentize= from =pygments= is used to generate =latex=
markups for font highlighting.

For Windows environment, please note that =python= and =pygments= installed in
=msys64= is not working for xetex. You should download Python install file for
Windows from https://www.python.org/downloads/.

Get =pygments= with =pip:

#+begin_src shell
pip install pygments
#+end_src

#+begin_src emacs-lisp
  (use-package ox-latex
    :ensure org
    :commands (org-latex-publish-to-pdf)
    :config
    (require 'ox-latex)
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)
    (setq org-latex-pdf-process
          '("xelatex -shell-escape %f"
            "xelatex -shell-escape %f"))

    ;; most of the time, I do not need table of contents
    (setq org-latex-toc-command nil)
    ;; https://www.tuicool.com/articles/ZnAnym
    ;; remove error: ! LaTeX Error: Command \nobreakspace unavailable in encoding T1.
    ;; add: \DeclareRobustCommand\nobreakspace{\leavevmode\nobreak\ }
    (add-to-list 'org-latex-classes
                 '("cn-article"
                   "\\documentclass[a4paper,UTF8]{ctexart}
  \\DeclareRobustCommand\\nobreakspace{\\leavevmode\\nobreak\\ }"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
                 '("cn-book"
                   "\\documentclass[a4paper,UTF8]{ctexbook}
  \\DeclareRobustCommand\\nobreakspace{\\leavevmode\\nobreak\\ }"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes
                 '("article"
                   "\\documentclass{article}
  \\usepackage[UTF8]{ctex}
  \\usepackage{geometry}   %设置页边距的宏包
  \\usepackage{titlesec}   %设置页眉页脚的宏包
  \\usepackage{minted}
  \\geometry{a4paper,scale=0.8}
  \\geometry{a4paper,left=2.5cm,right=2.5cm,top=2cm,bottom=2cm}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (setq org-latex-default-class "article")
    ;; remove fontenc, and AUTO in fromt of inputenc,
    ;; then francais can be processed
    (setq org-latex-default-packages-alist
          (quote
           (("" "inputenc" t
             ("pdflatex"))
            ("" "graphicx" t nil)
            ("" "grffile" t nil)
            ("" "longtable" nil nil)
            ("" "wrapfig" nil nil)
            ("" "rotating" nil nil)
            ("normalem" "ulem" t nil)
            ("" "amsmath" t nil)
            ("" "textcomp" t nil)
            ("" "amssymb" t nil)
            ("" "capt-of" nil nil)
            ("" "hyperref" nil nil))))
    )
#+end_src

*** org to html page

#+begin_src emacs-lisp
  (use-package ox-html
    :ensure org
    :commands (org-html-publish-to-html)
    :config
    (setq org-html-validation-link nil)
    (defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
                                          (paragraph contents info) activate)
      "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
      (let ((fixed-contents)
            (orig-contents (ad-get-arg 1))
            (reg-han "[[:multibyte:]]"))
        (setq fixed-contents (replace-regexp-in-string
                              (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")
                              "\\1\\2" orig-contents))
        (ad-set-arg 1 fixed-contents)
        ))

    (defun org-babel-result-to-file (result &optional description)
      "Convert RESULT into an `org-mode' link with optional DESCRIPTION.
  If the `default-directory' is different from the containing
  file's directory then expand relative links."
      (when (stringp result)
        (if (string= "svg" (file-name-extension result))
            (progn
              (with-temp-buffer
                (if (file-exists-p (concat result ".html"))
                    (delete-file (concat result ".html")))
                (rename-file result (concat result ".html"))
                (insert-file-contents (concat result ".html"))
                (message (concat result ".html"))
                (format "#+BEGIN_HTML
  <div style=\"text-align: center;\">
  %s
  </div>
  ,#+END_HTML"
                        (buffer-string)
                        )))
          (progn
            (format "[[file:%s]%s]"
                    (if (and default-directory
                             buffer-file-name
                             (not (string= (expand-file-name default-directory)
                                           (expand-file-name
                                            (file-name-directory buffer-file-name)))))
                        (expand-file-name result default-directory)
                      result)
                    (if description (concat "[" description "]") "")))))))
#+end_src

** org to html slide

#+begin_src emacs-lisp
  (use-package ox-reveal
    :config
    (use-package htmlize :ensure t)
    ;;(setq org-reveal-root "reveal.js")
    ;;(setq org-reveal-root (concat kimim/path-kimikit "reveal.js"))
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/2.5.0/")
    (setq org-reveal-theme "simple")
    (setq org-reveal-width 1200)
    (setq org-reveal-height 750)
    (setq org-reveal-transition "fade")
    (setq org-reveal-hlevel 2))
#+end_src

** org with diagram

#+begin_src emacs-lisp
  ;; plant uml setting
  (use-package ob-plantuml
    :ensure org
    :config
    (require 'ob-plantuml)
    (setenv "GRAPHVIZ_DOT" (concat kimim/path-root "bin/dot"))
    (setq org-plantuml-jar-path (concat kimim/path-kimikit "plantuml/plantuml.jar")))
#+end_src

** org as GTD system

#+begin_src emacs-lisp
  (use-package org
    :commands (org-toggle-office org-toggle-home org-toggle-home-or-office)
    :bind (("<f12>" . org-toggle-home-or-office)
           :map org-mode-map
           ;;:map org-agenda-mode-map
           ;;("<S-right>" . (lambda ()
           ;;                 (interactive)
           ;;                 (org-agenda-todo 'right)))
           )
    :config
    (require 'org-agenda)
    (org-defkey org-agenda-mode-map
                [(shift right)]  (lambda ()
                                   (interactive)
                                   (org-agenda-todo 'right)))
    (org-defkey org-agenda-mode-map
                [(shift left)]  (lambda ()
                                   (interactive)
                                   (org-agenda-todo 'left)))
    (org-defkey org-agenda-mode-map
                [(control right)] 'org-agenda-do-date-later)
    (org-defkey org-agenda-mode-map
                [(control left)] 'org-agenda-do-date-earlier)
    (add-hook 'kill-emacs-hook
              (lambda ()
                (org-clock-out nil t nil)
                (org-save-all-org-buffers)))
    (setq org-todo-keywords
          '(
            ;; for tasks
            (sequence "TODO(t!)" "SCHED(s)" "|" "DONE(d@/!)")
            ;; for risks, actions, problems
            (sequence "OPEN(o!)" "WAIT(w@/!)" "|" "CLOSE(c@/!)")
            ;; special states
            (type "REPEAT(r)" "SOMEDAY(m)" "|" "ABORT(a@/!)")))

    (setq org-tag-alist
          '(("@office" . ?o) ("@home" . ?h)
            ("team" . ?t) ("leader" . ?l) ("boss" . ?b)
            ("risk" . ?k) ("sync" . ?s) ("followup" . ?f)
            ("reading" . ?r) ("writing" . ?w)
            ("project" . ?p) ("category" . ?c)
            ("habit" . ?H)
            ("next" . ?n)))

    (setq org-tags-exclude-from-inheritance '("project" "category"))

    (diminish 'auto-fill-function)

    (add-hook 'org-mode-hook
              (lambda ()
                ;;(auto-fill-mode)
                (org-display-inline-images)
                (drag-stuff-mode -1)))

    (setq org-stuck-projects
          '("+LEVEL>=2-category-habit"
            ("TODO" "SCHED"  "DONE"
             "OPEN" "WAIT" "CLOSE"
             "ABORT" "SOMEDAY" "REPEAT")
            nil nil))
    (setq org-refile-targets
          '(;; refile to maxlevel 2 of current file
            (nil . (:maxlevel . 1))
            ;; refile to maxlevel 1 of org-refile-files
            (org-refile-files :maxlevel . 1)
            ;; refile to item with 'project' tag in org-refile-files
            (org-refile-files :tag . "project")
            (org-refile-files :tag . "category")))

    (defadvice org-schedule (after add-todo activate)
      (if (or (string= "OPEN" (org-get-todo-state))
              (string= "WAIT" (org-get-todo-state))
              (string= "CLOSE" (org-get-todo-state)))
          (org-todo "WAIT")
        (org-todo "SCHED")))

    (defadvice org-deadline (after add-todo activate)
      (if (or (string= "OPEN" (org-get-todo-state))
              (string= "WAIT" (org-get-todo-state))
              (string= "CLOSE" (org-get-todo-state)))
          (org-todo "WAIT")
        (org-todo "SCHED")))

    (setq org-log-done t)
    (setq org-todo-repeat-to-state "REPEAT")

    ;; settings for org-agenda-view
    (setq org-agenda-span 2)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-deadline-warning-days 2)

    (setq org-agenda-custom-commands
          '(("t" todo "TODO|SCHED"
             ((org-agenda-sorting-strategy '(priority-down))))
            ("o" todo "OPEN|WAIT"
             ((org-agenda-sorting-strategy '(priority-down))))
            ;; all task should be done or doing
            ("d" todo "TODO|SCHED|OPEN|WAIT"
             ((org-agenda-sorting-strategy '(priority-down))))
            ("h" tags "habit/-ABORT-CLOSE"
             ((org-agenda-sorting-strategy '(todo-state-down))))
            ("c" tags "clock"
             ((org-agenda-sorting-strategy '(priority-down))))))

    (setq org-directory kimim/path-org)

    (setq org-capture-templates
          '(("c" "Capture" entry (file+headline "capture.org" "Inbox")
             "* %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("t" "TODO Task"    entry (file+headline "capture.org" "Inbox")
             "* TODO %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("s" "SCHED Task"    entry (file+headline "capture.org" "Inbox")
             "* SCHED %?\nSCHEDULED: %t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("o" "OPEN Issue"  entry (file+headline "capture.org" "Inbox")
             "* OPEN %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("w" "WAIT Task"    entry (file+headline "capture.org" "Inbox")
             "* WAIT %?\nSCHEDULED: %t\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("h" "Habit"   entry (file+headline "global.org"   "Habit")
             "* %?  :habit:\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")))

    (defcustom org-location-home-or-office "office" "office")
    (defun org-toggle-office ()
      (interactive)
      (setq org-location-home-or-office "office")
      (setq org-agenda-files
            (list kimim/path-org
                  (concat kimim/path-org "work/")))
      (setq org-refile-files
            (append
             (file-expand-wildcards (concat kimim/path-org "*.org"))))
      (message "Agenda is from office..."))

    (defun org-toggle-home ()
      (interactive)
      (setq org-location-home-or-office "home")
      (setq org-agenda-files
            (list kimim/path-org
                  (concat kimim/path-org "home/")))
      (setq org-refile-files
            (append
             (file-expand-wildcards (concat kimim/path-org "*.org"))))
      (message "Agenda is from home..."))

    (use-package ivy) ; use ivy to complete refile files
    (defun org-toggle-home-or-office()
      (interactive)
      (if (string= org-location-home-or-office "home")
          (org-toggle-office)
        (org-toggle-home)))

    (org-toggle-office))
#+end_src

** org link: match

New link to use everything to locate a file with unique ID:

#+begin_src emacs-lisp
  (use-package org
    :config
    (org-add-link-type "match" 'org-match-open)

    (defun org-match-open (path)
      "Visit the match search on PATH.
       PATH should be a topic that can be thrown at everything/?."
      (w32-shell-execute
       "open" "Everything" (concat "-search " path))))

#+end_src

** org link: onenote

New link to use everything to locate a file with unique ID:

#+begin_src emacs-lisp
  (use-package org
    :config
    (org-add-link-type "onenote" 'org-onenote-open)

    (defun org-onenote-open (path)
      "Visit the match search on PATH.
       PATH should be a topic that can be thrown at everything/?."
      (cond
       ((eq system-type 'windows-nt)
        (progn
          (w32-shell-execute
           "open" (concat "onenote:" path))))
        ((eq window-system 'ns)
         (shell-command (replace-regexp-in-string "&" "\\\\&" (format "open onenote:%s" path))))
        )))
#+end_src


** org link: deft

=C-x l= keychord can store deft links in deft mode, but cannot fetch the link
from deft note. Below defines a function to fetch a deft style link, which can
be used to paste directly in other org files, such as work journal. Buffer file
name handling function can be found from emacs manual[fn:15].

#+begin_src emacs-lisp
  (use-package org
    :bind
    (("C-x m d" . kimim/deft-store-link))
    :config
    (defun kimim/deft-store-link()
      "get deft link of current note file."
      (interactive)
      (unless (buffer-file-name)
        (error "No file for buffer %s" (buffer-name)))
      (let ((msg (format "[[deft:%s]]"
                         (file-name-nondirectory (buffer-name)))))
        (kill-new msg)
        (message msg))))
#+end_src


** org publish to jekyll

#+begin_src emacs-lisp
  (use-package org
    :commands (jekyll)
    :config
    ;; file in jekyll base will also be uploaded to github
    (setq path-jekyll-base "~/kimi.im/_notes/_posts")
    ;; in order to sync draft with cloud sync driver
    (setq path-jekyll-draft (concat kimim/path-sync "kimim/_draft/"))
    ;; file in jekyll base will also be uploaded to github

    (setq org-publish-project-alist
          '(
            ("org-blog-content"
             ;; Path to your org files.
             :base-directory "~/kimi.im/_notes"
             :base-extension "org"
             ;; Path to your jekyll project.
             :publishing-directory "~/kimi.im/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :headline-levels 4
             :section-numbers t
             :html-extension "html"
             :body-only t ;; Only export section between <body></body>
             :with-toc nil
             )
            ("org-blog-static"
             :base-directory "~/kimi.im/_notes/"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php\\|svg"
             :publishing-directory "~/kimi.im/"
             :recursive t
             :publishing-function org-publish-attachment)
            ("blog" :components ("org-blog-content" "org-blog-static"))
            ))

    (use-package ivy)

    (defun jekyll-post ()
      "Post current buffer to kimi.im"
      (interactive)
      ;; get categories
      ;; get buffer file name
      (let ((category (jekyll-get-category))
            (filename (file-name-nondirectory buffer-file-name))
            newfilename)
        ;; append date to the beginning of the file name
        (setq newfilename (concat path-jekyll-base "/" category "/" (format-time-string "%Y-%m-%d-") filename))
        ;; mv the file to the categories folder
        (rename-file buffer-file-name newfilename)
        (switch-to-buffer (find-file-noselect newfilename))
        ;; execute org-publish-current-file
        (org-publish-current-file)
        ;; go to kimi.im folder and execute cyg command
        (with-temp-buffer
          (dired "~/kimi.im/")
          (kimim/xterm)
          (kill-buffer))
        ))

    (defun jekyll-tag ()
      "add new tags"
      (interactive)
      ;; find "tags: [" and replace with "tags: [new-tag, "
      (let (tag)
        (goto-char (point-min))
        ;;  (search-forward "tags: [")
        (re-search-forward "tags: \\[" nil t)
        (setq tag (ivy-read "tags: " '(
                                       "Deutsch" "Français" "English"
                                       "emacs" "org-mode"
                                       "Windows" "macOS" "Linux"
                                       "industry" "edge-computing"
                                       "travel" "photography"
                                       "leadership"
                                       "x"
                                       )))
        (if (string= "x" tag)
            (insert "")
          (insert tag ", "))
        tag))

    (defun jekyll-header()
      "Insert jekyll post headers,
  catergories and tags are generated from exisiting posts"
      (interactive)
      (insert "#+BEGIN_EXPORT html\n---\nlayout: post\ntitle: ")
      (insert (read-string "Title: "))
      (insert "\ncategories: [")
      (insert (ivy-read "categories: " '(
                                         "technology"
                                         "productivity" "leadership"
                                         "psychology" "language"
                                         "education" "photography"
                                         )))
      (insert "]")
      (insert "\ntags: [")
      (while (progn
               (setq tag (jekyll-tag))
               (not (string= "x" tag))))
      (move-end-of-line 1)
      (backward-delete-char 2)
      (insert "]\n---\n#+END_EXPORT\n\n")
      )

    (defun jekyll ()
      (interactive)
      (find-file (concat path-jekyll-draft "/" (read-string "Filename: ") ".org"))
      (jekyll-header)
      (save-buffer)
      )

    (defun jekyll-get-category ()
      (interactive)
      (goto-char (point-min))
      (re-search-forward "^categories: \\[\\([a-z-]*\\)\\]$" nil t)
      (match-string 1)
      )

    (defun jekyll-test ()
      (interactive)
      (org-open-file (org-html-export-to-html nil))))
#+end_src

* Note Taking Tools
** Deft
#+begin_src emacs-lisp
  (use-package deft
    :bind
    (("C-x d" . deft-find-file)
     ("C-x C-d" . deft))
    :config
    (use-package ivy)
    (setq deft-extensions '("txt" "org" "md"))
    (setq deft-directory kimim/path-notes)
    (setq deft-recursive t)
    ;; disable auto save
    (setq deft-auto-save-interval 0)
    (setq deft-file-naming-rules '((noslash . "_")))
    (setq deft-text-mode 'org-mode)
    (setq deft-use-filter-string-for-filename t)
    (setq deft-org-mode-title-prefix t)
    (setq deft-use-filename-as-title nil)
    (setq deft-strip-summary-regexp
          (concat "\\("
                  "[\n\t]" ;; blank
                  "\\|^#\\+[[:upper:]_]+:.*$" ;; org-mode metadata
                  "\\|^#\\+[[:alnum:]_]+:.*$" ;; org-mode metadata
                  "\\)"))

    ;;advise deft-open-file to replace spaces in file names with _
    (require 'kimim)
    (defun kimim/deft-open-file-advice (orig-fun &rest args)
      (setq name (pop args))
      (if (file-exists-p name)
          (progn
            (push name args)
            (apply orig-fun args))
        (progn
          (setq title (file-name-sans-extension
                       (file-name-nondirectory name)))
          (setq name (concat
                      (file-name-directory name)
                      (kimim/genfile-timestamp)
                      (downcase
                       (replace-regexp-in-string
                        " " "_" (file-name-nondirectory name)))
                      (if (not (file-name-extension name))
                          ".txt")))
          (push name args)
          (apply orig-fun args)
          (insert (concat "#+TITLE: " title "\n\n")))))

    (advice-add 'deft-open-file
                :around #'kimim/deft-open-file-advice)

    (defun kimim/deft-new-file-named-advice (orig-fun &rest args)
      (setq name (pop args))
      (setq title name)
      (setq name (concat
                  (kimim/genfile-timestamp)
                  (downcase
                   (replace-regexp-in-string
                    " " "_" name))))
      (push name args)
      (apply orig-fun args)
      (insert (concat "#+TITLE: " title "\n\n")))

    (advice-add 'deft-new-file-named
                :around #'kimim/deft-new-file-named-advice))
#+end_src

* Reference management

#+begin_src elisp
(setq org-ref-bibliography-notes (concat kimim/path-ref "notes.org")
      org-ref-default-bibliography (concat kimim/path-ref "docs.bib")
      org-ref-pdf-directory (concat kimim/path-ref "pdfs/"))
#+end_src
* Dictionary
** Youdao dictionary

Search dictionary with Ctrl+F3 by youdao dictionary.

#+begin_src emacs-lisp
  (use-package youdao-dictionary
    :bind (("C-<f3>" . youdao-dictionary-search-at-point+))
    )
#+end_src
* Mail and Contacts
** EBDB - a replacement for BBDB, as contact management

#+begin_src emacs-lisp
  (use-package ebdb
    :commands (ebdb ebdb-mail-aliases)
    :config
    (setq ebdb-sources (concat kimim/path-emacs-sync "ebdb"))
    ;; do not pop *EBDB-Gnus* window
    (setq ebdb-mua-pop-up nil)
    (require 'ebdb-gnus)
    (require 'ebdb-message)
    (add-hook 'message-setup-hook 'ebdb-mail-aliases)
    )
#+end_src

** erc

#+begin_src emacs-lisp
  ;; erc settings
  (use-package erc
    :commands (erc)
    :config
    (require 'erc-join)
    (erc-autojoin-mode 1)
    (erc-autojoin-enable)
    (setq erc-default-server "irc.freenode.net")
    (setq erc-autojoin-channels-alist
          '(("irc.freenode.net" "#emacs")))
    (setq erc-hide-list '("JOIN" "PART" "QUIT")))
#+end_src

** GNUS dired

#+begin_src emacs-lisp
  (use-package gnus-dired
    :ensure nil
    :commands (turn-on-gnus-dired-mode)
    :config
    ;; make the `gnus-dired-mail-buffers' function also work on
    ;; message-mode derived modes, such as mu4e-compose-mode
    (defun gnus-dired-mail-buffers ()
      "Return a list of active message buffers."
      (let (buffers)
        (save-current-buffer
          (dolist (buffer (buffer-list t))
            (set-buffer buffer)
            (when (and (derived-mode-p 'message-mode)
                       (null message-sent-message-via))
              (push (buffer-name buffer) buffers))))
        (nreverse buffers)))
    (setq gnus-dired-mail-mode 'mu4e-user-agent))
#+end_src

** mu4e

#+begin_src emacs-lisp
  (use-package sendmail
    :ensure nil
    :config
    (setq mail-self-blind t)
    (setq mail-signature-file (concat kimim/path-emacs-sync "signature.txt")))
#+end_src

#+begin_src emacs-lisp
  (use-package mu-cite
    :commands (mu-cite-original)
    :config
    (setq mu-cite-top-format '("On " date ", " from " wrote:\n\n"))
    (setq mu-cite-prefix-format '(" > ")))
#+end_src

#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :commands (mu4e)
    :load-path (lambda ()
                 (cond ((eq system-type 'darwin)
                        "/usr/local/Cellar/mu/1.0_1/share/emacs/site-lisp/mu/mu4e")
                       ((eq system-type 'cygwin)
                        "/usr/local/share/emacs/site-lisp/mu4e")))
    :config
    (require 'org-mu4e) ;; capture link
    (use-package sendmail)
    (add-to-list 'Info-additional-directory-list "/usr/local/share/info")
    (setq mu4e-mu-binary "/usr/local/bin/mu")
    (setq mail-user-agent 'mu4e-user-agent)
    ;; Mail folder set to ~/Maildir
    (setq mu4e-maildir "~/.mail")         ; NOTE: should not be symbolic link
    ;; Fetch mail by offlineimap
    (setq mu4e-get-mail-command "offlineimap -u quiet")
    ;; Fetch mail in 60 sec interval
    (setq mu4e-update-interval 300)
    (setq mu4e-use-fancy-chars nil)
    (setq mu4e-view-show-images t)
    (setq mu4e-headers-fields
          '( (:human-date    .   12)
             (:flags         .    6)
             (:from          .   22)
             (:subject       .   nil)))
    (setq mu4e-compose-cite-function 'mu-cite-original)
    (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
    (add-hook 'mu4e-compose-mode-hook 'kimim/mail-setup)
    (add-hook 'mu4e-compose-mode-hook 'orgalist-mode))
#+end_src

* Reading News

#+begin_src emacs-lisp
  (use-package elfeed
    :commands (elfeed)
    :bind
    (:map elfeed-search-mode-map
          ("<SPC>" . scroll-up-command)
          ("<backspace>" . scroll-down-command))
    :config
    ;; open feed link with eww
    (use-package org)
    (setq browse-url-browser-function 'browse-url-default-browser);;eww-browse-url)
    (setq elfeed-curl-extra-arguments '("--proxy" "127.0.0.1:1080"))
    (setq elfeed-feeds
          '(("http://feeds.bbci.co.uk/news/world/rss.xml" News)
            ("http://feeds.feedburner.com/dw-world" News)
            ("https://www.theguardian.com/world/china/rss" CN)
            ("http://www.chinadaily.com.cn/rss/bizchina_rss.xml" CN)
            ("http://feeds.bbci.co.uk/news/world/asia/china/rss.xml" CN)
            ("https://www.ft.com/stream/b2997bc8-d54f-3c4b-870f-130a4b337a51?format=rss" CN)
            ("http://newsfeed.zeit.de/index" DE)
            ("http://rfi.fr/france/rss" FR)
            ("http://www.rfi.fr/radiofr/podcast/rss_apprendre_francais.xml" FR learn)
            ("http://www.rfi.fr/asie-pacifique/rss" FR asia)
            ("http://www.rfi.fr/science/rss" FR science)
            ("http://www.rfi.fr/culture/rss" FR culture)
            ("http://www.rfi.fr/economie/rss" FR economy)
            ("https://www.lemonde.fr/rss/une.xml" FR une)
            ("https://www.lemonde.fr/economie/rss_full.xml" FR economy)
            ("https://www.lemonde.fr/asie-pacifique/rss_full.xml" FR asia)
            ("https://www.lemonde.fr/sciences/rss_full.xml" FR science)
            ("https://www.lemonde.fr/technologies/rss_full.xml" FR technology)
            ("http://kimi.im/atom.xml" blog))))
#+end_src

* kimim utils

In Windows environment, =kimim/xterm= and =kimim/dc= will look up the program
from system PATH, so you should set these to system PATH:

#+begin_src bat
C:\msys64\
C:\msys64\usr\bin\
C:\msys64\mingw64\bin\
PATH\of\doublecmd\
#+end_src

#+begin_src emacs-lisp
  (use-package kimim
    :defer 5
    :ensure nil
    :commands (kimim/mail-setup)
    :bind
    (("C-x m m" . kimim/mail-new-empty)
     ("C-x m y" . kimim/mail-attach-files)
     ("<f9>" . kimim/xterm)
     ("S-<f9>" . kimim/cmd)
     ("C-c r" . kimim/rename-file-and-buffer)
     ("C-x m o" . kimim/open-in-external-app)
     ("C-c d" . kimim/lookinsight))
    :load-path "~/kimim-emacs/site-lisp/"
    )
#+end_src

* Key Binding

#+begin_src emacs-lisp
  (bind-key "<f1>" 'delete-other-windows)
  (bind-key "C-<f1>" 'nuke-other-buffers)
  (bind-key "M-<f1>" (lambda()
                       (interactive)
                       (switch-to-buffer "*scratch*") (nuke-other-buffers)))
  (bind-key "<f2>" 'other-window)
  (bind-key "<f5>" (lambda()
                     (interactive)
                     (switch-to-buffer "*scratch*") (delete-other-windows)))
  ;;(bind-key "<f7>" 'kimim/toggle-highlight-tap)
  ;;(bind-key "<f8>" (lambda()
  ;;                   (interactive) (list-charset-chars 'ascii)))
  (bind-key "<f7>" 'bury-buffer)
  (bind-key "<f8>" 'unbury-buffer)
  ;; (bind-key "M-<SPC>" (lambda () (interactive)
  ;;                       (insert ?_)))
  (bind-key "C-h" 'delete-backward-char)
  (bind-key "M-h" 'backward-kill-word)
  (bind-key "M-?" 'mark-paragraph)
  (bind-key "C-x k" 'kill-this-buffer)
  (bind-key "C-x C-v" 'view-file-other-window)
  (bind-key "C-c C-o" 'occur)
  (bind-key "C-z" 'set-mark-command)
  (bind-key "M-o" 'other-window)
  (bind-key "M-n" 'next-error)
  (bind-key "M-p" 'previous-error)
  ;;(define-key hs-minor-mode-map "\C-c/" 'hs-toggle-hiding)
  (bind-key "M-*" 'pop-tag-mark)

  (bind-key "C-c C-/" 'comment-or-uncomment-region)
  (bind-key "RET" 'newline-and-indent)
  ;;(define-key global-map (kbd "<M-S-mouse-1>") 'pop-tag-mark)
  ;; key bindings
  (when (eq system-type 'darwin) ;; mac specific settings
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta)
    ;; sets fn-delete to be right-delete
    (global-set-key [kp-delete] 'delete-char))

  (bind-key "C-x m h" 'help)
  (bind-key "C-x m c" 'calculator)
  (bind-key "C-x m n" 'compose-mail)
  (bind-key "C-x m s" '(lambda ()
                         (interactive)
                         (set-frame-font
                          (concat "Inconsolata-" (read-string "Enter font size: ")) t)))
  (bind-key "C-x m ." 'unbury-buffer)
  (bind-key "C-x m ," 'bury-buffer)
  (bind-key "C-x m  。" 'unbury-buffer)
  (bind-key "C-x m  ，" 'bury-buffer)
  (bind-key "C-x ," 'bury-buffer)
  (bind-key "C-x ." 'unbury-buffer)
  (bind-key "C-x  ，" 'bury-buffer)
  (bind-key "C-x  。" 'unbury-buffer)
  (bind-key "C-x  ‘" 'hippie-expand)
  (bind-key "C-x  ’" 'hippie-expand)
#+end_src

* Footnotes

[fn:1] http://www.literateprogramming.com/

[fn:2] http://cygwin.com/

[fn:3] https://cygwin.com/install.html

[fn:4] https://cygwin.com/faq/faq.html#faq.setup.cli

[fn:5] http://brew.sh/

[fn:6] http://stackoverflow.com/questions/14465330/how-to-run-emacs-in-cli-mode-under-mintty-in-windows

[fn:7] https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html

[fn:8] https://github.com/tldr-pages/tldr

[fn:9] https://github.com/kuanyui/tldr.el

[fn:10] https://github.com/ggreer/the_silver_searcher#installation

[fn:11] https://github.com/Wilfred/ag.el

[fn:12] https://github.com/syl20bnr/spacemacs/issues/381

[fn:13] https://github.com/jorgenschaefer/elpy

[fn:14] https://github.com/ralesi/ahk-mode

[fn:15] https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html

[fn:16] http://www.voidtools.com

[fn:17] http://www.voidtools.com/es.zip
