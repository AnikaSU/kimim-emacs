* Introduction

This Emacs configuration file is written with literate programming method.[fn:1]
=.el= file is loaded by extracting source code from this file.

* Preparation
** Windows
*** Starter Script

Because I want to let Emacs be executed in a specific =home= directory, so I
create a =.bat= file =emacs.bat= to set the environment and run Emacs:

#+BEGIN_SRC bat
  :: set home path for Emacs
  set HOME=C:\Users\kimim\home
  :: execute emacs with debug enable
  C:\kimikit\emacs\bin\runemacs.exe --debug-init
#+END_SRC

Another important path in Windows is =kimikit=, which is used to put some
portable applications. I plan to write some installation script to update and
install these applications automatically.

*** Cygwin

Another tool sets required for this configuration in Windows is the Cygwin
project[fn:2], which is a large collection of GNU and Open Source tools provide
functionality similar to a Linux distribution on Windows.

MSYS2 [fn:3] is better than Cygwin in one point that the packages can be
installed in command line with =pacman -S=.

The explanation from Cygwin is that because Windows do not allow overwriting of
in-use executable, so installing a new version of Cygwin DLL while a packager is
using the DLL is problematic.[fn:4] But I guess MSYS2 should have the same
issue.

However Cygwin standalone package management tool =setup-x86.exe= or
=setup-x86_64.exe= accept command-line arguments [fn:5], so I will try to use
the command line option to install packages as many as possible.

** Mac OS

For Apple macOS, most UNIX tools are installed already. Homebrew [fn:6] is used
to install additional application if it is missing in macOS.

Install Homebrew:

#+BEGIN_SRC shell
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
#+END_SRC

** Linux

Most of the external tools I used in this Emacs configuration should be easily
installed or already available in main Linux distributions.
* Environment
** Synchronization Folders

I'm using this Emacs configuration for both working usage and personal usage,
and I want to synchronize some files in synchronization service, so I need to
seperate the working file and personal file in different synchronization
services. For example, working files are synchronized in Microsoft OneDrive
Business or Box Business, while personal files are synchronized in Dropbox or
SugarSync.

The variable for synchronization location is named as:
=kimim/path-sync=

If the sync path is not set, then use HOME path =~= as the default folder, that
means, no synchronization. So please set these variables in your =.emacs= file.

#+BEGIN_SRC emacs-lisp
  ;; Synchronization Folders
  (if (not (boundp 'kimim/path-sync))
      (defvar kimim/path-sync "~/"))
#+END_SRC

** kimim-emacs path

Another important folder is the folder for this configuration files, which is
cloned from my github repository.

Anyway, you can change the path as you want, and set =kimim/path-kimim-emacs=
accordingly.

#+BEGIN_SRC sh
git clone https://github.com/kimim/kimim-emacs.git
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (if (not (boundp 'kimim/path-kimim-emacs))
      (defvar kimim/path-kimim-emacs "~/kimim-emacs/"))
#+END_SRC

** PATH, exec-path and Info

Environment variable =PATH= is the the searching path of executables by the
shell running in Emacs while =exec-path= is the search path of Emacs itself. So
we should set both of them to almost the same paths.

As I have a Windows box in the office, and a Apple macOS at home, so I need to
specify these variables in different way.

#+BEGIN_SRC emacs-lisp
  (cond ((eq window-system 'w32)
         (setq kimim/path-root "C:/cygwin/")
         (add-to-list 'exec-path
                      "C:/kimikit/emacs/bin/")
         (setenv "PATH"
                 (concat "C:/kimikit/emacs/bin" path-separator
                 (getenv "PATH"))))
        ((eq window-system 'ns)
         (setq kimim/path-root "/")
         (add-to-list 'exec-path "/Library/Frameworks/Python.framework/Versions/3.5/bin")
         (setenv "PATH"
                 (concat
                  "/Library/Frameworks/Python.framework/Versions/3.5/bin" path-separator
                  (getenv "PATH")))))

  (add-to-list 'exec-path (concat kimim/path-root "bin"))
  (add-to-list 'exec-path (concat kimim/path-root "usr/bin"))
  (add-to-list 'exec-path (concat kimim/path-root "usr/local/bin"))
  (add-to-list 'exec-path "~/cross-tools/bin")

  (setenv "PATH"
          (concat
           kimim/path-root "bin" path-separator
           kimim/path-root "usr/bin" path-separator
           kimim/path-root "usr/local/bin" path-separator
           "~/cross-tools/bin" path-separator
           (getenv "PATH")))
#+END_SRC

** Custom File

#+BEGIN_SRC emacs-lisp
  (if (not (boundp 'kimim/file-custom))
      (defvar kimim/file-custom "~/.emacs.d/custom.el"))
  (setq custom-file kimim/file-custom)
  (load-file custom-file)
#+END_SRC

** Language

#+BEGIN_SRC emacs-lisp
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  ;; remove svn log LC_TYPE not defined warning.
  (setenv "LC_CTYPE" "en_US")
  (set-locale-environment "English")
  (set-language-environment 'English)
  (prefer-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-16le)
  (cond ((eq window-system 'w32)
         ;; Windows file name is encoded in gbk
         (set-file-name-coding-system 'gbk)
         (set-terminal-coding-system 'gbk))
        ((eq window-system 'ns)
         (set-file-name-coding-system 'utf-8)
         (set-terminal-coding-system 'utf-8)))
#+END_SRC

** global key map

Define new command prefix for keys such as "C-x m f", "C-x m v".

#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'ctl-x-m-map)
  (global-set-key "\C-xm" 'ctl-x-m-map)
#+END_SRC

* Package

=package= [fn:7]is the modern =elisp= package management system, which lets you
easily download and install packages that implement additional features. Each
package is a separate Emacs Lisp program, sometimes including other components
such as an Info manual.

All the extensions used in this file are installed and managed by =package=.

Here I use =use-package= to defer the package loading and even installation,
When you use the =:commands= keyword, it creates autoloads for those commands
and defers loading of the module until they are used.

#+BEGIN_SRC emacs-lisp
  (setq package-user-dir "~/.emacs.d/elpa")
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("ELPA" . "http://tromey.com/elpa/")
          ("elpy" . "http://jorgenschaefer.github.io/packages/")
          ("marmalade" . "https://marmalade-repo.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))

  (require 'use-package)
  (require 'diminish)
  (require 'bind-key)
  ;; install package if missing
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
#+END_SRC

* Emacs Frame
** Menu Bar and Tool Bar

#+BEGIN_SRC emacs-lisp
  (cond ((eq window-system 'w32)
         ;; Enable copy and paste in Win32
         (setq select-enable-clipboard t)
         (menu-bar-mode 0))
        ((eq window-system 'ns)
         (menu-bar-mode 1)))
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Font and Frame Size
#+BEGIN_SRC emacs-lisp
  (cond
   ((eq window-system 'w32)
    ;; cleaner font setting
    (set-fontset-font
     "fontset-default"
     'han (font-spec :family "NSimSun" :size 16))
    (setq default-frame-alist
          '((top . 80) (left . 250)
            (width . 128) (height . 45)
            ;; if you like anti-alias, use this to have a try
            (font . "Inconsolata-11")
            )))
   ((eq window-system 'ns)
    (set-fontset-font
     "fontset-default"
     'han (font-spec :family "Microsoft Yahei" :size 14))
    ;; OS X 下，只有雅黑字體的標點符號顯示的不是那麼難看
    (set-fontset-font
     "fontset-default"
     'cjk-misc (font-spec :family "Microsoft Yahei" :size 14))
    (setq default-frame-alist
          '((top . 100) (left . 600)
            (width . 166) (height . 70)
            ;; (font . "Bitstream Vera Sans Mono-14")
            ))))
#+END_SRC

* Title and Header

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
        '("" invocation-name ": "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  (use-package path-headerline-mode
    :defer t
    :config
    ;; only display headerline for real files
    (defun kimim/ph--display-header (orig-fun &rest args)
      (if (buffer-file-name)
          (apply orig-fun args)
        (setq header-line-format nil)))
    (advice-add 'ph--display-header :around #'kimim/ph--display-header)
    ;; display file path in headerline
    ;; useful when in fullscreen mode
    (path-headerline-mode t))
#+END_SRC
* Mode Line
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)
  (setq display-time-interval 10)
  (display-time-mode t)
#+END_SRC
* Color Theme
#+BEGIN_SRC emacs-lisp
  (setq font-lock-maximum-decoration t)
  (setq font-lock-global-modes '(not shell-mode text-mode))
  (setq font-lock-verbose t)
  (global-font-lock-mode 1)
  (use-package color-theme-kimim
    :defer 2
    :commands (color-theme-kimim color-theme-jekyll)
    :ensure nil
    :load-path "~/kimim-emacs/site-lisp/"
    :config
    (color-theme-kimim))
#+END_SRC
* Highlight
#+BEGIN_SRC emacs-lisp
  ;; highlight current line
  (use-package hl-line
    :config
    (global-hl-line-mode 1))

  ;; highlight current symbol
  (use-package auto-highlight-symbol
    :diminish auto-highlight-symbol-mode
    :bind ("C-x m e" . ahs-edit-mode)
    :config
    (global-auto-highlight-symbol-mode t))
#+END_SRC
* Other Visual Element
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)          ; 不顯示開始畫面
  (setq initial-scratch-message nil)        ; scratch 默認為空
  (setq visible-bell t)
  (setq ring-bell-function #'ignore)
  (fset 'yes-or-no-p 'y-or-n-p)
  (show-paren-mode 1)                       ; 高亮显示匹配的括号
  (blink-cursor-mode 1)                     ; 光标不闪烁
  ;;(tooltip-mode 1)
#+END_SRC

* Info
#+BEGIN_SRC emacs-lisp
  (use-package info
    :defer t
    :config
    (add-to-list 'Info-additional-directory-list
                 (concat kimim/path-root "usr/share/info"))
    (add-to-list 'Info-additional-directory-list
                 (concat kimim/path-root "usr/local/share/info"))
    ;; additional info, collected from internet
    (add-to-list 'Info-additional-directory-list
                 "~/info"))
#+END_SRC
* Controlling
** Window and Frame
#+BEGIN_SRC emacs-lisp
  (use-package winner
    ;; restore windows configuration, built-in package
    :commands winner-mode
    :config
    (winner-mode t))

  (use-package window-numbering
    :ensure t
    :commands window-numbering-mode
    :config
    (window-numbering-mode 1))

  (bind-key "C-x m w" 'make-frame)
  ;; donno why, w/o following, new frame still has scroll-bar
  (scroll-bar-mode -1)
#+END_SRC

** Command

#+BEGIN_SRC emacs-lisp
  ;; https://github.com/justbur/emacs-which-key
  (use-package which-key
    :defer t
    :ensure t
    :diminish which-key-mode
    :config
    ;; use minibuffer as the popup type, otherwise conflict in ecb mode
    (setq which-key-popup-type 'minibuffer)
    (which-key-mode 1))

  ;; smex will list the recent function on top of the cmd list
  (use-package smex
    :defer t
    :ensure t
    :config
    (smex-initialize))

  (use-package counsel
    :defer t
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-x m f" . counsel-describe-function)
     ("C-x m v" . counsel-describe-variable)
     ("C-x m l" . counsel-load-library)
     ("C-x m i" . counsel-info-lookup-symbol)
     ("C-x m u" . counsel-unicode-char)
     ("C-c j" . counsel-git-grep)
     ("C-c g" . counsel-grep)
     ("C-c k" . counsel-ag)
     ("C-c p" . counsel-pt)
     ("C-x l" . counsel-locate)
     :map read-expression-map
     ("C-r" . counsel-expression-history))
    :config
    (require 'ivy)
    (ivy-mode 1))
#+END_SRC
** Key Frequency
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :defer t
    :config
    (keyfreq-mode)
    (keyfreq-autosave-mode))
#+END_SRC
* Editing
** General
#+BEGIN_SRC emacs-lisp
  ;;========================================
  ;; Editor setting
  ;;========================================
  (setq inhibit-eol-conversion nil)       ; 不要轉換 end-of-line style
  ;; fill-column is a buffer-local variable, use setq-default to change it globally
  (setq-default fill-column 80)
  (use-package drag-stuff
    :defer 3
    :diminish drag-stuff-mode
    :config
    (drag-stuff-global-mode 1))           ; use Alt-up/down to drag line or region
  (delete-selection-mode 1)               ; 輸入的文字覆蓋選中的文字
  (setq kill-ring-max 200)                ; kill-ring 最多的记录个数
  (setq kill-whole-line t)                ; 在行首 C-k 时，同时删除该行。
  (setq require-final-newline t)          ; 存盘的时候，要求最后一个字符时换行符
  (setq-default tab-width 4)              ; 用 space 替换 tab，tab 长度为 4
  (setq tab-stop-list
        (number-sequence 4 120 4))        ; 每次 tab 空格數
  (setq track-eol t)                      ; 当光标在行尾上下移动的时候保持在行尾
  (diminish 'drag-stuff-mode)
  ;; 对于每个备份文件，保留最原始的两个版本和最新的五个版本。并且备份的时
  ;; 候，备份文件是复本，而不是原件。
  (setq backup-directory-alist '(("." . "~/Temp")))
  (setq version-control t)
  (setq kept-old-versions 10)
  (setq kept-new-versions 20)
  (setq delete-old-versions t)
  (setq backup-by-copying t)

  (setq auto-save-interval 50)
  (setq auto-save-timeout 60)
  (setq auto-save-default nil)           ; auto-save of every file-visiting buffer
  (setq auto-save-list-file-prefix "~/Temp/auto-saves-")
  (setq auto-save-file-name-transforms `((".*"  , "~/Temp/")))
  (setq create-lockfiles nil)
  (setq time-stamp-active t)
  (setq time-stamp-warn-inactive t)
  (setq time-stamp-format "%:y-%02m-%02d %3a %02H:%02M:%02S kimi")
  (add-hook 'write-file-hooks 'time-stamp); 自动更新 time-stamp

  (add-hook 'before-save-hook 'kimim/delete-trailing-whitespace)
        (defun kimim/save-buffer-advice (orig-fun &rest arg)
  (delete-trailing-whitespace)
  (apply orig-fun arg))


  (advice-add 'save-buffer :around #'kimim/save-buffer-advice)

  (setq ispell-program-name "aspell")
  (diminish 'visual-line-mode)
  (add-hook 'text-mode-hook
            (lambda ()
              (when (derived-mode-p 'org-mode 'markdown-mode 'text-mode)
                (flyspell-mode)
                (visual-line-mode))))
  (setq-default indent-tabs-mode nil)

  ;; 当有两个文件名相同的缓冲时，使用前缀的目录名做 buffer 名字
  (setq uniquify-buffer-name-style 'forward)

  ;; 当使用 M-x COMMAND 后，显示该 COMMAND 绑定的键 5 秒鐘時間
  (setq suggest-key-bindings 5)


  ;;========================================
  ;; Global Mode Settings
  ;;========================================
  (setq auto-mode-alist
        (append '(("\\.css\\'" . css-mode)
                  ("\\.S\\'" . asm-mode)
                  ("\\.C\\w*\\'" . c-mode)
                  ("\\.md\\'" . markdown-mode)
                  ("\\.markdown\\'" . markdown-mode)
                  ("\\.svg\\'" . html-mode)
                  ("\\.pas\\'" . delphi-mode)
                  ("\\.txt\\'" . org-mode)
                  )
                auto-mode-alist))


  ;;========================================
  ;; Load other configuration files
  ;;========================================

  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name "saveplace" "~"))

  ;;  (use-package volatile-highlights
  ;;    :config
  ;;    (volatile-highlights-mode t)
  ;;    :diminish volatile-highlights-mode)
#+END_SRC
** pangu-spacing
#+BEGIN_SRC emacs-lisp
  (use-package pangu-spacing
    :defer t
    :ensure t
    :diminish pangu-spacing-mode
    :config
    (global-pangu-spacing-mode 1)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (set (make-local-variable 'pangu-spacing-real-insert-separtor) t))))
#+END_SRC
** undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer t
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t))
#+END_SRC
* Dired and Buffer

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :defer t
    :ensure nil
    :bind
    ("C-x C-j" . dired-jump)
    :config
    (require 'dired-x)
    (add-hook 'dired-mode-hook
              (lambda ()
                ;; Set dired-x buffer-local variables here.  For example:
                (dired-omit-mode 1)
                (setq dired-omit-localp t)
                (setq dired-omit-files
                      (concat "|NTUSER\\|ntuser\\"
                              "|Cookies\\|AppData\\"
                              "|Contacts\\|Links\\"
                              "|Intel\\|NetHood\\"
                              "|PrintHood\\|Recent\\"
                              "|Start\\|SendTo\\"
                              "|^\\.DS_Store\\"
                              "|qms-bmh"))))
    ;; Dired buffer 中列出文件时传递给 ls 的参数。加个 "l" 可以使大写的文
    ;; 件名在顶部，临时的改变可以用 C-u s。
    (setq dired-listing-switches "-avhl")
    ;; 复制(删除)目录的时，第归的复制(删除)其中的子目录。
    (setq dired-recursive-copies t)
    (setq dired-recursive-deletes t)
    (define-key dired-mode-map (kbd "<left>") 'dired-up-directory)
    (define-key dired-mode-map (kbd "<right>") 'dired-find-file)

    (defadvice dired-next-line (after dired-next-line-advice (arg) activate)
      "Move down lines then position at filename, advice"
      (interactive "p")
      (if (eobp)
          (progn
            (goto-char (point-min))
            (forward-line 2)
            (dired-move-to-filename))))

    (defadvice dired-previous-line (before dired-previous-line-advice (arg) activate)
      "Move up lines then position at filename, advice"
      (interactive "p")
      (if (= 3 (line-number-at-pos))
          (goto-char (point-max)))))

  (use-package ibuffer
    :defer t
    :bind ("C-x C-b" . ibuffer-other-window)
    :config
    (defun ibuffer-visit-buffer-other-window (&optional noselect)
      "Visit the buffer on this line in another window."
      (interactive)
      (let ((buf (ibuffer-current-buffer t)))
        (bury-buffer (current-buffer))
        (if noselect
            (let ((curwin (selected-window)))
              (pop-to-buffer buf)
              (select-window curwin))
          (switch-to-buffer-other-window buf)
          (kill-buffer-and-its-windows "*Ibuffer*")
          )))

    ;; Use human readable Size column instead of original one
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

    ;; Modify the default ibuffer-formats
    (setq ibuffer-formats
          '((mark modified read-only " "
                  (name 18 18 :left :elide)
                  " "
                  (size-h 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  filename-and-process))))
#+END_SRC

* Navigation
#+BEGIN_SRC emacs-lisp
  ;; bookmark setting
  (setq bookmark-default-file "~/.emacs.d/emacs.bmk")
  ;; 每当设置书签的时候都保存书签文件，否则只在你退出 Emacs 时保存
  (setq bookmark-save-flag 1)

  (use-package bm
    :bind (("C-x m t" . bm-toggle)
           ("C-x m s" . bm-show-all)))

  (use-package ace-jump-mode
    :bind
    ("C-`" . ace-jump-mode)
    ("<apps>" . ace-jump-mode))

  (use-package ace-window
    :bind
    ("C-\"" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC
* Search and Finding
** swiper replaces isearch
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind
    ("C-s" . swiper))
#+END_SRC
** ag: the silver searcher

=ag= [fn:8] is really a very fast grep tool, and =ag.el= [fn:9] provide the
Emacs interface to =ag=:

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :bind
    ("C-x g" . ag-project)
    :config
    (setq ag-highlight-search t))
#+END_SRC
** pt: the platium searcher

Because =counsel-ag= is not working in my Win64 machine, so I switch to =pt=
now.

Download =pt= from
https://github.com/monochromegane/the_platinum_searcher/releases, and it works
out of the box.

** Everything

Everything[fn:10] is a wonderful fast file and folder search engine, it provide
a command line tool to get search result from Everything to command line output:
=es.exe= [fn:11].

Reminded that Everything should be running in background to do the real search
task for =es.exe=.

#+BEGIN_SRC emacs-lisp
  (use-package everything
    :defer t
    :ensure t
    :init
    (setq everything-cmd "c:\\kimikit\\bin\\es.exe"))
#+END_SRC
** imenu & imenu-anywhere

=imenu= is used to navigate the function definitions in current buffer.

#+BEGIN_SRC emacs-lisp
  (use-package imenu
    :defer t
    :config
    (advice-add 'imenu-default-goto-function
                :around
                #'kimim/imenu-default-goto-function-advice))

  (use-package imenu-anywhere
    :defer t
    :bind ("C-c i" . imenu-anywhere))
#+END_SRC

* auto-complete
** abbrev
#+BEGIN_SRC emacs-lisp
(diminish 'abbrev-mode)
#+END_SRC
** ivy-mode

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :bind ("<f6>" . ivy-resume)
    :config
    (setq ivy-use-virtual-buffers t)
    (ivy-mode 1))
#+END_SRC

** auto parenthesis

#+BEGIN_SRC emacs-lisp
  ;; add pair parenthis and quote automatically
  (use-package autopair
    :defer t
    :diminish autopair-mode
    :config
    (autopair-global-mode 1))
#+END_SRC
** yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer t
    :config
    (add-to-list
     'yas-snippet-dirs (concat kimim/path-sync "tools/snippets"))
    (yas-global-mode 1)
    (use-package company)
    (add-to-list 'company-backends 'company-yasnippet)
    (use-package warnings)
    (setq warning-suppress-types '((yasnippet backquote-change))))
#+END_SRC

In order to remove following warning:

#+BEGIN_QUOTE
Warning (yasnippet): ‘xxx’ modified buffer in a backquote expression.
  To hide this warning, add (yasnippet backquote-change) to ‘warning-suppress-types’.
#+END_QUOTE

** company mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :defer t
    :config
    (global-company-mode t))
#+END_SRC
** company dict
#+BEGIN_SRC emacs-lisp
  (use-package company-dict
    :defer t
    :config
    ;; Where to look for dictionary files. Default is ~/.emacs.d/dict
    (setq company-dict-dir "~/.emacs.d/dict/")
    ;; Optional: if you want it available everywhere
    (add-to-list 'company-backends 'company-dict))
#+END_SRC
* Programming General
** Compiling
#+BEGIN_SRC emacs-lisp
  (setq next-error-recenter 20)
  (bind-key "C-<f11>" 'compile)
  (use-package compile-bookmarks
    :defer t
    :config
    (compile-bookmarks-mode))
#+END_SRC
** Tagging

#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :defer t
    :bind (("C-c f" . ggtags-find-file)
           ("M-." . ggtags-find-tag-dwim))
    :config
    ;; ggtags settings
    ;; Activate cygwin mount for gtags CDPATH issue on W32
    (cond ((eq window-system 'w32)
           (require 'cygwin-mount)
           (cygwin-mount-activate)))
    (setq ggtags-global-ignore-case t)
    (setq ggtags-sort-by-nearness t))
    ;; let ggtags use split-window with is redefined by ecb mode
    ;;(setq ggtags-split-window-function 'split-window-below)

    ;; close grep window and done ggtags navigation when type C-g
    ;; but some times it will close all the ecb windows, so remove this advice.
    ;; (advice-add 'keyboard-quit :before #'kimim/kill-grep-and-ggtags-done)

#+END_SRC
** Version Control

#+BEGIN_SRC emacs-lisp
  ;; ;; magit-status for git
  (use-package magit
    :defer t
    :bind ("C-x m g" . magit-status))
#+END_SRC

Following error will reported when using magit to commit changes:

#+BEGIN_QUOTE
server-ensure-safe-dir: The directory ‘~/.emacs.d/server’ is unsafe
#+END_QUOTE

The solution is to change the owner of =~/.emacs.d/server= [fn:12]

#+BEGIN_QUOTE
Click R-mouse on ~/.emacs.d/server and select “Properties” (last item in
menu). From Properties select the Tab “Security” and then select the button
“Advanced”. Then select the Tab “Owner” and change the owner from
“Administrators (\Administrators)” into “ (\”. Now the server code will accept
this directory as secure because you are the owner.
#+END_QUOTE


* Programming Language
** C

#+BEGIN_SRC emacs-lisp
  ;; Define the modes/packages you need
  (use-package irony
    :defer t
    :diminish irony-mode
    :config
    (setq w32-pipe-read-delay 0)

    (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

    ;; replace the `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook))

  (use-package company-c-headers
    :defer t
    )

  (use-package flycheck
    :defer t
    :config
    ;; set up flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

  (use-package cc-mode
    :defer t
    :ensure nil
    :config
    (use-package company)
    (add-to-list 'company-backends 'company-irony)
    (use-package company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include")
    (require 'irony)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    (require 'flycheck)
    (add-hook 'c-mode-hook 'flycheck-mode)
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (require 'ggtags)
    (add-hook 'c-mode-hook 'ggtags-mode)
    (add-hook 'c++-mode-hook 'ggtags-mode)

    (add-hook 'c-mode-common-hook
              (lambda ()
                ;; show column width indicator
                ;;(fci-mode 0)
                ;;(syntax-subword-mode 1)
                ;;(hs-minor-mode 0)
                ;;(c-set-style "gnu")
                (c-toggle-auto-newline 0)
                (c-toggle-auto-hungry-state 0)
                (c-toggle-syntactic-indentation 1)
                ;;(highlight-indentation-mode 1)
                (which-function-mode 1)
                (local-set-key "\C-co" 'ff-find-other-file)
                ;;(my-c-mode-common-hook-if0)
                (setq c-basic-offset 4))))
#+END_SRC

*** irony installation
=irony-mode= is developed by Sarcasm [fn:13]. It is an Emacs minor-mode that
aims at improving the editing experience for the C, C++ and Objective-C
languages. It works by using a combination of an Emacs package and a C++ program
(=irony-server=) that uses libclang. When correctly configured, it can provide
wonderful auto completion for functions and variables. The function prototypes
with parameters can be triggered as a yasnippet automatically.

It is quite easy to install =irony-server= under macOS, just invoke the command
"M-x irony-install-server", and Emacs will compile and install it to
=~/.emacs.d/irony/bin/irony-server=, by invoking the make commands:

#+BEGIN_SRC sh
  cmake -DCMAKE_INSTALL_PREFIX\=/Users/kimim/.emacs.d/irony/
  /Users/kimim/.emacs.d/elpa/irony-20160925.1030/server && cmake --build
  . --use-stderr --config Release --target install
#+END_SRC

For Cygwin/Windows, first we should install =libclang= 3.8.1-1 and
=libclang-devel= 3.8.1-1 and =cmake= with =setup.exe=.

Then compile =irony-server= with =cmake= and =make=:

#+BEGIN_SRC sh
~/.emacs.d/elpa/irony-20160925.1030/server/build
$ cmake -DCMAKE_INSTALL_PREFIX=~/.emacs.d/irony/ -G "Unix Makefiles" ..

~/.emacs.d/elpa/irony-20160925.1030/server/build
$ make install
Scanning dependencies of target irony-server
[ 14%] Building CXX object src/CMakeFiles/irony-server.dir/support/CommandLineParser.cpp.o
[ 28%] Building CXX object src/CMakeFiles/irony-server.dir/support/TemporaryFile.cpp.o
[ 42%] Building CXX object src/CMakeFiles/irony-server.dir/Command.cpp.o
[ 57%] Building CXX object src/CMakeFiles/irony-server.dir/Irony.cpp.o
[ 71%] Building CXX object src/CMakeFiles/irony-server.dir/TUManager.cpp.o
[ 85%] Building CXX object src/CMakeFiles/irony-server.dir/main.cpp.o
[100%] Linking CXX executable ../bin/irony-server.exe
[100%] Built target irony-server
Install the project...
-- Install configuration: "Release"
-- Up-to-date: /home/kimim/.emacs.d/irony/bin/irony-server.exe
#+END_SRC

** Python

Python development configuration is quite easy. =elpy= [fn:14] is used here:

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :defer t
    :config
    (elpy-enable))

  (use-package python
    :ensure nil
    :mode ("\\.py\\'" . python-mode)
    :defer t
    :config
    (use-package elpy)
    (add-hook 'python-mode-hook
              (lambda ()
                (setq yas-indent-line nil)))
    (add-to-list 'python-shell-completion-native-disabled-interpreters "python"))

  (use-package company-jedi
    :defer t
    :config
    (setq elpy-rpc-backend "jedi")
    (add-to-list 'company-backends 'company-jedi))
#+END_SRC

Following =python= package is required according to =elpy= mannual:

#+BEGIN_SRC sh
pip install rope
pip install jedi
# flake8 for code checks
pip install flake8
# importmagic for automatic imports
pip install importmagic
# and autopep8 for automatic PEP8 formatting
pip install autopep8
# and yapf for code formatting
pip install yapf
# install virtualenv for jedi
pip install virtualenv
#+END_SRC
** Emacs lisp

#+BEGIN_SRC emacs-lisp
  (define-derived-mode lisp-interaction-mode emacs-lisp-mode "λ")
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-elisp))
#+END_SRC

** AutoHotKey

=ahk-mode= developed by Rich Alesi[fn:15]
#+BEGIN_SRC emacs-lisp
  (use-package ahk-mode
    :defer t
    :mode ("\\.ahk\\'" . ahk-mode))
#+END_SRC
* Calendar

#+BEGIN_SRC emacs-lisp
  (setq diary-file "~/.emacs.d/diary")
  (setq calendar-latitude +30.16)
  (setq calendar-longitude +120.12)
  (setq calendar-location-name "Hangzhou")
  (setq calendar-remove-frame-by-deleting t)
  (setq calendar-week-start-day 1)
  (setq holiday-christian-holidays nil)
  (setq holiday-hebrew-holidays nil)
  (setq holiday-islamic-holidays nil)
  (setq holiday-solar-holidays nil)
  (setq holiday-bahai-holidays nil)
  (setq holiday-general-holidays '((holiday-fixed 1 1 "元旦")
                           (holiday-fixed 4 1 "愚人節")
                           (holiday-float 5 0 2 "父親節")
                           (holiday-float 6 0 3 "母親節")))
  (setq calendar-mark-diary-entries-flag t)
  (setq calendar-mark-holidays-flag nil)
  (setq calendar-view-holidays-initially-flag nil)
  (setq chinese-calendar-celestial-stem
        ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
  (setq chinese-calendar-terrestrial-branch
        ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
#+END_SRC
* Orgmode
** org general setting

#+BEGIN_SRC emacs-lisp
  ;; path and system environment setting for orgmode
  (if (not (boundp 'kimim/path-org))
      (defvar kimim/path-org (concat kimim/path-sync "org/")))

  (use-package org
    :defer t
    :bind
    ("C-c a" . org-agenda)
    ("C-c b" . org-iswitchb)
    ("C-c c" . org-capture)
    ("C-c l" . org-store-link)
    :config
    (setq org-export-allow-BIND t)
    (setq org-support-shift-select t)
    ;; no empty line after collapsed
    (setq org-cycle-separator-lines 0)
    (setq org-src-fontify-natively t)
    (setq org-startup-indented t))
#+END_SRC
** org for writing
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :config
    (setq org-hide-leading-stars t)
    (setq org-footnote-auto-adjust t)
    (setq org-export-with-sub-superscripts '{})
    (define-key org-mode-map (kbd "C-c C-x h") (lambda()
                                                 (interactive)
                                                 (insert "^{()}")
                                                 (backward-char 2)))
    (define-key org-mode-map (kbd "C-c C-x l") (lambda()
                                                 (interactive)
                                                 (insert "_{}")
                                                 (backward-char 1)))
    )
#+END_SRC
** org with source code
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :config
    ;; src block setting
    (setq org-src-window-setup 'current-window)
    (setq org-src-fontify-natively t)
    (setq org-confirm-babel-evaluate nil)
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((C . t)
       (python . t)
       (emacs-lisp . t)
       (sh . t)
       (dot . t)
       (ditaa . t)
       (js . t)
       (latex . t)
       (plantuml . t)
       (clojure . t)
       (org . t)
       ))
    )
#+END_SRC
** org exporting

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :config
    (setq org-export-allow-BIND t)
    (setq org-export-creator-string "")
    (setq org-export-html-validation-link nil))
    (setq org-html-validation-link nil)

  (use-package ox-reveal
    :defer t
    :config
    (setq org-reveal-root "reveal.js")
    ;;(setq org-reveal-root "~/../Tools/reveal.js")
    ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/2.5.0/")
    (setq org-reveal-theme "simple")
    (setq org-reveal-width 1200)
    (setq org-reveal-height 750)
    (setq org-reveal-transition "fade")
    (setq org-reveal-hlevel 2)
    )

  (use-package ox-html
    :defer t
    :ensure nil
    :config
    (defadvice org-html-paragraph (before fsh-org-html-paragraph-advice
                                          (paragraph contents info) activate)
      "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
      (let ((fixed-contents)
            (orig-contents (ad-get-arg 1))
            (reg-han "[[:multibyte:]]"))
        (setq fixed-contents (replace-regexp-in-string
                              (concat "\\(" reg-han "\\) *\n *\\(" reg-han "\\)")
                              "\\1\\2" orig-contents))
        (ad-set-arg 1 fixed-contents)
        ))

    (defun org-babel-result-to-file (result &optional description)
      "Convert RESULT into an `org-mode' link with optional DESCRIPTION.
  If the `default-directory' is different from the containing
  file's directory then expand relative links."
      (when (stringp result)
        (if (string= "svg" (file-name-extension result))
            (progn
              (with-temp-buffer
                (if (file-exists-p (concat result ".html"))
                    (delete-file (concat result ".html")))
                (rename-file result (concat result ".html"))
                (insert-file-contents (concat result ".html"))
                (message (concat result ".html"))
                (format "#+BEGIN_HTML
  <div style=\"text-align: center;\">
  %s
  </div>
  ,#+END_HTML"
                        (buffer-string)
                        )))
          (progn
            (format "[[file:%s]%s]"
                    (if (and default-directory
                             buffer-file-name
                             (not (string= (expand-file-name default-directory)
                                           (expand-file-name
                                            (file-name-directory buffer-file-name)))))
                        (expand-file-name result default-directory)
                      result)
                    (if description (concat "[" description "]") "")))))))
#+END_SRC

** org with diagram
#+BEGIN_SRC emacs-lisp
  ;; plant uml setting
  (use-package org
    :defer t
    :config
    (require 'ob-plantuml)
    (setenv "GRAPHVIZ_DOT" "C:\\cygwin\\bin\\dot.exe")
    (setq org-plantuml-jar-path "C:\\kimikit\\plantuml\\plantuml.jar"))
#+END_SRC
** org as GTD system

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :commands (org-toggle-office org-toggle-home)
    :bind (:map org-mode-map
           ("C-c  。" . org-time-stamp))
    :config
    (setq org-todo-keywords
          '(
            ;; for tasks
            (sequence "TODO(t!)" "SCHED(s)" "|" "DONE(d@/!)")
            ;; for risks, actions, problems
            (sequence "OPEN(o!)" "WAIT(w@/!)" "|" "CLOSE(c@/!)")
            ;; special states
            (type "REPEAT(r)" "SOMEDAY(m)" "|" "ABORT(a@/!)")))

    (setq org-tag-alist
          '((:startgroup . nil)
            ("@office" . ?o) ("@home" . ?h)
            (:endgroup . nil)
            ("@team" . ?t) ("@leader" . ?l)
            ("risk" . ?k)
            ("sync" . ?s)
            ("reading" . ?r) ("writing" . ?w)
            ("project" . ?p) ("category" . ?c)
            ("habit" . ?H)
            ("next" . ?n)))

    ;; Level=2 or 3, state is not DONE/ABORT/CLOSED/SOMEDAY
    ;; contains no TODO keywords or SOMEDAY
    ;; contains no project tag
    ;; subtree contains TODO

    ;; 子節點不需要繼承父節點的 tag
    ;; project 表示這個節點下的是項目任務，任務不需要繼承 project tag
    ;; category 表示該節點是分類節點
    (setq org-tags-exclude-from-inheritance '("project" "category"))
    (diminish 'auto-fill-function)
    (add-hook 'org-mode-hook
              (lambda ()
                (auto-fill-mode)
                (org-display-inline-images)
                (drag-stuff-mode -1)
                (if (boundp 'org-agenda-mode-map)
                    (org-defkey org-agenda-mode-map "x"
                                'org-agenda-list-stuck-projects))))

    (setq org-stuck-projects
          '("+LEVEL>=2-category-project-habit/-TODO-SCHED-DONE-OPEN-WAIT-CLOSE-SOMEDAY-REPEAT-ABORT"
            ("TODO" "SCEHD" "OPEN" "WAIT") nil nil))

    (setq org-refile-targets
          '(;; refile to maxlevel 2 of current file
            (nil . (:maxlevel . 1))
            ;; refile to maxlevel 1 of org-refile-files
            (org-refile-files :maxlevel . 1)
            ;; refile to item with 'project' tag in org-refile-files
            (org-refile-files :tag . "project")
            (org-refile-files :tag . "category")))

    (defadvice org-schedule (after add-todo activate)
      (if (or (string= "OPEN" (org-get-todo-state))
              (string= "WAIT" (org-get-todo-state))
              (string= "CLOSE" (org-get-todo-state)))
          (org-todo "WAIT")
        (org-todo "SCHED")))

    (defadvice org-deadline (after add-todo activate)
      (if (or (string= "OPEN" (org-get-todo-state))
              (string= "WAIT" (org-get-todo-state))
              (string= "CLOSE" (org-get-todo-state)))
          (org-todo "WAIT")
        (org-todo "SCHED")))

    (setq org-log-done t)
    (setq org-todo-repeat-to-state "REPEAT")

    ;; settings for org-agenda-view
    (setq org-agenda-span 2)
    (setq org-agenda-skip-scheduled-if-done t)
    (setq org-agenda-skip-deadline-if-done t)
    (setq org-deadline-warning-days 2)

    (setq org-agenda-custom-commands
          '(("t" todo "TODO|OPEN"
             ((org-agenda-sorting-strategy '(priority-down))))
            ;; all task should be done or doing
            ("d" todo "TODO|SCHED|OPEN|WAIT"
             ((org-agenda-sorting-strategy '(priority-down))))
            ("o" todo "OPEN"
             ((org-agenda-sorting-strategy '(priority-down))))
            ("w" todo "WAIT"
             ((org-agenda-sorting-strategy '(priority-down))))
            ("h" tags "habit/-ABORT-CLOSE"
             ((org-agenda-sorting-strategy '(todo-state-down))))
            ("c" tags "clock"
             ((org-agenda-sorting-strategy '(priority-down))))))

    (setq org-capture-templates
          '(("c" "Capture" entry (file+headline (concat kimim/path-org "capture.org") "Inbox")
             "* %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("t" "TODO" entry (file+headline (concat kimim/path-org "capture.org") "Inbox")
             "* TODO %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("o" "Action" entry (file+headline (concat kimim/path-org "capture.org") "Inbox")
             "* OPEN %?\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")
            ("h" "Habit" entry (file+headline (concat kimim/path-org "world.org") "Habit")
             "* %?  :habit:\n:PROPERTIES:\n:CAPTURED: %U\n:END:\n")))

    (defcustom org-location-home-or-office "office" "office")
    (defun org-toggle-office ()
      (interactive)
      (setq org-location-home-or-office "office")
      (setq org-agenda-files
            (list kimim/path-org
                  (concat kimim/path-org "work/")))
      (setq org-refile-files
            (append
             (file-expand-wildcards (concat kimim/path-org "*.org"))
             (file-expand-wildcards (concat kimim/path-org "work/*.org"))
             (file-expand-wildcards (concat kimim/path-org "home/*.org"))))
      (message "Agenda is from office..."))

    (defun org-toggle-home ()
      (interactive)
      (setq org-location-home-or-office "home")
      (setq org-agenda-files
            (list kimim/path-org
                  (concat kimim/path-org "home/")))
      (setq org-refile-files
            (append
             (file-expand-wildcards (concat kimim/path-org "*.org"))
             (file-expand-wildcards (concat kimim/path-org "home/*.org"))
             (file-expand-wildcards (concat kimim/path-org "work/*.org"))))
      (message "Agenda is from home..."))
    (require 'ivy) ; use ivy to complete refile files
    (defun org-toggle-home-or-office()
      (interactive)
      (if (string= org-location-home-or-office "home")
          (org-toggle-office)
        (org-toggle-home))))
#+END_SRC

** org link: match

New link to use everything to locate a file with unique ID:

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :config
    (org-add-link-type "match" 'org-match-open)

    (defun org-match-open (path)
      "Visit the match search on PATH.
       PATH should be a topic that can be thrown at everything/?."
      (w32-shell-execute
       "open" "Everything" (concat "-search " path))))

#+END_SRC
** org publish to jekyll

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :config
    ;; file in jekyll base will also be uploaded to github
    (setq path-jekyll-base "~/kimi.im/_notes/_posts")
    ;; in order to sync draft with cloud sync driver
    (setq path-jekyll-draft (concat kimim/path-sync "kimim/_draft/"))
    ;; file in jekyll base will also be uploaded to github

    (setq org-publish-project-alist
          '(
            ("org-blog-content"
             ;; Path to your org files.
             :base-directory "~/kimi.im/_notes"
             :base-extension "org"
             ;; Path to your jekyll project.
             :publishing-directory "~/kimi.im/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :headline-levels 4
             :section-numbers t
             :html-extension "html"
             :body-only t ;; Only export section between <body></body>
             :with-toc nil
             )
            ("org-blog-static"
             :base-directory "~/kimi.im/_notes/"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php\\|svg"
             :publishing-directory "~/kimi.im/"
             :recursive t
             :publishing-function org-publish-attachment)
            ("blog" :components ("org-blog-content" "org-blog-static"))
            ))

    (defun jekyll-post ()
      "Post current buffer to kimi.im"
      (interactive)
      ;; get categories
      ;; get buffer file name
      (let ((category (jekyll-get-category))
            (filename (file-name-nondirectory buffer-file-name))
            newfilename)
        ;; append date to the beginning of the file name
        (setq newfilename (concat path-jekyll-base "/" category "/" (format-time-string "%Y-%m-%d-") filename))
        ;; mv the file to the categories folder
        (rename-file buffer-file-name newfilename)
        (switch-to-buffer (find-file-noselect newfilename))
        ;;    (color-theme-initialize)
        ;;    (color-theme-jekyll)
        ;; execute org-publish-current-file
        (org-publish-current-file)
        ;;    (color-theme-eclipse)
        ;; go to kimi.im folder and execute cyg command
        (with-temp-buffer(dired "~/kimi.im/")
                         (kimim/cyg)
                         (kill-buffer))
        ))

    (defun jekyll-tag ()
      "add new tags"
      (interactive)
                                          ;find "tags: [" and replace with "tags: [new-tag, "
      (goto-char (point-min))
      ;;  (search-forward "tags: [")
      (re-search-forward "tags: \\[" nil t)
      (insert (ido-completing-read "tags: " '(
                                              "emacs" "org-mode"
                                              "Deutsch" "Français" "English"
                                              "Windows" "RTOS" "industry"
                                              "travel"  "street-shots" "photography"
                                              "leadership"
                                              )))
      (insert ", ")
      )

    (defun jekyll-header()
      "Insert jekyll post headers,
  catergories and tags are generated from exisiting posts"
      (interactive)
      (insert "#+BEGIN_HTML\n---\nlayout: post\ntitle: ")
      (insert (read-string "Title: "))
      (insert "\ncategories: [")
      (insert (ido-completing-read "categories: " '(
                                                    "technology"
                                                    "productivity" "leadership"
                                                    "psychology" "language"
                                                    "education" "photography"
                                                    )))
      (insert "]")
      (insert "\ntags: [")
      (insert (ido-completing-read "tags: " '("emacs" "org-mode" "c prog"
                                              "Deutsch" "Français" "English"
                                              "management")))
      (insert "]\n---\n#+END_HTML\n\n")
      )


    (defun jekyll ()
      (interactive)
      (find-file (concat path-jekyll-draft "/" (read-string "Filename: ") ".org"))
      (jekyll-header)
      (save-buffer)
      )

    (defun jekyll-get-category ()
      (interactive)
      (goto-char (point-min))
      (re-search-forward "^categories: \\[\\([a-z-]*\\)\\]$" nil t)
      (match-string 1)
      )

    (defun jekyll-test ()
      (interactive)
      (color-theme-initialize)
      (color-theme-jekyll)
      (org-open-file (org-html-export-to-html nil))))

#+END_SRC
* deft for note management

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :defer t
    :ensure t
    :bind
    (("C-x d" . deft-find-file)
     ("C-x C-d" . deft))
    :config
    (setq deft-extensions '("txt" "tex" "org" "md"))
    (if (not (boundp 'kimim/path-notes))
        (defvar kimim/path-notes (concat kimim/path-sync "notes/")))
    (setq deft-directory kimim/path-notes)
    (setq deft-recursive t)
    (setq deft-file-naming-rules '((noslash . "_")))
    (setq deft-text-mode 'org-mode)
    (setq deft-use-filter-string-for-filename t)
    (setq deft-org-mode-title-prefix t)
    (setq deft-use-filename-as-title nil)
    (setq deft-strip-summary-regexp
          (concat "\\("
                  "[\n\t]" ;; blank
                  "\\|^#\\+[[:upper:]_]+:.*$" ;; org-mode metadata
                  "\\|^#\\+[[:alnum:]_]+:.*$" ;; org-mode metadata
                  "\\)"))

    ;;advise deft-open-file to replace spaces in file names with _
    (defun kimim/deft-open-file-advice (orig-fun &rest args)
      (setq name (pop args))
      (if (file-exists-p name)
          (progn
            (push name args)
            (apply orig-fun args))
        (progn
          (setq title (file-name-sans-extension
                       (file-name-nondirectory name)))
          (setq name (concat
                      (file-name-directory name)
                      (kimim/genfile-timestamp)
                      (downcase
                       (replace-regexp-in-string
                        " " "_" (file-name-nondirectory name)))
                      (if (not (file-name-extension name))
                          ".txt")))
          (push name args)
          (apply orig-fun args)
          (insert (concat "#+TITLE: " title "\n\n")))))

    (advice-add 'deft-open-file
                :around #'kimim/deft-open-file-advice)

    (defun kimim/deft-new-file-named-advice (orig-fun &rest args)
      (setq name (pop args))
      (setq title name)
      (setq name (concat
                  (kimim/genfile-timestamp)
                  (downcase
                   (replace-regexp-in-string
                    " " "_" name))))
      (push name args)
      (apply orig-fun args)
      (insert (concat "#+TITLE: " title "\n\n")))

    (advice-add 'deft-new-file-named
                :around #'kimim/deft-new-file-named-advice))
#+END_SRC
* erc and gnus

#+BEGIN_SRC emacs-lisp
  ;; erc settings
  (use-package erc
    :defer t
    :config
    (require 'erc-join)
    (erc-autojoin-mode 1)
    (erc-autojoin-enable)
    (setq erc-default-server "irc.freenode.net")
    (setq erc-autojoin-channels-alist
          '(("irc.freenode.net" "#emacs")))
    (setq erc-hide-list '("JOIN" "PART" "QUIT")))

  ;; gnus settings
  (use-package gnus
    :defer t
    :config
    (setq message-directory "~/Gnus/Mail/")
    (setq gnus-directory "~/Gnus/News/")
    (setq nnfolder-directory "~/Gnus/Mail/Archive")

    (setq gnus-agent t)
    (setq gnus-agent-expire-days 90)
                                          ; prompt for how many articles only for larger than 1000 articles
    (setq gnus-large-newsgroup 1000)
    (setq gnus-use-cache t)
    (setq gnus-fetch-old-headers nil) ; show previous messages in a thread
    (setq gnus-thread-indent-level 1)
    (add-hook 'gnus-summary-prepare-hook 'gnus-summary-hide-all-threads)
    (setq gnus-select-method '(nnml ""))
    (setq gnus-secondary-select-methods nil)
    (add-to-list 'gnus-secondary-select-methods '(nntp "news.gnus.org"))
    (add-to-list 'gnus-secondary-select-methods '(nntp "news.gmane.org"))
    (add-to-list 'gnus-secondary-select-methods '(nnml "")))
#+END_SRC

* kimim utils
#+BEGIN_SRC emacs-lisp
  (use-package kimim
    :defer t
    :ensure nil
    :bind
    ("<f9>" . kimim/cyg)
    ("S-<f9>" . kimim/cmd)
    ("<f10>" . kimim/dc)
    ("C-c r" . kimim/rename-file-and-buffer)
    ("C-x m o" . kimim/open-in-external-app)
    ("C-c d" . kimim/lookinsight)
    :load-path "~/kimim-emacs/site-lisp/"
    )
#+END_SRC
* Key Binding

#+BEGIN_SRC emacs-lisp
  (bind-key "<f1>" 'delete-other-windows)
  (bind-key "C-<f1>" 'nuke-other-buffers)
  (bind-key "<f2>" 'other-window)
  (bind-key "<f5>" (lambda()
                     (interactive)
                     (switch-to-buffer "*scratch*") (delete-other-windows)))
  (bind-key "<f7>" 'kimim/toggle-highlight-tap)
  (bind-key "<f8>" (lambda()
                     (interactive) (list-charset-chars 'ascii)))
  (bind-key "<f12>" 'org-toggle-home-or-office)

  ;; (bind-key "M-<SPC>" (lambda () (interactive)
  ;;                       (insert ?_)))
  (bind-key "C-h" 'delete-backward-char)
  (bind-key "M-h" 'backward-kill-word)
  (bind-key "M-?" 'mark-paragraph)
  (bind-key "C-x j" 'bookmark-jump)
  (bind-key "C-x k" 'kill-this-buffer)
  (bind-key "C-x C-v" 'view-file-other-window)
  (bind-key "C-c C-o" 'occur)
  (bind-key "C-z" 'set-mark-command)
  (bind-key "M-o" 'other-window)
  (bind-key "M-n" 'next-error)
  (bind-key "M-p" 'previous-error)
  ;;(define-key hs-minor-mode-map "\C-c/" 'hs-toggle-hiding)
  (bind-key "M-*" 'pop-tag-mark)
  (bind-key "C-c =" 'get-file-line)

  (bind-key "C-c C-/" 'comment-or-uncomment-region)
  (bind-key "RET" 'newline-and-indent)
  ;;(define-key global-map (kbd "<M-S-mouse-1>") 'pop-tag-mark)
  ;; key bindings
  (when (eq system-type 'darwin) ;; mac specific settings
    (setq mac-option-modifier 'alt)
    (setq mac-command-modifier 'meta)
    ;; sets fn-delete to be right-delete
    (global-set-key [kp-delete] 'delete-char))

  (bind-key "C-x m h" 'help)
  ;; C-x r j ?x 打開常用文件
  (set-register ?e '(file . "~/kimim-emacs/init.el"))
  (set-register ?o '(file . "~/kimim-emacs/README.org"))

#+END_SRC

* Footnotes

[fn:1] http://www.literateprogramming.com/

[fn:2] http://cygwin.com/

[fn:3] http://msys2.github.io/

[fn:4] https://cygwin.com/install.html

[fn:5] https://cygwin.com/faq/faq.html#faq.setup.cli

[fn:6] http://brew.sh/

[fn:7] https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html

[fn:8] https://github.com/ggreer/the_silver_searcher#installation

[fn:9] https://github.com/Wilfred/ag.el

[fn:10] http://www.voidtools.com

[fn:11] http://www.voidtools.com/es.zip

[fn:12] https://github.com/syl20bnr/spacemacs/issues/381

[fn:13] https://github.com/Sarcasm/irony-mode

[fn:14] https://github.com/jorgenschaefer/elpy

[fn:15] https://github.com/ralesi/ahk-mode
